<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ArchLinux安装</title>
    <url>/posts/54936.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ArchLinux是通用 x86-64 GNU/Linux 发行版，同时也是一个非常简洁的Linux。它将简洁定义为将简洁定义为：避免任何不必要的添加、修改和复杂增加。甚至连vim都不自带！这也给它的安装带来了难度。但与此同时它也提供了非常详细并且更新及时的Wiki（帮助文档），供开发者学习使用。</p>
<h2 id="Arction"><a href="#Arction" class="headerlink" title="Arction:"></a>Arction:</h2><a id="more"></a>

<h3 id="1-下载安装镜像到U盘"><a href="#1-下载安装镜像到U盘" class="headerlink" title="1.下载安装镜像到U盘"></a>1.下载安装镜像到U盘</h3><blockquote>
<p>镜像地址:  <a href="http://mirrors.163.com/archlinux/iso">http://mirrors.163.com/archlinux/iso</a></p>
</blockquote>
<h3 id="2-登入系统给磁盘分区"><a href="#2-登入系统给磁盘分区" class="headerlink" title="2.登入系统给磁盘分区"></a>2.登入系统给磁盘分区</h3><p>同步时间：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] timedatectl set-ntp <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>查看当前磁盘各个分区：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] lsblk</span><br></pre></td></tr></table></figure>
<p>设置分区：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] cfdisk /dev/sdx  <span class="comment">#选gpt设置分区,sdx为你想要安装的那个分区</span></span><br></pre></td></tr></table></figure>
<h4 id="当电脑里面已经有别的系统且也是UEFI引导时："><a href="#当电脑里面已经有别的系统且也是UEFI引导时：" class="headerlink" title="当电脑里面已经有别的系统且也是UEFI引导时："></a>当电脑里面已经有别的系统且也是UEFI引导时：</h4><p>分区方案：<br>sdx1—————1G————–swap分区<br>sdx2—————nG————–主分区</p>
<h4 id="当电脑还是空机时"><a href="#当电脑还是空机时" class="headerlink" title="当电脑还是空机时"></a>当电脑还是空机时</h4><p>分区方案：<br>sdx1—————1G————–swap分区<br>sdx2—————nG————–主分区<br>sdx3—————500M————ESP分区</p>
<h4 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h4><p>对于 root、home 分区等直接使用 ext4 文件系统进行初始化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] mkfs.ext4 /dev/sdx2</span><br></pre></td></tr></table></figure>
<p>对于交换分区，不能使用上述命令进行格式化，而需要使用 mkswap 将其初始化。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] mkswap /dev/sdx1</span><br><span class="line">[root@archiso~] swapon /dev/sdx1</span><br></pre></td></tr></table></figure>
<p>电脑为空机执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] mkfs.fat -F32 /dev/sda1</span><br></pre></td></tr></table></figure>
<p>(格式化ESP分区)</p>
<h4 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h4><blockquote>
<p>假设系统内的ESP分区为sdxn</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 挂载根分区</span></span><br><span class="line">[root@archiso~] mount /dev/sdx2 /mnt</span><br><span class="line"><span class="comment"># 在根分区下新建boot文件夹</span></span><br><span class="line">[root@archiso~] mkdir /mnt/boot</span><br><span class="line"><span class="comment"># 挂载boot分区</span></span><br><span class="line">[root@archiso~] mount /dev/sdxn /mnt/boot</span><br></pre></td></tr></table></figure>
<h4 id="更换软件源"><a href="#更换软件源" class="headerlink" title="更换软件源"></a>更换软件源</h4><p>使用reflector来获取速度最快的6个镜像，并将地址保存至/etc/pacman.d/mirrorlist</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] reflector -c China -a 6 --sort rate --save /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>
<h3 id="3-安装系统"><a href="#3-安装系统" class="headerlink" title="3.安装系统"></a>3.安装系统</h3><p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] pacstrap -i /mnt base base-devel linux linux-firmware</span><br></pre></td></tr></table></figure>
<blockquote>
<p>安装完系统后会在/mnt/boot下生成几个文件。这对下面配置grub引导文件至关重要，下面生成grub配置文件时会扫描这几个文件</p>
</blockquote>
<h3 id="4-配置系统"><a href="#4-配置系统" class="headerlink" title="4.配置系统"></a>4.配置系统</h3><h4 id="1-配置fstab"><a href="#1-配置fstab" class="headerlink" title="(1)配置fstab"></a>(1)配置fstab</h4><p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure>
<h4 id="2-切换到新系统"><a href="#2-切换到新系统" class="headerlink" title="(2)切换到新系统"></a>(2)切换到新系统</h4><p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] arch-chroot /mnt</span><br><span class="line">[root@archiso~] pacman -S vim <span class="comment">#安装vim</span></span><br></pre></td></tr></table></figure>
<h4 id="3-进行本地语言设置"><a href="#3-进行本地语言设置" class="headerlink" title="(3)进行本地语言设置"></a>(3)进行本地语言设置</h4><p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] vim /etc/locale.gen</span><br></pre></td></tr></table></figure>
<p>反注释（删掉前面的#）<br>en_US.UTF-8 UTF-8<br>zh_CN.UTF-8 UTF-8<br>这两个，退出保存<br>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] locale-gen</span><br></pre></td></tr></table></figure>
<p>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] <span class="built_in">echo</span> LANG=en_US.UTF-8 &gt; /etc/locale.conf</span><br></pre></td></tr></table></figure>
<h4 id="4-设置时区"><a href="#4-设置时区" class="headerlink" title="(4)设置时区"></a>(4)设置时区</h4><p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>
<p>设置时区。<br>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] hwclock --systohc --utc</span><br></pre></td></tr></table></figure>
<h4 id="5-设置主机名和网络"><a href="#5-设置主机名和网络" class="headerlink" title="(5)设置主机名和网络"></a>(5)设置主机名和网络</h4><p>设置主机名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] vim /etc/hostname</span><br></pre></td></tr></table></figure>
<blockquote>
<p>主机名<br>~<br>~<br>~</p>
</blockquote>
<p>设置网络：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] vim /etc/hosts</span><br></pre></td></tr></table></figure>
<blockquote>
<p>127.0.0.1&emsp;&emsp;localhost<br>::1&emsp;&emsp;&emsp;&emsp;&emsp;localhost<br>127.0.0.1&emsp;&emsp;主机名.localdomain&emsp;&emsp;主机名</p>
</blockquote>
<p>设置网络DNS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] vim /etc/resolv.conf.head</span><br></pre></td></tr></table></figure>
<blockquote>
<p>nameserver&emsp;&emsp;218.2.2.2&emsp;—江苏电信<br>nameserver&emsp;&emsp;223.5.5.5&emsp;—阿里</p>
</blockquote>
<h4 id="6-安装网络工具"><a href="#6-安装网络工具" class="headerlink" title="(6)安装网络工具"></a>(6)安装网络工具</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] pacman -S dhcpcd</span><br><span class="line">[root@archiso~] systemctl start dhcpcd</span><br><span class="line">[root@archiso~] systemctl <span class="built_in">enable</span> dhcpcd</span><br></pre></td></tr></table></figure>
<h3 id="5-引导系统"><a href="#5-引导系统" class="headerlink" title="5.引导系统"></a>5.引导系统</h3><p>GRUB进行UEFI引导<br>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] pacman -S dosfstools grub efibootmgr</span><br></pre></td></tr></table></figure>
<p>安装引导工具</p>
<p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] grub-install --target=x86_64-efi --efi-directory=/boot   --bootloader-id=Arch</span><br></pre></td></tr></table></figure>
<p>进行安装grub</p>
<p>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>
<p>进行配置grub</p>
<h3 id="6-用户管理"><a href="#6-用户管理" class="headerlink" title="6.用户管理"></a>6.用户管理</h3><h4 id="（1）设置root密码"><a href="#（1）设置root密码" class="headerlink" title="（1）设置root密码"></a>（1）设置root密码</h4><p>执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] passwd</span><br></pre></td></tr></table></figure>
<h4 id="（2）添加用户"><a href="#（2）添加用户" class="headerlink" title="（2）添加用户"></a>（2）添加用户</h4><p>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] useradd -m -G wheel 用户名</span><br></pre></td></tr></table></figure>
<p>（务必添加一个 用户 ，否则后面sddm显示管理器登录的时候无法登录，sddm不会列出root用户）<br>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] passwd 用户名</span><br></pre></td></tr></table></figure>
<p>为刚才添加的用户设置密码</p>
<h4 id="3-给用户添加权限"><a href="#3-给用户添加权限" class="headerlink" title="(3) 给用户添加权限"></a>(3) 给用户添加权限</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] ln -S /usr/bin/vim /usr/bin/vi </span><br><span class="line">[root@archiso~] visudo</span><br></pre></td></tr></table></figure>
<blockquote>
<p>%wheel All=(All)All “去掉这句话前的‘#’符号”</p>
</blockquote>
<h3 id="7-退出chroot重启"><a href="#7-退出chroot重启" class="headerlink" title="7.退出chroot重启"></a>7.退出chroot重启</h3><p>执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@archiso~] <span class="built_in">exit</span></span><br><span class="line">[root@archiso~] reboot</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux学习</category>
      </categories>
      <tags>
        <tag>ArchLinux</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH秘钥安装到服务器</title>
    <url>/posts/44546.html</url>
    <content><![CDATA[<h1 id="SSH秘钥安装到服务器"><a href="#SSH秘钥安装到服务器" class="headerlink" title="SSH秘钥安装到服务器"></a>SSH秘钥安装到服务器</h1><h3 id="一、本机秘钥生成"><a href="#一、本机秘钥生成" class="headerlink" title="一、本机秘钥生成"></a>一、本机秘钥生成</h3><p>终端输入:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen </span><br></pre></td></tr></table></figure>
<p>执行这条命令后会在宿主目录内生成.ssh文件夹里面包含公钥和私钥<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/SSH%E7%A7%98%E9%92%A5%E5%AE%89%E8%A3%85%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227085743.png"></p>
<a id="more"></a>

<p>输入:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat id_rsa.pub</span><br></pre></td></tr></table></figure>
<p>将显示的结果拷贝下来<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/SSH%E7%A7%98%E9%92%A5%E5%AE%89%E8%A3%85%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227085728.png"></p>
<h3 id="二、在服务器上安装秘钥"><a href="#二、在服务器上安装秘钥" class="headerlink" title="二、在服务器上安装秘钥"></a>二、在服务器上安装秘钥</h3><p>键入以下命令，在服务器上安装公钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> .ssh <span class="comment">#如没有.ssh文件夹请新建</span></span><br><span class="line">$ vim authorized_keys <span class="comment">#把刚刚拷贝的公钥粘贴到里面</span></span><br></pre></td></tr></table></figure>
<p>如此便完成了公钥的安装。为了确保连接成功，请保证以下文件权限正确：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chmod 600 authorized_keys</span><br><span class="line">$ chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure>
<h3 id="三、设置-SSH，打开密钥登录功能"><a href="#三、设置-SSH，打开密钥登录功能" class="headerlink" title="三、设置 SSH，打开密钥登录功能"></a>三、设置 SSH，打开密钥登录功能</h3><p>编辑 /etc/ssh/sshd_config 文件，进行如下设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br></pre></td></tr></table></figure>
<p>另外，请留意 root 用户能否通过 SSH 登录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure>
<p>当你完成全部设置，并以密钥方式登录成功后，再禁用密码登录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PasswordAuthentication no <span class="comment">#可不设置</span></span><br></pre></td></tr></table></figure>
<p>最后，重启 SSH 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ service sshd restart</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux学习</category>
      </categories>
      <tags>
        <tag>SSH秘钥管理</tag>
      </tags>
  </entry>
  <entry>
    <title>链表</title>
    <url>/posts/54862.html</url>
    <content><![CDATA[<h1 id="离散存储–链表"><a href="#离散存储–链表" class="headerlink" title="离散存储–链表"></a>离散存储–链表</h1><h3 id="定义"><a href="#定义" class="headerlink" title="定义:"></a>定义:</h3><ol>
<li>n 个结点离散分配</li>
<li> 彼此通过指针相连</li>
<li>   每个结点只有一个前驱结点，每个结点只有一个后继结点。</li>
<li>   首结点没有前驱结点，尾结点没有后继结点<h3 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语:"></a>专业术语:</h3></li>
<li>首结点<blockquote>
<p>第一个有效结点</p>
</blockquote>
</li>
<li>尾结点<blockquote>
<p>最后一个有效结点</p>
</blockquote>
</li>
<li>头结点<blockquote>
<p>第一个有效结点前的那个结点<br> 头结点不存放有效数据<br> 加头结点的目的主要是为了方便对链表的操作</p>
</blockquote>
</li>
<li>头指针<blockquote>
<p>指向头结点的指针变量</p>
</blockquote>
</li>
<li>尾指针<blockquote>
<p>指向尾结点的指针变量</p>
</blockquote>
<h4 id="如果希望通过一个函数来对链表进行处理，我们至少需要接收链表的哪些参数"><a href="#如果希望通过一个函数来对链表进行处理，我们至少需要接收链表的哪些参数" class="headerlink" title="如果希望通过一个函数来对链表进行处理，我们至少需要接收链表的哪些参数:"></a>如果希望通过一个函数来对链表进行处理，我们至少需要接收链表的哪些参数:</h4> 只需要一个参数：头指针<br> 因为我们通过头指针可以推算出链表的其他所有信息。<h4 id="构建一个结点"><a href="#构建一个结点" class="headerlink" title="构建一个结点:"></a>构建一个结点:</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data; <span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">pNext</span>;</span> <span class="comment">//指针域</span></span><br><span class="line">&#125;* PNODE,NODE; <span class="comment">//NODE等价于struct Node,  </span></span><br><span class="line"><span class="comment">//PNODE等价于struct Node *</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类:"></a>分类:</h3></li>
<li>单链表</li>
<li>双链表:<blockquote>
<p>每个结点有两个指针域</p>
</blockquote>
</li>
<li>循环链表:<blockquote>
<p> 能通过任何一个结点找到其他所有结点</p>
</blockquote>
</li>
<li>非循环链表  <h3 id="单链表算法"><a href="#单链表算法" class="headerlink" title="单链表算法:"></a>单链表算法:</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">定义链表结点:</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType <span class="comment">//不一定是int型,ElemType是需求类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data;       <span class="comment">//存放元素值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNose</span> * <span class="title">next</span>;</span> <span class="comment">//指向后继结点</span></span><br><span class="line">&#125;LinkNode;               <span class="comment">//单链表结点类型</span></span><br></pre></td></tr></table></figure>
<details> <summary>初始化 InitList(&L)</summary>
<pre><code>
void InitList(LinkNode *&L)
&#123;
 L = (LinkNode *)malloc(sizeof(LinkNode));
 L->next s= NULL;
&#125;
</code></pre>
</details>
<details> <summary>销毁 DestroyList(&L)</summary>
<pre><code>
void DestoryList(LinkNode *&L)
&#123;
 LinkNode * pre = L,*p = L->next;
 while(p != NULL)
 &#123;
     free(pre);
     pre = p;
     p = pre->next;
 &#125;
 free(pre);
&#125;
</code></pre>
</details>
<details> <summary>判空 ListEmpty(L)</summary>
<pre><code>
bool ListEmpty(LinkNode * L)
&#123;
 return(L->next = NULL);
&#125;
</code></pre>
</details>
<details> <summary>求长度 ListLength(L)</summary>
<pre><code>
int ListLength(LinkNode * L)
&#123;
 LinkNode * p = L;
 int n=0;
 while(p->next != NULL)
 &#123;
     n++;
     p = p->next;
 &#125;
 return(n);
&#125;

</code></pre></details></li>
</ol>
<p></p>

<details> <summary>输出 DispList(L)</summary>
<pre><code>
void DispList(LinkNode * L)
&#123;
    LinkNode *p = L->next;
    while(p != NULL)
    &#123;
        printf("%d\n",p->data);
        p = p->next;
    &#125;
    printf("\n");
&#125;
</code></pre>
</details>
<details> <summary>按位求值 GetElem(L,i,&e)</summary>
<pre><code>
bool GetElem(LinkNode *L,int i, ElemType &e)
&#123;
    int j = 0;
    LinkNode *p = L;
    if (i <= 0) return false; while(j < i && p !="NULL)" &#123; j++;>next;
    &#125;
    if(p == NULL)
        return false;
    else
    &#123;   
        e = p->data;
        return true;
    &#125;
&#125;
</=></code></pre>
</details>
<details> <summary>按值查找 LocateElem(L,e)</summary>
<pre><code>
int LocateElem(LinkNode *L,ElemType e)
&#123;
    int i = 1;
    LinkNode *p = L-> next;
    while(p != NULL && p->data != e)
    &#123;
        p = p-> next;
        i++;
    &#125;
    if(p == NULL)
        return 0;
    else
        return (i);
&#125;
</code></pre>
</details>
<details> <summary>插入数据 ListInsert(&L,i,e)</summary>
<pre><code>
bool ListInsert(LinkNode *&L,int i,ElemType e)
&#123;
    int j = 0;
    LinkNode *p = L,*s;
    if(i <= 0) return false; while(j < i-1 && p !="NULL)" &#123; j++;>next;
    &#125;
    if(p == NULL)
        return false;
    else
    &#123;
        s = (LinkNode *)malloc(sizeof(LinkNode));
        s->data =e ;
        s->next = p->next;
        p->next = s;
        return true;
    &#125;
&#125;
</=></code></pre>
</details>
<details> <summary>删除数据 ListDelete(&L,i,&e)</summary>
<pre><code>
bool ListDelete(LinkNode *&L,int i,ElemType &e)
&#123;
    int j = 0;
    LinkNode *p = L,*q;
    if (i <= 0) return false; while (j < i-1 && p !="NULL" ) &#123; j++;>next;
    &#125;
    if (p == NULL)
        return false;
    else
    &#123;
        q = p->next;
        if(q == NULL)
            return false;
        e = q->data;
        p->next = q->next;
        free(q);
        return true;
    &#125;
&#125;
</=></code></pre>
</details>
]]></content>
      <categories>
        <category>数据结构学习</category>
      </categories>
  </entry>
  <entry>
    <title>Git+Nginx搭建远程Web服务器</title>
    <url>/posts/26452.html</url>
    <content><![CDATA[<h2 id="Git-Nginx搭建远程Web服务器"><a href="#Git-Nginx搭建远程Web服务器" class="headerlink" title="Git+Nginx搭建远程Web服务器"></a>Git+Nginx搭建远程Web服务器</h2><h3 id="一、服务器端配置"><a href="#一、服务器端配置" class="headerlink" title="一、服务器端配置"></a>一、服务器端配置</h3><h4 id="1-创建git文件夹用于存放网站文件"><a href="#1-创建git文件夹用于存放网站文件" class="headerlink" title="1. 创建git文件夹用于存放网站文件"></a>1. 创建git文件夹用于存放网站文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span></span><br><span class="line">$ mkdir .myblog</span><br><span class="line">$ <span class="built_in">cd</span> .myblog/</span><br><span class="line">$ git init --bare</span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082417.png"></p>
<a id="more"></a>
<h4 id="2-在服务器选择一个放置网站的目录，假设这个目录为-var-www-myblog"><a href="#2-在服务器选择一个放置网站的目录，假设这个目录为-var-www-myblog" class="headerlink" title="2. 在服务器选择一个放置网站的目录，假设这个目录为/var/www/myblog"></a>2. 在服务器选择一个放置网站的目录，假设这个目录为/var/www/myblog</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /var/www/myblog</span><br><span class="line">$ <span class="built_in">cd</span> /var/www/</span><br><span class="line">$ git <span class="built_in">clone</span> ~/.myblog myblog</span><br></pre></td></tr></table></figure>
<h4 id="3-自动部署"><a href="#3-自动部署" class="headerlink" title="3. 自动部署"></a>3. 自动部署</h4><p>git 有个功能叫做hook，也就是说在我们提交代码的时候会触发一些操作，这就是hook Git的挂钩（Hook）主要包含：</p>
<p>applypatch-msg post-update pre-rebase commit-msg pre-applypatch update post-commit pre-commit post-receive prepare-commit-msg</p>
<p>我们要用到的是post-update这个hook 进入到我们的git服务器的文件夹~/.myblog/hooks 进入到hook文件夹 使用ls命令可以看到许多hook脚本的sample<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082438.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.myblog/hooks</span><br><span class="line">$ vim post-update</span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082449.png"><br>新建一个post-update脚本 输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">cd</span> /var/www/myblog</span><br><span class="line">env -i git pull</span><br></pre></td></tr></table></figure>
<p>给新建的post-update赋予权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chmod +x post-update</span><br></pre></td></tr></table></figure>
<h4 id="4-配置nginx"><a href="#4-配置nginx" class="headerlink" title="4..配置nginx"></a>4..配置nginx</h4><p>编辑nginx的配置文件/etc/nginx/sites-available</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/nginx/sites-available/default</span><br><span class="line"></span><br><span class="line"><span class="comment">###### 编辑以下内容:</span></span><br><span class="line">server &#123;</span><br><span class="line">	listen 80 default_server;</span><br><span class="line">	listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">	<span class="comment"># SSL configuration</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment"># listen 443 ssl default_server;</span></span><br><span class="line">	<span class="comment"># listen [::]:443 ssl default_server;</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment"># Note: You should disable gzip for SSL traffic.</span></span><br><span class="line">	<span class="comment"># See: https://bugs.debian.org/773332</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment"># Read up on ssl_ciphers to ensure a secure configuration.</span></span><br><span class="line">	<span class="comment"># See: https://bugs.debian.org/765782</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment"># Self signed certs generated by the ssl-cert package</span></span><br><span class="line">	<span class="comment"># Don&#x27;t use them in a production server!</span></span><br><span class="line">	<span class="comment">#</span></span><br><span class="line">	<span class="comment"># include snippets/snakeoil.conf;</span></span><br><span class="line"></span><br><span class="line">	root /var/www/myblog;</span><br><span class="line"></span><br><span class="line">	<span class="comment"># Add index.php to the list if you are using PHP</span></span><br><span class="line">	index index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">	server_name _;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		<span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line">		<span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line">		try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082509.png"><br>这里主要修改server_name为你的域名 修改root目录为hexo静态文件的目录,以上面目录举例/var/www/myblog要注意nginx需要有该目录的文件读取权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo chown -R pi:pi /var/www</span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082518.png"><br>重启nginx:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo nginx -s reload</span><br></pre></td></tr></table></figure>
<h4 id="服务端配置完成！！！"><a href="#服务端配置完成！！！" class="headerlink" title="服务端配置完成！！！"></a>服务端配置完成！！！</h4><h3 id="二、客户端配置"><a href="#二、客户端配置" class="headerlink" title="二、客户端配置"></a>二、客户端配置</h3><h4 id="1-通过ssh秘钥和树莓派建立连接"><a href="#1-通过ssh秘钥和树莓派建立连接" class="headerlink" title="1. 通过ssh秘钥和树莓派建立连接"></a>1. 通过ssh秘钥和树莓派建立连接</h4><p><a href="./2020/../../../public/2020/12/31/SSH%E7%A7%98%E9%92%A5%E5%AE%89%E8%A3%85%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/index.html">SSH秘钥连接到服务器</a></p>
<h4 id="2-配置public推送"><a href="#2-配置public推送" class="headerlink" title="2. 配置public推送"></a>2. 配置public推送</h4><p>由于树莓派性能不强劲，所以采用在本机用hexo生成public文件夹。用git提交生成好的public文件夹到树莓派。具体提交方法采用hexo的hexo-deployer-git插件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> myblog</span><br><span class="line">$ vim _config.yml</span><br></pre></td></tr></table></figure>
<p>将deploy配置下的repo参数改为刚刚在树莓派上新建的.myblog路径。<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082532.png"><br>每次维护完项目后输入: hexo d 即可完成推送。<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082545.png"></p>
<h5 id="大功告成！！！"><a href="#大功告成！！！" class="headerlink" title="大功告成！！！"></a>大功告成！！！</h5><p>最后附上成果图:<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Git+Nginx%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8BWeb%E6%9C%8D%E5%8A%A1%E5%99%A8/20210227082553.png"></p>
]]></content>
      <categories>
        <category>树莓派的反击</category>
      </categories>
      <tags>
        <tag>树莓派服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基操</title>
    <url>/posts/58639.html</url>
    <content><![CDATA[<h2 id="Git-—-必须得懂的版本管理工具"><a href="#Git-—-必须得懂的版本管理工具" class="headerlink" title="Git — 必须得懂的版本管理工具"></a>Git — 必须得懂的版本管理工具</h2><h3 id="一、-Git最基本操作"><a href="#一、-Git最基本操作" class="headerlink" title="一、 Git最基本操作"></a>一、 Git最基本操作</h3><h4 id="1-初始化git文件夹-—-git-init"><a href="#1-初始化git文件夹-—-git-init" class="headerlink" title="1. 初始化git文件夹 — git init"></a>1. 初始化git文件夹 — git init</h4><p>设项目文件夹为gittest</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> gittest        <span class="comment">#cd到项目文件夹</span></span><br><span class="line">$ git init          <span class="comment">#初始化git文件夹</span></span><br></pre></td></tr></table></figure>
<h4 id="2-查看当前仓库状态-—-git-status"><a href="#2-查看当前仓库状态-—-git-status" class="headerlink" title="2. 查看当前仓库状态 — git status"></a>2. 查看当前仓库状态 — git status</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Git%E5%9F%BA%E6%93%8D/20210227082934.png"></p>
<h4 id="3-添加更改（追踪）-—-git-add"><a href="#3-添加更改（追踪）-—-git-add" class="headerlink" title="3. 添加更改（追踪） — git add ."></a>3. 添加更改（追踪） — git add .</h4><a id="more"></a>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Git%E5%9F%BA%E6%93%8D/20210227083004.png"></p>
<h4 id="4-查看更改内容-—-git-diff"><a href="#4-查看更改内容-—-git-diff" class="headerlink" title="4. 查看更改内容 — git diff"></a>4. 查看更改内容 — git diff</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Git%E5%9F%BA%E6%93%8D/20210227083138.png"><br>按q退出</p>
<h4 id="5-撤回追踪-—-git-reset"><a href="#5-撤回追踪-—-git-reset" class="headerlink" title="5. 撤回追踪 — git reset"></a>5. 撤回追踪 — git reset</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Git%E5%9F%BA%E6%93%8D/20210227083155.png"></p>
<h4 id="6-提交更改-—-git-commit"><a href="#6-提交更改-—-git-commit" class="headerlink" title="6. 提交更改 — git commit"></a>6. 提交更改 — git commit</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;本次提交的描述&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -a     <span class="comment">#自动添加并提交已追踪的修改</span></span><br></pre></td></tr></table></figure>
<h4 id="7-设置一些不提交的文件-—-创建-gitignore"><a href="#7-设置一些不提交的文件-—-创建-gitignore" class="headerlink" title="7. 设置一些不提交的文件 — 创建.gitignore"></a>7. 设置一些不提交的文件 — 创建.gitignore</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm --cached 文件名        <span class="comment">#删除已经存在的追踪</span></span><br><span class="line">$ vim .gitignore        <span class="comment">#在该文件下写入不想提交的文件名称</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Git%E5%9F%BA%E6%93%8D/20210227083210.png"><br>在.gitignore文件中写入不想提交的文件名<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Git%E5%9F%BA%E6%93%8D/20210227083218.png"><br>git status 查看追踪列表中少了 “nocommit.md”<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Git%E5%9F%BA%E6%93%8D/20210227083233.png"></p>
<h4 id="8-删除已经存在的追踪"><a href="#8-删除已经存在的追踪" class="headerlink" title="8. 删除已经存在的追踪"></a>8. 删除已经存在的追踪</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm --cached 文件名        <span class="comment">#删除已经存在的追踪</span></span><br></pre></td></tr></table></figure>
<p>从git系统中删除该文件，但依旧存在项目文件夹中，只是停止追踪而已。</p>
<h3 id="二、Git分支-—-不同的时间线"><a href="#二、Git分支-—-不同的时间线" class="headerlink" title="二、Git分支 — 不同的时间线"></a>二、Git分支 — 不同的时间线</h3><p>设新分支名为: newbranch</p>
<h4 id="1-添加新的分支"><a href="#1-添加新的分支" class="headerlink" title="1. 添加新的分支"></a>1. 添加新的分支</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch newbranch</span><br></pre></td></tr></table></figure>
<h4 id="2-查看分支"><a href="#2-查看分支" class="headerlink" title="2. 查看分支"></a>2. 查看分支</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch        <span class="comment">#查看当前项目分支有哪些</span></span><br></pre></td></tr></table></figure>
<h4 id="3-切换分支"><a href="#3-切换分支" class="headerlink" title="3. 切换分支"></a>3. 切换分支</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout newbranch</span><br></pre></td></tr></table></figure>
<h4 id="4-合并分支"><a href="#4-合并分支" class="headerlink" title="4. 合并分支"></a>4. 合并分支</h4><p>在当前分支执行:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge 另一个分支名称</span><br></pre></td></tr></table></figure>
<h4 id="5-删除分支"><a href="#5-删除分支" class="headerlink" title="5. 删除分支"></a>5. 删除分支</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -d newbranch       <span class="comment">#删除已经合并或提交的分支</span></span><br><span class="line">$ git branch -D newbranch2      <span class="comment">#强制删除分支</span></span><br></pre></td></tr></table></figure>
<h3 id="三、Git的提交"><a href="#三、Git的提交" class="headerlink" title="三、Git的提交"></a>三、Git的提交</h3><h4 id="1-指定远程仓库"><a href="#1-指定远程仓库" class="headerlink" title="1. 指定远程仓库"></a>1. 指定远程仓库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https://github......       </span><br></pre></td></tr></table></figure>
<h4 id="2-推送到远程端"><a href="#2-推送到远程端" class="headerlink" title="2. 推送到远程端"></a>2. 推送到远程端</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push --set-upstream origin master</span><br></pre></td></tr></table></figure>
<h4 id="3-下载更新远程端的项目"><a href="#3-下载更新远程端的项目" class="headerlink" title="3. 下载更新远程端的项目"></a>3. 下载更新远程端的项目</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>是基操啦</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Lazygit基操</title>
    <url>/posts/30301.html</url>
    <content><![CDATA[<h2 id="Lazygit-—-懒人必备的Git客户端"><a href="#Lazygit-—-懒人必备的Git客户端" class="headerlink" title="Lazygit — 懒人必备的Git客户端"></a>Lazygit — 懒人必备的Git客户端</h2><p>! ! ! (用 x 查看各个面板帮助)</p>
<h3 id="一、下载"><a href="#一、下载" class="headerlink" title="一、下载"></a>一、下载</h3><h4 id="1-Lazygit下载"><a href="#1-Lazygit下载" class="headerlink" title="1. Lazygit下载"></a>1. Lazygit下载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">下载地址：</span><br><span class="line">https://github.com/jesseduffield/lazygit</span><br></pre></td></tr></table></figure>
<h4 id="2-打开"><a href="#2-打开" class="headerlink" title="2. 打开"></a>2. 打开</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lazygit</span><br></pre></td></tr></table></figure>
<h3 id="二、-Stage-操作"><a href="#二、-Stage-操作" class="headerlink" title="二、 Stage 操作"></a>二、 Stage 操作</h3><h4 id="1-全部-stage-unstage-—-a"><a href="#1-全部-stage-unstage-—-a" class="headerlink" title="1. 全部 stage/unstage — a"></a>1. 全部 stage/unstage — a</h4><h4 id="相当于git-add"><a href="#相当于git-add" class="headerlink" title="(相当于git add .)"></a>(相当于git add .)</h4><p><img src="/posts/Jan-24-2021%2013-20-15.gif"></p>
<a id="more"></a>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084430.png"></p>
<h4 id="2-可以用空格逐个stage"><a href="#2-可以用空格逐个stage" class="headerlink" title="2. 可以用空格逐个stage"></a>2. 可以用空格逐个stage</h4><p><img src="/posts/Jan-24-2021%2013-23-31.gif"></p>
<h4 id="3-H和L键可以实现左侧面板间的切换"><a href="#3-H和L键可以实现左侧面板间的切换" class="headerlink" title="3. H和L键可以实现左侧面板间的切换"></a>3. H和L键可以实现左侧面板间的切换</h4><p><img src="/posts/Jan-26-2021%2020-30-36.gif"></p>
<h4 id="4-J和K键可以实现面板内文件的选择"><a href="#4-J和K键可以实现面板内文件的选择" class="headerlink" title="4. J和K键可以实现面板内文件的选择"></a>4. J和K键可以实现面板内文件的选择</h4><p><img src="/posts/Jan-26-2021%2020-36-31.gif"></p>
<h5 id="按回车可以进入到选中的文件（按esc可以退回到主面板）"><a href="#按回车可以进入到选中的文件（按esc可以退回到主面板）" class="headerlink" title="按回车可以进入到选中的文件（按esc可以退回到主面板）"></a>按回车可以进入到选中的文件（按esc可以退回到主面板）</h5><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084524.png"></p>
<h5 id="按Tab键可以切换Stage-Unstage面板"><a href="#按Tab键可以切换Stage-Unstage面板" class="headerlink" title="按Tab键可以切换Stage/Unstage面板"></a>按Tab键可以切换Stage/Unstage面板</h5><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084531.gif"></p>
<h5 id="按d可以彻底删除Unstage中的修改内容"><a href="#按d可以彻底删除Unstage中的修改内容" class="headerlink" title="按d可以彻底删除Unstage中的修改内容"></a>按d可以彻底删除Unstage中的修改内容</h5><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084542.png"></p>
<h3 id="三、-Branch-操作"><a href="#三、-Branch-操作" class="headerlink" title="三、 Branch 操作"></a>三、 Branch 操作</h3><h4 id="1-创建分支-—-n"><a href="#1-创建分支-—-n" class="headerlink" title="1. 创建分支 — n"></a>1. 创建分支 — n</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084616.png"></p>
<h4 id="2-选中分支-—-空格"><a href="#2-选中分支-—-空格" class="headerlink" title="2. 选中分支 — 空格"></a>2. 选中分支 — 空格</h4><h4 id="3-弱删除当前分支-—-d"><a href="#3-弱删除当前分支-—-d" class="headerlink" title="3. 弱删除当前分支 — d"></a>3. 弱删除当前分支 — d</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084635.png"><br>（强删除未保存的分支 — D）</p>
<h4 id="4-重命名当前分支-—-R"><a href="#4-重命名当前分支-—-R" class="headerlink" title="4. 重命名当前分支 — R"></a>4. 重命名当前分支 — R</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084650.png"></p>
<h4 id="5-选择分支合并到当前分支-—-M"><a href="#5-选择分支合并到当前分支-—-M" class="headerlink" title="5.选择分支合并到当前分支 — M"></a>5.选择分支合并到当前分支 — M</h4><ol>
<li>将光标选中子分支<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084704.png"></li>
<li>按M将子分支合并到当前分支<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084715.png"><h4 id="6-切换管理远程仓库-—"><a href="#6-切换管理远程仓库-—" class="headerlink" title="6. 切换管理远程仓库 — [ ]"></a>6. 切换管理远程仓库 — [ ]</h4><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084724.png"><h3 id="四、-Commit-操作"><a href="#四、-Commit-操作" class="headerlink" title="四、 Commit 操作"></a>四、 Commit 操作</h3>Commit 面板 :<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084735.png"></li>
</ol>
<h4 id="1-按c可以提交本次更改"><a href="#1-按c可以提交本次更改" class="headerlink" title="1. 按c可以提交本次更改"></a>1. 按c可以提交本次更改</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084755.png"></p>
<h4 id="2-提交回滚-—-空格"><a href="#2-提交回滚-—-空格" class="headerlink" title="2. 提交回滚 — 空格"></a>2. 提交回滚 — 空格</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084828.png"><br>lazygit回跳转到对应的提交，并新建一个新分支缓存，新建分支并合并即可保存。<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084841.png"></p>
<h4 id="3-重置提交-—-g"><a href="#3-重置提交-—-g" class="headerlink" title="3. 重置提交 — g"></a>3. 重置提交 — g</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084850.png"></p>
<h4 id="4-多分支间复制粘贴提交"><a href="#4-多分支间复制粘贴提交" class="headerlink" title="4. 多分支间复制粘贴提交"></a>4. 多分支间复制粘贴提交</h4><p>复制 — c<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084858.png"><br>粘贴 — v<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084904.png"></p>
<h4 id="5-批量操作commit-—-e"><a href="#5-批量操作commit-—-e" class="headerlink" title="5. 批量操作commit — e"></a>5. 批量操作commit — e</h4><ol>
<li><p>选中一个 commit 按 e 可以对上方几个commit进行批量管理<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084927.png"></p>
<table>
<thead>
<tr>
<th align="center">功能</th>
<th align="center">含义</th>
<th align="center">按键</th>
</tr>
</thead>
<tbody><tr>
<td align="center">pick</td>
<td align="center">无操作</td>
<td align="center">p</td>
</tr>
<tr>
<td align="center">drop</td>
<td align="center">删除</td>
<td align="center">d</td>
</tr>
<tr>
<td align="center">squash</td>
<td align="center">向下合并提交</td>
<td align="center">s</td>
</tr>
</tbody></table>
</li>
<li><p>按 m 执行操作<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084937.png"></p>
<h4 id="6-Reflog-面板（历史记录面板）"><a href="#6-Reflog-面板（历史记录面板）" class="headerlink" title="6. Reflog 面板（历史记录面板）"></a>6. Reflog 面板（历史记录面板）</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084946.png"><br>基本操作如下:<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Lazygit%E5%9F%BA%E6%93%8D/20210227084954.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>是基操啦</category>
      </categories>
      <tags>
        <tag>Lazygit</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo框架搭建个人博客</title>
    <url>/posts/23148.html</url>
    <content><![CDATA[<h2 id="Hexo框架搭建个人博客"><a href="#Hexo框架搭建个人博客" class="headerlink" title="Hexo框架搭建个人博客"></a>Hexo框架搭建个人博客</h2><h3 id="一、安装Hexo"><a href="#一、安装Hexo" class="headerlink" title="一、安装Hexo"></a>一、安装Hexo</h3><h4 id="使用cnpm切换到淘宝源安装"><a href="#使用cnpm切换到淘宝源安装" class="headerlink" title="使用cnpm切换到淘宝源安装"></a>使用cnpm切换到淘宝源安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">安装cnpm并切换到淘宝源:</span><br><span class="line">sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083441.png"></p>
<a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">用cnpm安装hexo:</span><br><span class="line">sudo cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083456.png"></p>
<h6 id="至此hexo安装完成"><a href="#至此hexo安装完成" class="headerlink" title="至此hexo安装完成"></a>至此hexo安装完成</h6><h3 id="二、Hexo框架的基本使用"><a href="#二、Hexo框架的基本使用" class="headerlink" title="二、Hexo框架的基本使用"></a>二、Hexo框架的基本使用</h3><h5 id="1-新建或打开项目文件夹"><a href="#1-新建或打开项目文件夹" class="headerlink" title="1. 新建或打开项目文件夹"></a>1. 新建或打开项目文件夹</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span></span><br><span class="line">$ mkdir blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br></pre></td></tr></table></figure>
<h5 id="2-初始化项目"><a href="#2-初始化项目" class="headerlink" title="2. 初始化项目"></a>2. 初始化项目</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo hexo init</span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083506.png"></p>
<h5 id="3-创建文章"><a href="#3-创建文章" class="headerlink" title="3. 创建文章"></a>3. 创建文章</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo hexo n <span class="string">&quot;文章名称&quot;</span>  <span class="comment">#其中的n表示new</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083516.png"></p>
<h5 id="4-启动博客-本地展示预览"><a href="#4-启动博客-本地展示预览" class="headerlink" title="4. 启动博客(本地展示预览)"></a>4. 启动博客(本地展示预览)</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s            <span class="comment">#其中的s表示server</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083527.png"></p>
<h6 id="可以打开浏览器进入-http-localhost-4000-进行预览"><a href="#可以打开浏览器进入-http-localhost-4000-进行预览" class="headerlink" title="可以打开浏览器进入 http://localhost:4000 进行预览"></a>可以打开浏览器进入 <a href="http://localhost:4000/">http://localhost:4000</a> 进行预览</h6><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083537.png"></p>
<h5 id="5-文章路径（位置）"><a href="#5-文章路径（位置）" class="headerlink" title="5. 文章路径（位置）"></a>5. 文章路径（位置）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ls ~/blog/<span class="built_in">source</span>/_posts/</span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083551.png"></p>
<h5 id="6-生成文章（generate）"><a href="#6-生成文章（generate）" class="headerlink" title="6. 生成文章（generate）"></a>6. 生成文章（generate）</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083600.png"></p>
<h5 id="7-清理缓存"><a href="#7-清理缓存" class="headerlink" title="7. 清理缓存"></a>7. 清理缓存</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/blog</span><br><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083611.png"></p>
<h3 id="三、Hexo的一些插件"><a href="#三、Hexo的一些插件" class="headerlink" title="三、Hexo的一些插件"></a>三、Hexo的一些插件</h3><h4 id="插入图片插件"><a href="#插入图片插件" class="headerlink" title="插入图片插件"></a>插入图片插件</h4><h5 id="1-安装插件，在hexo根目录打开Git-Bash-执行"><a href="#1-安装插件，在hexo根目录打开Git-Bash-执行" class="headerlink" title="1.安装插件，在hexo根目录打开Git Bash,执行"></a>1.安装插件，在hexo根目录打开Git Bash,执行</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<h5 id="2-打开hexo的配置文件-config-yml找到-post-asset-folder，把这个选项从false改成true"><a href="#2-打开hexo的配置文件-config-yml找到-post-asset-folder，把这个选项从false改成true" class="headerlink" title="2. 打开hexo的配置文件_config.yml找到 post_asset_folder，把这个选项从false改成true"></a>2. 打开hexo的配置文件_config.yml找到 post_asset_folder，把这个选项从false改成true</h5><h5 id="3-打开"><a href="#3-打开" class="headerlink" title="3.打开"></a>3.打开</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/node_modules/hexo-asset-image/index.js</span><br></pre></td></tr></table></figure>
<p>将内容更换为下面的代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">var cheerio = require(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><br><span class="line"><span class="keyword">function</span> getPosition(str, m, i) &#123;</span><br><span class="line">  <span class="built_in">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var version = String(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="keyword">function</span>(data)&#123;</span><br><span class="line">  var config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        var link = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; 0 &amp;&amp; Number(version[0]) == 3)</span><br><span class="line">       var beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, 1) + 1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       var beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, 3) + 1;</span><br><span class="line">    // In hexo 3.1.1, the permalink of <span class="string">&quot;about&quot;</span> page is like <span class="string">&quot;.../about/index.html&quot;</span>.</span><br><span class="line">    var endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + 1;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    var toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(var i = 0; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      var key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      var $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(this).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            // For windows style path, we replace <span class="string">&#x27;\&#x27;</span> to <span class="string">&#x27;/&#x27;</span>.</span><br><span class="line">            var src = $(this).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!/http[s]*.*|\/\/.*/.<span class="built_in">test</span>(src) &amp;&amp;</span><br><span class="line">               !/^\s*\//.<span class="built_in">test</span>(src)) &#123;</span><br><span class="line">              // For <span class="string">&quot;about&quot;</span> page, the first part of <span class="string">&quot;src&quot;</span> can<span class="string">&#x27;t be removed.</span></span><br><span class="line"><span class="string">              // In addition, to support multi-level local directory.</span></span><br><span class="line"><span class="string">              var linkArray = link.split(&#x27;</span>/<span class="string">&#x27;).filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">                return elem != &#x27;</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">              &#125;);</span></span><br><span class="line"><span class="string">              var srcArray = src.split(&#x27;</span>/<span class="string">&#x27;).filter(function(elem)&#123;</span></span><br><span class="line"><span class="string">                return elem != &#x27;</span><span class="string">&#x27; &amp;&amp; elem != &#x27;</span>.<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">              &#125;);</span></span><br><span class="line"><span class="string">              if(srcArray.length &gt; 1)</span></span><br><span class="line"><span class="string">                srcArray.shift();</span></span><br><span class="line"><span class="string">              src = srcArray.join(&#x27;</span>/<span class="string">&#x27;);</span></span><br><span class="line"><span class="string">              $(this).attr(&#x27;</span>src<span class="string">&#x27;, config.root + link + src);</span></span><br><span class="line"><span class="string">              console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;else&#123;</span></span><br><span class="line"><span class="string">            console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);</span></span><br><span class="line"><span class="string">            console.info&amp;&amp;console.info($(this));</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;);</span></span><br><span class="line"><span class="string">      data[key] = $.html();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br></pre></td></tr></table></figure>
<h5 id="4-现在就可以插入图片了，比如hexo-new-post-photo之后就在source-posts生成photo-md文件和photo文件夹，我们把要插入的图片复制到photo文件夹内就好了。"><a href="#4-现在就可以插入图片了，比如hexo-new-post-photo之后就在source-posts生成photo-md文件和photo文件夹，我们把要插入的图片复制到photo文件夹内就好了。" class="headerlink" title="4.现在就可以插入图片了，比如hexo new post photo之后就在source/_posts生成photo.md文件和photo文件夹，我们把要插入的图片复制到photo文件夹内就好了。"></a>4.现在就可以插入图片了，比如hexo new post photo之后就在source/_posts生成photo.md文件和photo文件夹，我们把要插入的图片复制到photo文件夹内就好了。</h5><h4 id="Hexo下Git代码提交插件-–-hexo-deployer-git"><a href="#Hexo下Git代码提交插件-–-hexo-deployer-git" class="headerlink" title="Hexo下Git代码提交插件 – hexo-deployer-git"></a>Hexo下Git代码提交插件 – hexo-deployer-git</h4><ol>
<li>输入以下命令安装插件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>
<li>修改配置：_config.yml<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: &lt;repository url&gt; <span class="comment">#仓库地址</span></span><br><span class="line">  branch: [branch]       <span class="comment">#分支</span></span><br><span class="line">  message: [message]     <span class="comment">#描述</span></span><br></pre></td></tr></table></figure>
<img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083633.png"></li>
<li>生成站点文件并推送至远程库。执行 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure></li>
<li>登入 Github/BitBucket/Gitlab，请在库设置（Repository Settings）中将默认分支设置为_config.yml配置中的分支名称。稍等片刻，您的站点就会显示在您的Github Pages中。<h5 id="这一切是如何发生的？"><a href="#这一切是如何发生的？" class="headerlink" title="这一切是如何发生的？"></a>这一切是如何发生的？</h5>当执行 hexo deploy 时，Hexo 会将 public 目录中的文件和目录推送至 _config.yml 中指定的远端仓库和分支中，并且完全覆盖该分支下的已有内容。<h4 id="Hexo主题安装"><a href="#Hexo主题安装" class="headerlink" title="Hexo主题安装"></a>Hexo主题安装</h4></li>
<li>进入博客所在的文件夹<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> myblog  <span class="comment">#我的博客项目名称为myblog</span></span><br></pre></td></tr></table></figure></li>
<li>从我的gitee仓库中下载主题(gitee快)<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://gitee.com/Haikez/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083647.png"></li>
<li>将blog目录下_config.yml里theme的名称由landscape修改为next<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083657.png"></li>
<li>清除hexo缓存使用命令：hexo clear，生成项目文件命令:hexo g,验证主题是否正确启用，命令为：hexo s –debug<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/20210227083706.png"><h5 id="大功告成！！！"><a href="#大功告成！！！" class="headerlink" title="大功告成！！！"></a>大功告成！！！</h5></li>
</ol>
]]></content>
      <categories>
        <category>搭建个人博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>通过钓鱼网页获取GPS定位 --Seeker</title>
    <url>/posts/64792.html</url>
    <content><![CDATA[<h1 id="通过钓鱼网页获取GPS定位-–Seeker"><a href="#通过钓鱼网页获取GPS定位-–Seeker" class="headerlink" title="通过钓鱼网页获取GPS定位 –Seeker"></a>通过钓鱼网页获取GPS定位 –Seeker</h1><h5 id="在互联网的世界里，最不缺少的就是信息，最容易获取的也是信息，在这个信息交互的时代里，你真能独善其身？没错，你的安全只是相对的，而漏洞的存在则是绝对的！！！"><a href="#在互联网的世界里，最不缺少的就是信息，最容易获取的也是信息，在这个信息交互的时代里，你真能独善其身？没错，你的安全只是相对的，而漏洞的存在则是绝对的！！！" class="headerlink" title="在互联网的世界里，最不缺少的就是信息，最容易获取的也是信息，在这个信息交互的时代里，你真能独善其身？没错，你的安全只是相对的，而漏洞的存在则是绝对的！！！"></a>在互联网的世界里，最不缺少的就是信息，最容易获取的也是信息，在这个信息交互的时代里，你真能独善其身？没错，你的安全只是相对的，而漏洞的存在则是绝对的！！！</h5><h3 id="Seeker-–-WEB嗅探器"><a href="#Seeker-–-WEB嗅探器" class="headerlink" title="Seeker – WEB嗅探器"></a>Seeker – WEB嗅探器</h3><p><img src="https://camo.githubusercontent.com/dd9d27c5b2f6fa423e80a12a71504ae87b299a7fad435352f96a9e96815fd0ea/68747470733a2f2f692e696d6775722e636f6d2f444970754e54492e6a7067"><br><strong>它可以帮你获取来访者的GPS位置信息</strong> </p>
<a id="more"></a>

<h3 id="本文章记录一个钓鱼网站的搭建和测试，旨在让大家明白当我们浏览网页时你个人信息的一些流向。从而提高大家网络安全意识，让坏人没有可乘之机。科学技术是把双刃剑，因此，在个人技术得到提高后请善待他人，永远不要突破道德的底线！！！-下面让我们进入正题。"><a href="#本文章记录一个钓鱼网站的搭建和测试，旨在让大家明白当我们浏览网页时你个人信息的一些流向。从而提高大家网络安全意识，让坏人没有可乘之机。科学技术是把双刃剑，因此，在个人技术得到提高后请善待他人，永远不要突破道德的底线！！！-下面让我们进入正题。" class="headerlink" title="本文章记录一个钓鱼网站的搭建和测试，旨在让大家明白当我们浏览网页时你个人信息的一些流向。从而提高大家网络安全意识，让坏人没有可乘之机。科学技术是把双刃剑，因此，在个人技术得到提高后请善待他人，永远不要突破道德的底线！！！ 下面让我们进入正题。"></a>本文章记录一个钓鱼网站的搭建和测试，旨在让大家明白当我们浏览网页时你个人信息的一些流向。从而提高大家网络安全意识，让坏人没有可乘之机。科学技术是把双刃剑，因此，在个人技术得到提高后请善待他人，永远不要突破道德的底线！！！ 下面让我们进入正题。</h3><h3 id="大体思路："><a href="#大体思路：" class="headerlink" title="大体思路："></a>大体思路：</h3><h4 id="通过Seeker在本机架设Web服务项目，然后用Ngrok开辟外网访问隧道（内网穿透），当外网访问时，Seeker即可探测到访问者的一些信息。"><a href="#通过Seeker在本机架设Web服务项目，然后用Ngrok开辟外网访问隧道（内网穿透），当外网访问时，Seeker即可探测到访问者的一些信息。" class="headerlink" title="通过Seeker在本机架设Web服务项目，然后用Ngrok开辟外网访问隧道（内网穿透），当外网访问时，Seeker即可探测到访问者的一些信息。"></a>通过Seeker在本机架设Web服务项目，然后用Ngrok开辟外网访问隧道（内网穿透），当外网访问时，Seeker即可探测到访问者的一些信息。</h4><h3 id="一、Seeker的安装"><a href="#一、Seeker的安装" class="headerlink" title="一、Seeker的安装"></a>一、Seeker的安装</h3><p><strong>项目地址:</strong><br><a href="https://github.com/thewhiteh4t/seeker.git">https://github.com/thewhiteh4t/seeker.git</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开命令行输入</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/thewhiteh4t/seeker.git</span><br><span class="line">$ <span class="built_in">cd</span> seeker/</span><br><span class="line">$ apt update</span><br><span class="line">$ apt install python3 python3-pip php</span><br><span class="line">$ pip3 install requests</span><br><span class="line">$ chmod +x install.sh</span><br></pre></td></tr></table></figure>
<h3 id="二、下载安装Ngrok"><a href="#二、下载安装Ngrok" class="headerlink" title="二、下载安装Ngrok"></a>二、下载安装Ngrok</h3><h4 id="1-注册Ngrok账号"><a href="#1-注册Ngrok账号" class="headerlink" title="1. 注册Ngrok账号"></a>1. 注册Ngrok账号</h4><p><strong>网站地址</strong><br><a href="https://ngrok.com/">https://ngrok.com/</a></p>
<h4 id="2-根据电脑型号下载对应的安装包"><a href="#2-根据电脑型号下载对应的安装包" class="headerlink" title="2. 根据电脑型号下载对应的安装包"></a>2. 根据电脑型号下载对应的安装包</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082037.png"><br><strong>解压下载好的安装包</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ unzip /path/to/ngrok.zip</span><br></pre></td></tr></table></figure>
<h4 id="3-配置Ngrok"><a href="#3-配置Ngrok" class="headerlink" title="3. 配置Ngrok"></a>3. 配置Ngrok</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082056.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打开终端输入</span></span><br><span class="line">./ngrok authtoken + 秘钥</span><br></pre></td></tr></table></figure>
<h3 id="三、开始搭建"><a href="#三、开始搭建" class="headerlink" title="三、开始搭建"></a>三、开始搭建</h3><h4 id="1-cd打开到Seeker项目下启动Seeker"><a href="#1-cd打开到Seeker项目下启动Seeker" class="headerlink" title="1. cd打开到Seeker项目下启动Seeker"></a>1. cd打开到Seeker项目下启动Seeker</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> seeker/</span><br><span class="line">$ python3 seeker.py -t manual <span class="comment">#启动项目</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082108.png"></p>
<h4 id="2-输入1选中Google-Drive"><a href="#2-输入1选中Google-Drive" class="headerlink" title="2. 输入1选中Google Drive"></a>2. 输入1选中Google Drive</h4><p><strong>回车后输入任意一个URL</strong><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082117.png"><br><strong>至此Seeker启动完成</strong><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082131.png"></p>
<h4 id="3-启动Ngrok"><a href="#3-启动Ngrok" class="headerlink" title="3. 启动Ngrok"></a>3. 启动Ngrok</h4><p><strong>cd打开到Ngrok项目下启动ngrok</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ngrok http 8080 <span class="comment">#端口号要与Seeker监听的端口号一致</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082143.png"><br>红色框框内随机生成的链接就是钓鱼链接，可将它发给目标用户访问。</p>
<h3 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h3><h4 id="1-打开钓鱼链接"><a href="#1-打开钓鱼链接" class="headerlink" title="1. 打开钓鱼链接"></a>1. 打开钓鱼链接</h4><p><strong>ngrok页面内的HTTP Requests会有响应</strong><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082152.png"><br><strong>此时客户端的页面如下</strong><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082203.PNG"><br><strong>当用户点击<code>Request access</code>时会弹出</strong><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082227.PNG"><br><strong>此时如果点击允许位置信息就会暴露</strong><br><strong>此时Seeker端的画面为</strong><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E9%80%9A%E8%BF%87%E9%92%93%E9%B1%BC%E7%BD%91%E9%A1%B5%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%80%85GPS%E5%AE%9A%E4%BD%8D/20210227082217.png"><br>图中红框部分为目标经纬度</p>
<h3 id="五、最后贴上Seeker原项目说明，不懂的地方可以查。"><a href="#五、最后贴上Seeker原项目说明，不懂的地方可以查。" class="headerlink" title="五、最后贴上Seeker原项目说明，不懂的地方可以查。"></a>五、最后贴上Seeker原项目说明，不懂的地方可以查。</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">python3 seeker.py -h</span><br><span class="line"></span><br><span class="line">usage: seeker.py [-h] [-s SUBDOMAIN]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -k KML, --kml         Provide KML Filename ( Optional )</span><br><span class="line">  -p PORT, --port       Port for Web Server [ Default : 8080 ]</span><br><span class="line">  -t TUNNEL, --tunnel   Specify Tunnel Mode [ Available : manual ]</span><br><span class="line"></span><br><span class="line"><span class="section">##################</span></span><br><span class="line"><span class="section"># Usage Examples #</span></span><br><span class="line"><span class="section">##################</span></span><br><span class="line"></span><br><span class="line"><span class="section"># Step 1 : In first terminal</span></span><br><span class="line">$ python3 seeker.py -t manual</span><br><span class="line"></span><br><span class="line"><span class="section"># Step 2 : In second terminal start a tunnel service such as ngrok</span></span><br><span class="line">$ ./ngrok http 8080</span><br><span class="line"></span><br><span class="line"><span class="section">###########</span></span><br><span class="line"><span class="section"># Options #</span></span><br><span class="line"><span class="section">###########</span></span><br><span class="line"></span><br><span class="line"><span class="section"># Ouput KML File for Google Earth</span></span><br><span class="line">$ python3 seeker.py -t manual -k <span class="xml"><span class="tag">&lt;<span class="name">filename</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="section"># Use Custom Port</span></span><br><span class="line">$ python3 seeker.py -t manual -p 1337</span><br><span class="line">$ ./ngrok http 1337</span><br><span class="line"></span><br><span class="line"><span class="section">################</span></span><br><span class="line"><span class="section"># Docker Usage #</span></span><br><span class="line"><span class="section">################</span></span><br><span class="line"></span><br><span class="line"><span class="section"># Step 1</span></span><br><span class="line">$ docker network create ngroknet</span><br><span class="line"></span><br><span class="line"><span class="section"># Step 2</span></span><br><span class="line">$ docker run --rm -it --net ngroknet --name seeker thewhiteh4t/seeker python3 seeker.py -t manual</span><br><span class="line"></span><br><span class="line"><span class="section"># Step 3</span></span><br><span class="line">$ docker run --rm -it --net ngroknet --name ngrok wernight/ngrok ngrok http seeker:8080</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux学习</category>
      </categories>
      <tags>
        <tag>Seeker嗅探定位</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo+Github白嫖图床</title>
    <url>/posts/2118.html</url>
    <content><![CDATA[<h1 id="PicGo-Github白嫖图床"><a href="#PicGo-Github白嫖图床" class="headerlink" title="PicGo+Github白嫖图床"></a>PicGo+Github白嫖图床</h1><h3 id="一、简介："><a href="#一、简介：" class="headerlink" title="一、简介："></a>一、简介：</h3><h4 id="图床就是个人云图库，我们可以把照片放到图床里，图床就会为照片生成超链接，我们通过浏览器就能访问到里面的照片，非常方便！所以图床几乎成了各大博主开发个人博客的必备工具。但这样的云服务几乎都是收费的。然而Github这个开源的云仓库为免费图床的搭建提供了平台。"><a href="#图床就是个人云图库，我们可以把照片放到图床里，图床就会为照片生成超链接，我们通过浏览器就能访问到里面的照片，非常方便！所以图床几乎成了各大博主开发个人博客的必备工具。但这样的云服务几乎都是收费的。然而Github这个开源的云仓库为免费图床的搭建提供了平台。" class="headerlink" title="图床就是个人云图库，我们可以把照片放到图床里，图床就会为照片生成超链接，我们通过浏览器就能访问到里面的照片，非常方便！所以图床几乎成了各大博主开发个人博客的必备工具。但这样的云服务几乎都是收费的。然而Github这个开源的云仓库为免费图床的搭建提供了平台。"></a>图床就是个人云图库，我们可以把照片放到图床里，图床就会为照片生成超链接，我们通过浏览器就能访问到里面的照片，非常方便！所以图床几乎成了各大博主开发个人博客的必备工具。但这样的云服务几乎都是收费的。然而Github这个开源的云仓库为免费图床的搭建提供了平台。</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085305.jpg"></p>
<a id="more"></a>
<h3 id="二、Github图床的搭建"><a href="#二、Github图床的搭建" class="headerlink" title="二、Github图床的搭建"></a>二、Github图床的搭建</h3><h4 id="大体思路："><a href="#大体思路：" class="headerlink" title="大体思路："></a>大体思路：</h4><h5 id="新建一个Github仓库当做图床的上传空间，创建一个github的token-私人领牌-用于PicGo登录设置。解决github访问异常的问题。"><a href="#新建一个Github仓库当做图床的上传空间，创建一个github的token-私人领牌-用于PicGo登录设置。解决github访问异常的问题。" class="headerlink" title="新建一个Github仓库当做图床的上传空间，创建一个github的token(私人领牌)用于PicGo登录设置。解决github访问异常的问题。"></a>新建一个Github仓库当做图床的上传空间，创建一个github的token(私人领牌)用于PicGo登录设置。解决github访问异常的问题。</h5><h4 id="1-新建一个github仓库"><a href="#1-新建一个github仓库" class="headerlink" title="1. 新建一个github仓库"></a>1. 新建一个github仓库</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085319.png"></p>
<h4 id="2-创建私人令牌"><a href="#2-创建私人令牌" class="headerlink" title="2. 创建私人令牌"></a>2. 创建私人令牌</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085337.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085346.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085354.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085404.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085413.png"></p>
<h4 id="3-复制创建好的私人令牌"><a href="#3-复制创建好的私人令牌" class="headerlink" title="3. 复制创建好的私人令牌"></a>3. 复制创建好的私人令牌</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085421.png"></p>
<h4 id="4-下载并安装PicGo"><a href="#4-下载并安装PicGo" class="headerlink" title="4. 下载并安装PicGo"></a>4. 下载并安装PicGo</h4><h4 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a><a href="https://picgo.github.io/PicGo-Doc/zh/guide/">PicGo</a></h4><h4 id="5-配置PicGo"><a href="#5-配置PicGo" class="headerlink" title="5. 配置PicGo"></a>5. 配置PicGo</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085430.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085437.png"></p>
<h4 id="6-配置完成"><a href="#6-配置完成" class="headerlink" title="6. 配置完成"></a>6. 配置完成</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085448.gif"></p>
<h4 id="7-解决raw-githubusercontent-com访问不了的问题"><a href="#7-解决raw-githubusercontent-com访问不了的问题" class="headerlink" title="7. 解决raw.githubusercontent.com访问不了的问题"></a>7. 解决<code>raw.githubusercontent.com</code>访问不了的问题</h4><ul>
<li>打开<br><a href="https://site.ip138.com/raw.Githubusercontent.com/">https://site.ip138.com/raw.Githubusercontent.com/</a></li>
<li>输入<code>raw.githubusercontent.com</code></li>
<li>查询IP地址</li>
</ul>
<p>修改hosts Ubuntu，CentOS及macOS直接在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure>
<p>在最后一行加入:<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085510.png"><br>保存退出并重启</p>
<h3 id="三、-Gitee图床的搭建"><a href="#三、-Gitee图床的搭建" class="headerlink" title="三、 Gitee图床的搭建"></a>三、 Gitee图床的搭建</h3><h4 id="Gitee也可以搭建图床，搭建步骤和Github雷同。并相比于Github，Gitee速度更快并且没有类似github被墙的问题。因此本人更青睐于使用Gitee图床。"><a href="#Gitee也可以搭建图床，搭建步骤和Github雷同。并相比于Github，Gitee速度更快并且没有类似github被墙的问题。因此本人更青睐于使用Gitee图床。" class="headerlink" title="Gitee也可以搭建图床，搭建步骤和Github雷同。并相比于Github，Gitee速度更快并且没有类似github被墙的问题。因此本人更青睐于使用Gitee图床。"></a>Gitee也可以搭建图床，搭建步骤和Github雷同。并相比于Github，Gitee速度更快并且没有类似github被墙的问题。因此本人更青睐于使用Gitee图床。</h4><h4 id="1-创建Gitee仓库"><a href="#1-创建Gitee仓库" class="headerlink" title="1. 创建Gitee仓库"></a>1. 创建Gitee仓库</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085519.png"></p>
<h4 id="2-创建Gitee私人令牌"><a href="#2-创建Gitee私人令牌" class="headerlink" title="2. 创建Gitee私人令牌"></a>2. 创建Gitee私人令牌</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085534.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085604.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085612.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085612.png"></p>
<h4 id="3-配置PicGo"><a href="#3-配置PicGo" class="headerlink" title="3. 配置PicGo"></a>3. 配置PicGo</h4><ul>
<li>安装插件<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085628.png"></li>
<li>配置<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/PicGo-Github%E7%99%BD%E5%AB%96%E5%9B%BE%E5%BA%8A/20210227085635.png"></li>
</ul>
]]></content>
      <categories>
        <category>搭建个人博客</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>iTerm2美化配置</title>
    <url>/posts/11083.html</url>
    <content><![CDATA[<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/iTerm2%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE/20210827193307.png"></p>
<h1 id="iTerm2配置和美化"><a href="#iTerm2配置和美化" class="headerlink" title="iTerm2配置和美化"></a>iTerm2配置和美化</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近日换了新电脑，软件和环境需要重新配置，就关于iTerm2的配置和美化整理一份文章出来，方便自己之后的工作。</p>
<a id="more"></a>
<h2 id="一、安装iTerm2"><a href="#一、安装iTerm2" class="headerlink" title="一、安装iTerm2"></a>一、安装iTerm2</h2><p>首先，下载iTerm2来替换默认终端。</p>
<p><a href="https://iterm2.com/">https://iterm2.com/</a></p>
<h3 id="什么是iTerm2"><a href="#什么是iTerm2" class="headerlink" title="什么是iTerm2?"></a>什么是iTerm2?</h3><blockquote>
<p>iTerm2 is a replacement for Terminal and the successor to iTerm. It works on Macs with macOS 10.12 or newer. iTerm2 brings the terminal into the modern age with features you never knew you always wanted.</p>
</blockquote>
<p>iTerm2是默认终端的替代品，也是目前Mac系统下最好用的 <strong>终端工具</strong> ，集颜值和效率于一身。</p>
<h3 id="配置iTerm2主题配色"><a href="#配置iTerm2主题配色" class="headerlink" title="配置iTerm2主题配色"></a>配置iTerm2主题配色</h3><p>由于我已经配置好了iTerm2的配置文件，所以只需要在iTerm2中导入配置文件即可。<br>下载所需要的配置文件: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Haikez/iTerm2Config.git</span><br></pre></td></tr></table></figure>
<p>然后在新电脑中导入:<br>如下图 import JSON Profiles，然后设置为默认配置。<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/iTerm2%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE/20210827201339.png"></p>
<h2 id="二、安装brew包管理器"><a href="#二、安装brew包管理器" class="headerlink" title="二、安装brew包管理器"></a>二、安装brew包管理器</h2><h3 id="HomeBrew简介"><a href="#HomeBrew简介" class="headerlink" title="HomeBrew简介"></a>HomeBrew简介</h3><blockquote>
<p>我们在使用Linux系统的时候，都很喜欢 (Debian/Ubuntu)系列的apt包管理系统和(Redhat/Fedora)系列的yum包管理系统。Mac OS X系统下面有apple的官方Mac App Store。但是好多软件是找不到的，所以我们也向在苹果下找到一款比较方便的包管理系统，就是Homebrew。<br>什么是Homebrew呢？Homebrew is the easiest and most flexible way to install the UNIX tools Apple didn’t include with OS X. 官方的解释非常明了，Homebrew是一个包管理器，用于在Mac上安装一些OS X没有的UNIX工具（比如著名的wget），能在Mac中方便的安装软件或者卸载软件，可以说Homebrew就是mac下的apt-get、yum神器。</p>
</blockquote>
<h3 id="安装HomeBrew"><a href="#安装HomeBrew" class="headerlink" title="安装HomeBrew"></a>安装HomeBrew</h3><p>终端输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/Haikez/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>
<h3 id="安装zsh（Mac下应该自带）"><a href="#安装zsh（Mac下应该自带）" class="headerlink" title="安装zsh（Mac下应该自带）"></a>安装zsh（Mac下应该自带）</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install zsh</span><br></pre></td></tr></table></figure>
<h2 id="三、设置Oh-My-Zsh"><a href="#三、设置Oh-My-Zsh" class="headerlink" title="三、设置Oh-My-Zsh"></a>三、设置Oh-My-Zsh</h2><h3 id="什么是Oh-My-Zsh？"><a href="#什么是Oh-My-Zsh？" class="headerlink" title="什么是Oh-My-Zsh？"></a>什么是Oh-My-Zsh？</h3><blockquote>
<p>Oh My Zsh是一款社区驱动的命令行工具，它基于zsh命令行，提供了主题配置，插件机制，大大提高了可玩（用）性。提升使用效率还能使人愉快hhh<br>Oh My Zsh is a delightful, open source, community-driven framework for managing your Zsh configuration. It comes bundled with thousands of helpful functions, helpers, plugins, themes, and a few things that make you shout…</p>
</blockquote>
<p>网站：<a href="https://ohmyz.sh/">https://ohmyz.sh/</a></p>
<h3 id="安装Oh-My-Zsh"><a href="#安装Oh-My-Zsh" class="headerlink" title="安装Oh-My-Zsh"></a>安装Oh-My-Zsh</h3><p>使用国内源安装，在终端下输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.使用 curl 安装</span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/pocmon/ohmyzsh/raw/master/tools/install.sh)</span>&quot;</span></span><br><span class="line"></span><br><span class="line">2.使用 wget 安装</span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(wget -O- https://gitee.com/pocmon/ohmyzsh/raw/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置Oh-My-Zsh的一些常用的插件"><a href="#配置Oh-My-Zsh的一些常用的插件" class="headerlink" title="配置Oh-My-Zsh的一些常用的插件"></a>配置Oh-My-Zsh的一些常用的插件</h3><p>将下载的配置文件夹中的 <strong>.zshrc</strong> 移动到宿主目录 <strong>~</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mv ~/.zshrc .zshrc_bak &amp;&amp; mv iTerm2Config/.zshrc .</span><br></pre></td></tr></table></figure>
<h4 id="1、安装命令自动补全插件"><a href="#1、安装命令自动补全插件" class="headerlink" title="1、安装命令自动补全插件"></a>1、安装命令自动补全插件</h4><p>克隆项目到本地 <strong>$ZSH_CUSTOM/plugins</strong>  路径下默认是 <strong>~/.oh-my-zsh/custom/plugins</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>
<h4 id="2、配置语法高亮显示"><a href="#2、配置语法高亮显示" class="headerlink" title="2、配置语法高亮显示"></a>2、配置语法高亮显示</h4><blockquote>
<p>项目地址：<br><a href="https://github.com/zsh-users/zsh-syntax-highlighting">https://github.com/zsh-users/zsh-syntax-highlighting</a></p>
</blockquote>
<p>安装方法：</p>
<p>推荐使用HomeBrew进行安装：<br>brew安装:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>
<h3 id="3、配置autojump"><a href="#3、配置autojump" class="headerlink" title="3、配置autojump"></a>3、配置autojump</h3><blockquote>
<p>效果：<br>实现目录间快速跳转，想去哪个目录直接 j + 目录名(甚至不用输全)，不用在频繁的 cd了<br>项目地址：<a href="https://github.com/wting/autojump">https://github.com/wting/autojump</a></p>
</blockquote>
<p>安装方法：<br>brew安装:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install autojump</span><br></pre></td></tr></table></figure>
<h2 id="安装Nerdfont字体"><a href="#安装Nerdfont字体" class="headerlink" title="安装Nerdfont字体"></a>安装Nerdfont字体</h2><h3 id="1-直接到官网中下载字体"><a href="#1-直接到官网中下载字体" class="headerlink" title="1. 直接到官网中下载字体"></a>1. 直接到官网中下载字体</h3><p>官网:<br><a href="https://www.nerdfonts.com/">https://www.nerdfonts.com/</a></p>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/iTerm2%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE/20210827205743.png"></p>
<h3 id="2-使用Mac自带的字体册将字体添加到系统中"><a href="#2-使用Mac自带的字体册将字体添加到系统中" class="headerlink" title="2. 使用Mac自带的字体册将字体添加到系统中"></a>2. 使用Mac自带的字体册将字体添加到系统中</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/iTerm2%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE/20210827210003.png"></p>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/iTerm2%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE/20210827212112.png"></p>
<h2 id="安装Oh-My-Zsh主题"><a href="#安装Oh-My-Zsh主题" class="headerlink" title="安装Oh-My-Zsh主题"></a>安装Oh-My-Zsh主题</h2><h3 id="1-安装-P10k主题"><a href="#1-安装-P10k主题" class="headerlink" title="1.安装 P10k主题"></a>1.安装 P10k主题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone --depth=1 https://github.com/romkatv/powerlevel10k.git $&#123;ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom&#125;/themes/powerlevel10k</span><br></pre></td></tr></table></figure>
<p>Gitee 镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://gitee.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-<span class="variable">$HOME</span>/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br></pre></td></tr></table></figure>
<h3 id="2-在-zshrc-中设置-ZSH-THEME"><a href="#2-在-zshrc-中设置-ZSH-THEME" class="headerlink" title="2.在　~/.zshrc 中设置 ZSH_THEME"></a>2.在　~/.zshrc 中设置 ZSH_THEME</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">&quot;powerlevel10k/powerlevel10k&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-重启命令行"><a href="#3-重启命令行" class="headerlink" title="3.重启命令行"></a>3.重启命令行</h3><h3 id="4-设置-P10k"><a href="#4-设置-P10k" class="headerlink" title="4.设置 P10k"></a>4.设置 P10k</h3><p>手动设置:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">p10k configure</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>iTerm2</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派系统安装和基本配置</title>
    <url>/posts/52852.html</url>
    <content><![CDATA[<h1 id="树莓派系统安装、"><a href="#树莓派系统安装、" class="headerlink" title="树莓派系统安装、"></a>树莓派系统安装、</h1><h3 id="需要的工具："><a href="#需要的工具：" class="headerlink" title="需要的工具："></a>需要的工具：</h3><ol>
<li>树莓派一个</li>
<li>8G以上SD卡一张</li>
<li>读卡器</li>
<li>电脑<h3 id="1-树莓派系统下载"><a href="#1-树莓派系统下载" class="headerlink" title="1. 树莓派系统下载:"></a>1. 树莓派系统下载:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">系统下载地址:https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;raspberry-pi-os-images&#x2F;raspios_armhf&#x2F;images&#x2F;raspios_armhf-2020-12-04&#x2F;2020-12-02-raspios-buster-armhf.zip</span><br></pre></td></tr></table></figure>
<img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/20210227081725.png"><a id="more"></a>

</li>
</ol>
<h3 id="2-烧录树莓派系统"><a href="#2-烧录树莓派系统" class="headerlink" title="2. 烧录树莓派系统"></a>2. 烧录树莓派系统</h3><h4 id="需要的软件"><a href="#需要的软件" class="headerlink" title="需要的软件:"></a>需要的软件:</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/20210227081637.png"></p>
<h4 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址:"></a>下载地址:</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>www.balena.io<span class="regexp">/etcher/</span></span><br></pre></td></tr></table></figure>
<h4 id="烧录镜像"><a href="#烧录镜像" class="headerlink" title="烧录镜像:"></a>烧录镜像:</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/20210227081652.png"></p>
<h4 id="烧录完成后重新插拔读卡器"><a href="#烧录完成后重新插拔读卡器" class="headerlink" title="烧录完成后重新插拔读卡器"></a>烧录完成后重新插拔读卡器</h4><h3 id="3-开启ssh服务"><a href="#3-开启ssh服务" class="headerlink" title="3. 开启ssh服务"></a>3. 开启ssh服务</h3><h4 id="新建文件名为ssh的文件。"><a href="#新建文件名为ssh的文件。" class="headerlink" title="新建文件名为ssh的文件。"></a>新建文件名为ssh的文件。</h4><h4 id="将ssh文件拖入SD卡的boot分区。"><a href="#将ssh文件拖入SD卡的boot分区。" class="headerlink" title="将ssh文件拖入SD卡的boot分区。"></a>将ssh文件拖入SD卡的boot分区。</h4><h3 id="4-使树莓派开机自动连接Wi-Fi"><a href="#4-使树莓派开机自动连接Wi-Fi" class="headerlink" title="4. 使树莓派开机自动连接Wi-Fi"></a>4. 使树莓派开机自动连接Wi-Fi</h3><h4 id="新建名为wpa-supplicant-conf的文件。"><a href="#新建名为wpa-supplicant-conf的文件。" class="headerlink" title="新建名为wpa_supplicant.conf的文件。"></a>新建名为wpa_supplicant.conf的文件。</h4><h4 id="编辑文件内容为"><a href="#编辑文件内容为" class="headerlink" title="编辑文件内容为"></a>编辑文件内容为</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/20210227081703.png"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</span><br><span class="line">update_config=1</span><br><span class="line">country=CN</span><br><span class="line"> </span><br><span class="line">network=&#123;</span><br><span class="line">	ssid=&quot;矗的板砖&quot;    #WiFi账号</span><br><span class="line">	psk=&quot;11111111&quot;   #WiFi密码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="将文件wpa-supplicant-conf拖入SD卡的boot分区。"><a href="#将文件wpa-supplicant-conf拖入SD卡的boot分区。" class="headerlink" title="将文件wpa_supplicant.conf拖入SD卡的boot分区。"></a>将文件wpa_supplicant.conf拖入SD卡的boot分区。</h4><h3 id="5-将SD卡插入树莓派开机即可"><a href="#5-将SD卡插入树莓派开机即可" class="headerlink" title="5. 将SD卡插入树莓派开机即可"></a>5. 将SD卡插入树莓派开机即可</h3>]]></content>
      <categories>
        <category>树莓派的反击</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP协议</title>
    <url>/posts/8564.html</url>
    <content><![CDATA[<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="什么是HTTP协议"><a href="#什么是HTTP协议" class="headerlink" title="什么是HTTP协议"></a>什么是HTTP协议</h2><p>HTTP（超文本传输协议）是一个简单的请求–响应协议，通常应用在TCP之上</p>
<ul>
<li>html、字符</li>
<li>图片、音频、视频、定位</li>
</ul>
<a id="more"></a>
<h2 id="两个时代"><a href="#两个时代" class="headerlink" title="两个时代"></a>两个时代</h2><p>Http1.0:客户端与web服务器连接后，只能获得一个web资源，断开连接。<br>Http2.0:客户端和web服务器连接后，可以获得多个web资源</p>
<h2 id="Http请求"><a href="#Http请求" class="headerlink" title="Http请求"></a>Http请求</h2><ul>
<li>客户端 – 发请求(Request) – 服务器 </li>
<li><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210505144943.png"><h3 id="1-请求行"><a href="#1-请求行" class="headerlink" title="1. 请求行"></a>1. 请求行</h3></li>
<li>请求行中的请求方式：GET</li>
<li>请求方式：<strong>GET,POST</strong>,HEAD,DELETE,TRACT,PUT…<ul>
<li>GET:请求能携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全但是高效。</li>
<li>POST:请求能携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全但是不高效。<h3 id="2-消息头"><a href="#2-消息头" class="headerlink" title="2. 消息头"></a>2. 消息头</h3><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210505145844.png"><h2 id="Http响应"><a href="#Http响应" class="headerlink" title="Http响应"></a>Http响应</h2></li>
</ul>
</li>
<li>服务器 – 响应(Response) – 客户端 <h3 id="1-响应体"><a href="#1-响应体" class="headerlink" title="1. 响应体"></a>1. 响应体</h3><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210505150406.png"><h3 id="2-响应状态码"><a href="#2-响应状态码" class="headerlink" title="2. 响应状态码"></a>2. 响应状态码</h3>200：请求响应成功 200<br>3XX：请求重定向</li>
<li>重定向：你重新到我给你的新位置上去。</li>
</ul>
<p>4XX：找不到资源 404</p>
<ul>
<li>资源找不到<br>5XX：服务器代码错误 500</li>
<li>502：网关错误</li>
</ul>
<p><strong>常见面试题</strong><br>当你在浏览器地址栏输入地址并回车的一瞬间到页面完全展示出来，中间经历了什么？</p>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>树莓派配置花生壳内网穿透</title>
    <url>/posts/30289.html</url>
    <content><![CDATA[<h1 id="树莓派配置花生壳内网穿透"><a href="#树莓派配置花生壳内网穿透" class="headerlink" title="树莓派配置花生壳内网穿透"></a>树莓派配置花生壳内网穿透</h1><h3 id="一、工具包下载"><a href="#一、工具包下载" class="headerlink" title="一、工具包下载"></a>一、工具包下载</h3><h4 id="下载工具包到树莓派"><a href="#下载工具包到树莓派" class="headerlink" title="下载工具包到树莓派:"></a>下载工具包到树莓派:</h4><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">下载地址<span class="symbol">:https</span><span class="symbol">://dl-cdn</span>.oray.com/hsk/linux/phtunnel_5_0_rapi_aarch64.deb</span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080648.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080704.png"></p>
<h3 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h3><p>注意：安装花生壳前，需输入命令：sudo -s 切换到管理员权限。</p>
<a id="more"></a>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080726.png"></p>
<h4 id="1、使用cd命令进入安装包所在的文件路径，输入安装命令：dpkg-i-安装包名称。回车，等待安装完成。"><a href="#1、使用cd命令进入安装包所在的文件路径，输入安装命令：dpkg-i-安装包名称。回车，等待安装完成。" class="headerlink" title="1、使用cd命令进入安装包所在的文件路径，输入安装命令：dpkg -i 安装包名称。回车，等待安装完成。"></a>1、使用cd命令进入安装包所在的文件路径，输入安装命令：dpkg -i 安装包名称。回车，等待安装完成。</h4><p>如:dpkg -i phtunnel_5_0_rapi_aarch64.deb<br>安装成功后，将显示花生壳的SN码、默认密码（admin）及远程管理地址<a href="http://b.oray.com./">http://b.oray.com。</a><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080757.png"></p>
<h3 id="三、操作功能"><a href="#三、操作功能" class="headerlink" title="三、操作功能"></a>三、操作功能</h3><h4 id="1、输入命令：phddns回车，可以看到扩展功能。phddns-start（启动）-status（状态）-stop（停止）-restart（重启）-reset（重置）-enable（开机自启动）-disable（关闭开机自启动）-version（版本）"><a href="#1、输入命令：phddns回车，可以看到扩展功能。phddns-start（启动）-status（状态）-stop（停止）-restart（重启）-reset（重置）-enable（开机自启动）-disable（关闭开机自启动）-version（版本）" class="headerlink" title="1、输入命令：phddns回车，可以看到扩展功能。phddns start（启动）| status（状态）| stop（停止）|restart（重启）| reset（重置）|enable（开机自启动）|disable（关闭开机自启动）|version（版本）"></a>1、输入命令：phddns回车，可以看到扩展功能。phddns start（启动）| status（状态）| stop（停止）|restart（重启）| reset（重置）|enable（开机自启动）|disable（关闭开机自启动）|version（版本）</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080812.png"></p>
<h4 id="2、具体命令操作如下："><a href="#2、具体命令操作如下：" class="headerlink" title="2、具体命令操作如下："></a>2、具体命令操作如下：</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080854.png"></p>
<h4 id="3、日志文件存放路径：-var-log-phddns"><a href="#3、日志文件存放路径：-var-log-phddns" class="headerlink" title="3、日志文件存放路径：/var/log/phddns"></a>3、日志文件存放路径：/var/log/phddns</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080903.png"></p>
<h4 id="4、卸载命令：dpkg-r-phddns"><a href="#4、卸载命令：dpkg-r-phddns" class="headerlink" title="4、卸载命令：dpkg -r phddns"></a>4、卸载命令：dpkg -r phddns</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080930.png"></p>
<h3 id="四、添加内网穿透映射"><a href="#四、添加内网穿透映射" class="headerlink" title="四、添加内网穿透映射"></a>四、添加内网穿透映射</h3><h4 id="1、树莓派中的花生壳安装完成后，先复制生成的SN码。然后在浏览器中访问远程管理地址http-b-oray-com-，在登录页面中输入SN码与默认密码（admin）登录。"><a href="#1、树莓派中的花生壳安装完成后，先复制生成的SN码。然后在浏览器中访问远程管理地址http-b-oray-com-，在登录页面中输入SN码与默认密码（admin）登录。" class="headerlink" title="1、树莓派中的花生壳安装完成后，先复制生成的SN码。然后在浏览器中访问远程管理地址http://b.oray.com ，在登录页面中输入SN码与默认密码（admin）登录。"></a>1、树莓派中的花生壳安装完成后，先复制生成的SN码。然后在浏览器中访问远程管理地址<a href="http://b.oray.com/">http://b.oray.com</a> ，在登录页面中输入SN码与默认密码（admin）登录。</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080943.png"></p>
<h4 id="2、首次登录，需先激活。提供扫码激活和密码激活两种方式，可灵活选择。"><a href="#2、首次登录，需先激活。提供扫码激活和密码激活两种方式，可灵活选择。" class="headerlink" title="2、首次登录，需先激活。提供扫码激活和密码激活两种方式，可灵活选择。"></a>2、首次登录，需先激活。提供扫码激活和密码激活两种方式，可灵活选择。</h4><p>①扫码激活：需使用花生壳管理APP或微信进行扫码激活；<br>②密码激活：输入已注册的Oray帐号密码激活。<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227080953.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081008.png"></p>
<h4 id="3、激活成功后，进入花生壳管理平台。若绑定SN码的帐号只有动态域名解析功能，需使用内网穿透功能时，可点击“免费开通”，或直接将帐号升级到带内网穿透功能的服务版本。"><a href="#3、激活成功后，进入花生壳管理平台。若绑定SN码的帐号只有动态域名解析功能，需使用内网穿透功能时，可点击“免费开通”，或直接将帐号升级到带内网穿透功能的服务版本。" class="headerlink" title="3、激活成功后，进入花生壳管理平台。若绑定SN码的帐号只有动态域名解析功能，需使用内网穿透功能时，可点击“免费开通”，或直接将帐号升级到带内网穿透功能的服务版本。"></a>3、激活成功后，进入花生壳管理平台。若绑定SN码的帐号只有动态域名解析功能，需使用内网穿透功能时，可点击“免费开通”，或直接将帐号升级到带内网穿透功能的服务版本。</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081027.png"></p>
<h4 id="4、还可把鼠标移动到页面右上角帐号处，点击“切换帐号”更换带内网穿透功能的帐号登录使用。"><a href="#4、还可把鼠标移动到页面右上角帐号处，点击“切换帐号”更换带内网穿透功能的帐号登录使用。" class="headerlink" title="4、还可把鼠标移动到页面右上角帐号处，点击“切换帐号”更换带内网穿透功能的帐号登录使用。"></a>4、还可把鼠标移动到页面右上角帐号处，点击“切换帐号”更换带内网穿透功能的帐号登录使用。</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081041.png"></p>
<h4 id="5、添加内网穿透映射时，点击页面上的“增加映射”按钮。"><a href="#5、添加内网穿透映射时，点击页面上的“增加映射”按钮。" class="headerlink" title="5、添加内网穿透映射时，点击页面上的“增加映射”按钮。"></a>5、添加内网穿透映射时，点击页面上的“增加映射”按钮。</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081050.png"></p>
<h4 id="6、根据页面提示填写映射所需的信息，这里以映射树莓派的SSH服务"><a href="#6、根据页面提示填写映射所需的信息，这里以映射树莓派的SSH服务" class="headerlink" title="6、根据页面提示填写映射所需的信息，这里以映射树莓派的SSH服务"></a>6、根据页面提示填写映射所需的信息，这里以映射树莓派的SSH服务</h4><p>（10022端口）为例：<br>①应用名称：自定义<br>②应用图标：自行选择<br>③映射类型：选择TCP<br>④映射模板：暂不选择模板<br>⑤外网域名：选择用作外网访问的域名<br>⑥外网端口：选择动态端口<br>⑦内网主机：树莓派设备的内网IP地址<br>⑧内网端口：映射的服务类型对应端口10022<br>⑨带宽：购买映射带宽后，可支持给映射分配额外带宽，这里保存默认。<br>确认映射内容无误后，点击“确定”。<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081206.png"></p>
<h4 id="7、映射添加完成，生成格式为：域名-5位数端口号的外网访问地址。"><a href="#7、映射添加完成，生成格式为：域名-5位数端口号的外网访问地址。" class="headerlink" title="7、映射添加完成，生成格式为：域名+5位数端口号的外网访问地址。"></a>7、映射添加完成，生成格式为：域名+5位数端口号的外网访问地址。</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081132.png"></p>
<h4 id="8、在外网的电脑上，打开连接SSH服务的工具程序，输入域名与5位数端口号。"><a href="#8、在外网的电脑上，打开连接SSH服务的工具程序，输入域名与5位数端口号。" class="headerlink" title="8、在外网的电脑上，打开连接SSH服务的工具程序，输入域名与5位数端口号。"></a>8、在外网的电脑上，打开连接SSH服务的工具程序，输入域名与5位数端口号。</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081150.png"></p>
<h4 id="9、远程访问树莓派的SSH服务成功，此时只要保持树莓派上安装的花生壳程序在线即可。"><a href="#9、远程访问树莓派的SSH服务成功，此时只要保持树莓派上安装的花生壳程序在线即可。" class="headerlink" title="9、远程访问树莓派的SSH服务成功，此时只要保持树莓派上安装的花生壳程序在线即可。"></a>9、远程访问树莓派的SSH服务成功，此时只要保持树莓派上安装的花生壳程序在线即可。</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AE%E8%8A%B1%E7%94%9F%E5%A3%B3%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/20210227081222.png"></p>
<h4 id="五、如果重装了系统"><a href="#五、如果重装了系统" class="headerlink" title="五、如果重装了系统"></a>五、如果重装了系统</h4><h4 id="用树莓派的SN码登陆花生壳，绑定原有的账号。然后删除原来账号的端口，新建新端口。即可生效。"><a href="#用树莓派的SN码登陆花生壳，绑定原有的账号。然后删除原来账号的端口，新建新端口。即可生效。" class="headerlink" title="用树莓派的SN码登陆花生壳，绑定原有的账号。然后删除原来账号的端口，新建新端口。即可生效。"></a>用树莓派的SN码登陆花生壳，绑定原有的账号。然后删除原来账号的端口，新建新端口。即可生效。</h4>]]></content>
      <categories>
        <category>树莓派的反击</category>
      </categories>
      <tags>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaDoc生成文档</title>
    <url>/posts/22845.html</url>
    <content><![CDATA[<h1 id="JavaDoc生成文档"><a href="#JavaDoc生成文档" class="headerlink" title="JavaDoc生成文档"></a>JavaDoc生成文档</h1><h2 id="JavaDoc可以为类创建文档，生成效果类似于JavaSE-API和开发文档"><a href="#JavaDoc可以为类创建文档，生成效果类似于JavaSE-API和开发文档" class="headerlink" title="JavaDoc可以为类创建文档，生成效果类似于JavaSE API和开发文档"></a>JavaDoc可以为类创建文档，生成效果类似于<a href="https://docs.oracle.com/javase/8/docs/api/">JavaSE API和开发文档</a></h2><h2 id="生成步骤"><a href="#生成步骤" class="headerlink" title="生成步骤"></a>生成步骤</h2><h3 id="1-在类中写入注释"><a href="#1-在类中写入注释" class="headerlink" title="1.在类中写入注释"></a>1.在类中写入注释</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Haikez</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Haikez</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中@后面的内容:<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210416142327.png"></p>
</blockquote>
<a id="more"></a>
<h3 id="2-打开类文件所在位置"><a href="#2-打开类文件所在位置" class="headerlink" title="2.打开类文件所在位置"></a>2.打开类文件所在位置</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210416142520.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210416142824.png"></p>
<h3 id="3-用命令行在当前目录中输入"><a href="#3-用命令行在当前目录中输入" class="headerlink" title="3.用命令行在当前目录中输入"></a>3.用命令行在当前目录中输入</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ javadoc -encoding UTF-8 -charset UTF-8 文件名</span><br></pre></td></tr></table></figure>
<h3 id="4-生成如下的"><a href="#4-生成如下的" class="headerlink" title="4.生成如下的"></a>4.生成如下的</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210416143141.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210416143148.png"></p>
<h3 id="打开index-html就可看到"><a href="#打开index-html就可看到" class="headerlink" title="打开index.html就可看到"></a>打开index.html就可看到</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210416143322.png"></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java构造方法</title>
    <url>/posts/55491.html</url>
    <content><![CDATA[<h1 id="Java构造方法"><a href="#Java构造方法" class="headerlink" title="Java构造方法"></a>Java构造方法</h1><h2 id="定义-构造方法是在类的实例化时自动调用的方法。"><a href="#定义-构造方法是在类的实例化时自动调用的方法。" class="headerlink" title="定义: 构造方法是在类的实例化时自动调用的方法。"></a>定义: 构造方法是在类的实例化时自动调用的方法。</h2><h2 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h2><h3 id="1-必须与类的名字相同"><a href="#1-必须与类的名字相同" class="headerlink" title="1.必须与类的名字相同"></a>1.必须与类的名字相同</h3><h3 id="2-必须没有返回值类型，也不能写void"><a href="#2-必须没有返回值类型，也不能写void" class="headerlink" title="2.必须没有返回值类型，也不能写void"></a>2.必须没有返回值类型，也不能写void</h3><h2 id="一、无参构造方法"><a href="#一、无参构造方法" class="headerlink" title="一、无参构造方法"></a>一、无参构造方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个类即使什么都不写也会存在一个无参构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=<span class="string">&quot;张三&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="二、有参构造（在定义了一个有参构造方法时，无参构造必须得写！！！）"><a href="#二、有参构造（在定义了一个有参构造方法时，无参构造必须得写！！！）" class="headerlink" title="二、有参构造（在定义了一个有参构造方法时，无参构造必须得写！！！）"></a>二、有参构造（在定义了一个有参构造方法时，无参构造必须得写！！！）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在定义了一个有参构造方法时，无参构造必须得写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="comment">//1.使用new关键字，本质就是在调用构造方法</span></span><br><span class="line">        <span class="comment">//2.构造方法主要是用于初始化值 </span></span><br><span class="line">    &#125; </span><br><span class="line">    System.out.println(person.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、IDEA快捷生成有-无参构造方法"><a href="#三、IDEA快捷生成有-无参构造方法" class="headerlink" title="三、IDEA快捷生成有/无参构造方法"></a>三、IDEA快捷生成有/无参构造方法</h2><h3 id="Mac下的快捷键-ctrl-enter"><a href="#Mac下的快捷键-ctrl-enter" class="headerlink" title="Mac下的快捷键 ctrl+enter"></a>Mac下的快捷键 <strong><em>ctrl+enter</em></strong></h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210417153510.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210417153519.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210417153525.png"></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java的抽象类和接口</title>
    <url>/posts/11057.html</url>
    <content><![CDATA[<h1 id="一、Java的抽象类"><a href="#一、Java的抽象类" class="headerlink" title="一、Java的抽象类"></a>一、Java的抽象类</h1><h2 id="抽象类的知识点"><a href="#抽象类的知识点" class="headerlink" title="抽象类的知识点:"></a>抽象类的知识点:</h2><ol>
<li>public <strong>abstract</strong> class 类名 {} 。</li>
<li>抽象类里可以写<strong>普通方法</strong>和<strong>抽象方法</strong>。</li>
<li>抽象类<strong>不能被实例化</strong>！！！</li>
<li>抽象类的使用：通过别的类<strong>继承</strong>抽像类并<strong>必须</strong>对类中的<strong>抽象方法</strong>进行<strong>重写</strong>。</li>
<li>抽象类的抽象方法在本类中<strong>不一定要实现</strong>。</li>
<li>抽象类是一种<strong>约束</strong>，规定本类中必须要有的一些方法。<h2 id="抽象类的定义-abstract关键字"><a href="#抽象类的定义-abstract关键字" class="headerlink" title="抽象类的定义(abstract关键字):"></a>抽象类的定义(abstract关键字):</h2><a id="more"></a>
<h3 id="abstract关键字"><a href="#abstract关键字" class="headerlink" title="abstract关键字:"></a>abstract关键字:</h3><h4 id="1-定义一个类："><a href="#1-定义一个类：" class="headerlink" title="1. 定义一个类："></a>1. 定义一个类：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123; </span><br><span class="line">&#125; <span class="comment">/*被abstract关键字修饰的类不能被实例化，</span></span><br><span class="line"><span class="comment">只能作为父类被别的类继承使用*/</span></span><br></pre></td></tr></table></figure>
<h4 id="2-通过abstract关键字定义抽象方法"><a href="#2-通过abstract关键字定义抽象方法" class="headerlink" title="2. 通过abstract关键字定义抽象方法:"></a>2. 通过abstract关键字定义抽象方法:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">/*被abstract关键字修饰的方法无需写方法体，</span></span><br><span class="line"><span class="comment">因为当别的类继承本类时，该方法一定要被重写。*/</span></span><br></pre></td></tr></table></figure>
<h2 id="抽象类的使用：因为抽象类不能被实例化为对象，因此只能作为父类被别的类继承。并且子类必须重写父类的所有抽象方法！！！"><a href="#抽象类的使用：因为抽象类不能被实例化为对象，因此只能作为父类被别的类继承。并且子类必须重写父类的所有抽象方法！！！" class="headerlink" title="抽象类的使用：因为抽象类不能被实例化为对象，因此只能作为父类被别的类继承。并且子类必须重写父类的所有抽象方法！！！"></a>抽象类的使用：因为抽象类不能被实例化为对象，因此只能作为父类被别的类继承。并且子类必须重写父类的所有抽象方法！！！</h2><h2 id="抽象类与抽象方法："><a href="#抽象类与抽象方法：" class="headerlink" title="抽象类与抽象方法："></a>抽象类与抽象方法：</h2><h3 id="1-抽象类中可以写一些普通方法，并且子类继承抽象类后这些普通方法无需重写"><a href="#1-抽象类中可以写一些普通方法，并且子类继承抽象类后这些普通方法无需重写" class="headerlink" title="1. 抽象类中可以写一些普通方法，并且子类继承抽象类后这些普通方法无需重写"></a>1. 抽象类中可以写一些普通方法，并且子类继承抽象类后这些普通方法<em>无需重写</em></h3><h3 id="2-抽象类中可以没有抽象方法，但是有抽象方法的类一定是抽象类。"><a href="#2-抽象类中可以没有抽象方法，但是有抽象方法的类一定是抽象类。" class="headerlink" title="2. 抽象类中可以没有抽象方法，但是有抽象方法的类一定是抽象类。"></a>2. 抽象类中可以没有抽象方法，但是有抽象方法的类一定是抽象类。</h3><h1 id="二、Java的接口"><a href="#二、Java的接口" class="headerlink" title="二、Java的接口"></a>二、Java的接口</h1><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210420155818.png"><h2 id="接口的知识点"><a href="#接口的知识点" class="headerlink" title="接口的知识点:"></a>接口的知识点:</h2></li>
<li>public interface 接口名 {}</li>
<li>接口完全只是约束。接口中的所有方法都无需具体实现。</li>
<li>接口<strong>不能被实例化</strong>！！！</li>
<li>接口中的所有方法默认都用 <strong><em>public abstract</em></strong> 修饰。</li>
<li>接口都要有<strong>实现类</strong>来实现，实现接口的关键字 <strong><em>implements</em></strong> 。</li>
<li>接口的实现类本质就是对接口中<strong>所有方法的重写</strong>。</li>
<li><em>接口中定义的变量都是常量（ **</em>public static final*** ）<h2 id="接口的定义-public-interface-接口名"><a href="#接口的定义-public-interface-接口名" class="headerlink" title="接口的定义: public interface 接口名{}"></a>接口的定义: public interface 接口名{}</h2><h3 id="interface关键字"><a href="#interface关键字" class="headerlink" title="interface关键字"></a>interface关键字</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名</span>&#123;</span><br><span class="line">&#125; <span class="comment">//通过interface关键字定义接口</span></span><br></pre></td></tr></table></figure>
<h2 id="接口的使用"><a href="#接口的使用" class="headerlink" title="接口的使用"></a>接口的使用</h2><h3 id="implements关键字"><a href="#implements关键字" class="headerlink" title="implements关键字"></a>implements关键字</h3><h4 id="1-implements实现接口"><a href="#1-implements实现接口" class="headerlink" title="1. implements实现接口"></a>1. implements实现接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 实现类 <span class="keyword">implements</span> 接口1,接口2</span>&#123;</span><br><span class="line">&#125; <span class="comment">/*实现类通过implements关键字实现接口。</span></span><br><span class="line"><span class="comment">接口的实现类必须对接口中的所有方法的重写!!!*/</span></span><br></pre></td></tr></table></figure>
<h4 id="2-implements可以同时实现多个接口"><a href="#2-implements可以同时实现多个接口" class="headerlink" title="2. implements可以同时实现多个接口"></a>2. implements可以同时实现多个接口</h4></li>
</ol>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java方法的定义与调用</title>
    <url>/posts/6749.html</url>
    <content><![CDATA[<h1 id="Java方法的定义与调用"><a href="#Java方法的定义与调用" class="headerlink" title="Java方法的定义与调用"></a>Java方法的定义与调用</h1><h2 id="一、方法的定义"><a href="#一、方法的定义" class="headerlink" title="一、方法的定义:"></a>一、方法的定义:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">修饰符 返回值类型 方法名(参数列表) 抛出异常&#123;</span></span><br><span class="line"><span class="comment">    方法体</span></span><br><span class="line"><span class="comment">    return 返回值;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello,world&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="二、方法的调用"><a href="#二、方法的调用" class="headerlink" title="二、方法的调用"></a>二、方法的调用</h2><h3 id="1-如果是静态方法（被static关键字修饰的方法），则可以用类名-方法名直接调用。"><a href="#1-如果是静态方法（被static关键字修饰的方法），则可以用类名-方法名直接调用。" class="headerlink" title="1.如果是静态方法（被static关键字修饰的方法），则可以用类名.方法名直接调用。"></a>1.如果是静态方法（被static关键字修饰的方法），则可以用类名.方法名直接调用。</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Student.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-如果是非静态方法，则需要先实例化类，再进行调用"><a href="#2-如果是非静态方法，则需要先实例化类，再进行调用" class="headerlink" title="2.如果是非静态方法，则需要先实例化类，再进行调用"></a>2.如果是非静态方法，则需要先实例化类，再进行调用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Demo</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//实例化这个类</span></span><br><span class="line">        <span class="comment">//方法一</span></span><br><span class="line">        <span class="keyword">new</span> Student.say();</span><br><span class="line">        <span class="comment">//方法二</span></span><br><span class="line">        <span class="comment">//对象类型 对象名 = 对象值</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-static关键字"><a href="#3-static关键字" class="headerlink" title="3.static关键字"></a>3.static关键字</h3><h4 id="1-注意点-静态方法和类一起加载的，非静态方法只有在类的实例化之后才存在。"><a href="#1-注意点-静态方法和类一起加载的，非静态方法只有在类的实例化之后才存在。" class="headerlink" title="1. 注意点:静态方法和类一起加载的，非静态方法只有在类的实例化之后才存在。"></a>1. 注意点:静态方法和类一起加载的，非静态方法只有在类的实例化之后才存在。</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210417142537.png"></p>
<blockquote>
<p>因此当类中的方法<strong>相互调用</strong>时，只有当这两种方法<strong>都加</strong>或者<strong>都不加</strong> <strong><em>static</em></strong> 修饰， 程序才能通过。</p>
</blockquote>
<h4 id="2-static静态代码块-类的实例化时首先执行静态代码块中的内容，其次是匿名代码块最后是构造方法。但是静态代码块只执行一次，对类再次实例化时不执行。而匿名代码块和构造方法会一直执行。"><a href="#2-static静态代码块-类的实例化时首先执行静态代码块中的内容，其次是匿名代码块最后是构造方法。但是静态代码块只执行一次，对类再次实例化时不执行。而匿名代码块和构造方法会一直执行。" class="headerlink" title="2. static静态代码块:类的实例化时首先执行静态代码块中的内容，其次是匿名代码块最后是构造方法。但是静态代码块只执行一次，对类再次实例化时不执行。而匿名代码块和构造方法会一直执行。"></a>2. static静态代码块:类的实例化时首先执行<em>静态代码块</em>中的内容，其次是<em>匿名代码</em>块最后是<em>构造方法</em>。但是<em>静态代码块只执行一次</em>，对类再次实例化时不执行。而匿名代码块和构造方法会一直执行。</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210419170704.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210419170712.png"></p>
<h4 id="3-static静态导入包"><a href="#3-static静态导入包" class="headerlink" title="3. static静态导入包"></a>3. static静态导入包</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210419170815.png"></p>
<h3 id="4-参数的传递"><a href="#4-参数的传递" class="headerlink" title="4.参数的传递"></a>4.参数的传递</h3><h4 id="1-值传递"><a href="#1-值传递" class="headerlink" title="1.值传递"></a>1.值传递</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210417144057.png"></p>
<blockquote>
<p>值传递时方法不改变传入参数的值</p>
</blockquote>
<h4 id="2-引用传递"><a href="#2-引用传递" class="headerlink" title="2.引用传递"></a>2.引用传递</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210417144107.png"></p>
<blockquote>
<p>类似于C语言的指针，方法会改变引用类型所指的值。 </p>
</blockquote>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java的封装</title>
    <url>/posts/57497.html</url>
    <content><![CDATA[<h1 id="Java的封装"><a href="#Java的封装" class="headerlink" title="Java的封装"></a>Java的封装</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210417212632.png"></p>
<h2 id="重点记住-属性私有，get-set"><a href="#重点记住-属性私有，get-set" class="headerlink" title="重点记住:属性私有，get/set"></a>重点记住:属性私有，get/set</h2><a id="more"></a>
<h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作:"></a>具体操作:</h2><h3 id="1-用private关键字对类中的属性进行修饰，被修饰的属性不能直接被调用。"><a href="#1-用private关键字对类中的属性进行修饰，被修饰的属性不能直接被调用。" class="headerlink" title="1. 用private关键字对类中的属性进行修饰，被修饰的属性不能直接被调用。"></a>1. 用private关键字对类中的属性进行修饰，被修饰的属性不能直接被调用。</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210417213825.png"></p>
<h3 id="2-在本类中提供一些set、get方法可以操作该属性。"><a href="#2-在本类中提供一些set、get方法可以操作该属性。" class="headerlink" title="2. 在本类中提供一些set、get方法可以操作该属性。"></a>2. 在本类中提供一些set、get方法可以操作该属性。</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210417214414.png"></p>
<h3 id="3-IDEA一键生成get-set方法。"><a href="#3-IDEA一键生成get-set方法。" class="headerlink" title="3.IDEA一键生成get/set方法。"></a>3.IDEA一键生成get/set方法。</h3><h4 id="Mac下按ctrl-enter"><a href="#Mac下按ctrl-enter" class="headerlink" title="Mac下按ctrl+enter"></a>Mac下按ctrl+enter</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210417214718.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210417214841.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210417214851.png"></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java的继承</title>
    <url>/posts/15304.html</url>
    <content><![CDATA[<h1 id="一、Java的继承"><a href="#一、Java的继承" class="headerlink" title="一、Java的继承"></a>一、Java的继承</h1><h2 id="1-继承的本质是对某一批类的抽象，从而实现对世界更好的建模。"><a href="#1-继承的本质是对某一批类的抽象，从而实现对世界更好的建模。" class="headerlink" title="1. 继承的本质是对某一批类的抽象，从而实现对世界更好的建模。"></a>1. 继承的本质是对某一批类的抽象，从而实现对世界更好的建模。</h2><h2 id="2-子类继承父类，子类可拥有父类中所有的属性和方法。"><a href="#2-子类继承父类，子类可拥有父类中所有的属性和方法。" class="headerlink" title="2. 子类继承父类，子类可拥有父类中所有的属性和方法。"></a>2. 子类继承父类，子类可拥有父类中所有的属性和方法。</h2><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210417221138.png"></p>
<a id="more"></a>
<h2 id="3-父类中的属性也可以用private关键字修复，从而达到封装的效果。"><a href="#3-父类中的属性也可以用private关键字修复，从而达到封装的效果。" class="headerlink" title="3. 父类中的属性也可以用private关键字修复，从而达到封装的效果。"></a>3. 父类中的属性也可以用private关键字修复，从而达到封装的效果。</h2><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210417221441.png"></p>
<h2 id="4-IDEA中按ctrl-h可以快速查看继承列表。"><a href="#4-IDEA中按ctrl-h可以快速查看继承列表。" class="headerlink" title="4. IDEA中按ctrl+h可以快速查看继承列表。"></a>4. IDEA中按ctrl+h可以快速查看继承列表。</h2><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210417221729.png"></p>
<h2 id="5-父类可以不写无参构造但是子类必须调用父类的有参构造"><a href="#5-父类可以不写无参构造但是子类必须调用父类的有参构造" class="headerlink" title="5. 父类可以不写无参构造但是子类必须调用父类的有参构造"></a>5. 父类可以不写无参构造但是子类必须调用父类的有参构造</h2><h2 id="6-this关键-amp-super关键字"><a href="#6-this关键-amp-super关键字" class="headerlink" title="6. this关键&amp;super关键字"></a>6. this关键&amp;super关键字</h2><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字:"></a>this关键字:</h3><ol>
<li>通过 <strong><em>this.</em></strong> 的方式可以访问<strong>本类中</strong>的成员变量和成员方法</li>
<li><strong><em>this();</em></strong> 方法是调用<strong>本类</strong>的 <strong><em>构造方法</em></strong><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字:"></a>super关键字:</h3></li>
<li>在<strong>子类中</strong>通过 <strong><em>super.</em></strong> 的方式会调用父类中的成员变量和成员方法。</li>
<li><strong><em>super();</em></strong> 方法是调用<strong>父类</strong>的 <strong><em>构造方法</em></strong> ，必须在方法的第一个执行。</li>
<li>super不能访问父类中的私有属性。<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210419105757.png"></li>
<li>super();和this();不能同时调用！！！<h2 id="7-子类的实例化时会优先执行父类的构造方法。"><a href="#7-子类的实例化时会优先执行父类的构造方法。" class="headerlink" title="7. 子类的实例化时会优先执行父类的构造方法。"></a>7. 子类的实例化时会优先执行父类的构造方法。</h2><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210419110035.png"><h1 id="二、-方法的重写"><a href="#二、-方法的重写" class="headerlink" title="二、 方法的重写"></a>二、 方法的重写</h1><h2 id="重写：需要有继承关系，子类重写父类的方法！"><a href="#重写：需要有继承关系，子类重写父类的方法！" class="headerlink" title="重写：需要有继承关系，子类重写父类的方法！"></a>重写：需要有继承关系，子类重写父类的方法！</h2><h2 id="重写的要求-（子类和父类的方法一致，方法体不同！）"><a href="#重写的要求-（子类和父类的方法一致，方法体不同！）" class="headerlink" title="重写的要求:（子类和父类的方法一致，方法体不同！）"></a>重写的要求:（子类和父类的方法一致，方法体不同！）</h2><h3 id="1-方法名必须相同"><a href="#1-方法名必须相同" class="headerlink" title="1. 方法名必须相同"></a>1. 方法名必须相同</h3><h3 id="2-参数列表必须相同（否则就成了方法重载，方法重载针对的是当前方法）"><a href="#2-参数列表必须相同（否则就成了方法重载，方法重载针对的是当前方法）" class="headerlink" title="2. 参数列表必须相同（否则就成了方法重载，方法重载针对的是当前方法）"></a>2. 参数列表必须相同（否则就成了方法重载，方法重载针对的是当前方法）</h3><h3 id="3-修饰符-范围可以扩大-但不能缩小-public-gt-protected-gt-default-gt-private"><a href="#3-修饰符-范围可以扩大-但不能缩小-public-gt-protected-gt-default-gt-private" class="headerlink" title="3. 修饰符:范围可以扩大,但不能缩小:public&gt;protected&gt;default&gt;private"></a>3. 修饰符:范围可以扩大,但不能缩小:public&gt;protected&gt;default&gt;private</h3><h3 id="4-抛出的异常-范围可以被缩小，但不能扩大"><a href="#4-抛出的异常-范围可以被缩小，但不能扩大" class="headerlink" title="4. 抛出的异常:范围可以被缩小，但不能扩大"></a>4. 抛出的异常:范围可以被缩小，但不能扩大</h3><h2 id="重写的意义"><a href="#重写的意义" class="headerlink" title="重写的意义:"></a>重写的意义:</h2><h3 id="1-父类的功能，子类不一定需要。"><a href="#1-父类的功能，子类不一定需要。" class="headerlink" title="1. 父类的功能，子类不一定需要。"></a>1. 父类的功能，子类不一定需要。</h3></li>
</ol>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java的异常机制</title>
    <url>/posts/61362.html</url>
    <content><![CDATA[<h1 id="Java的异常机制"><a href="#Java的异常机制" class="headerlink" title="Java的异常机制"></a>Java的异常机制</h1><h2 id="一、异常（Exception）与错误（Error）"><a href="#一、异常（Exception）与错误（Error）" class="headerlink" title="一、异常（Exception）与错误（Error）"></a>一、异常（Exception）与错误（Error）</h2><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210421153629.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210421153636.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210421153643.png"></p>
<a id="more"></a>
<h2 id="二、五大关键字（try、catch、finally、throw、throws）"><a href="#二、五大关键字（try、catch、finally、throw、throws）" class="headerlink" title="二、五大关键字（try、catch、finally、throw、throws）"></a>二、五大关键字（try、catch、finally、throw、throws）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123; </span><br><span class="line">    <span class="comment">//监控区域。</span></span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b=<span class="number">0</span>;</span><br><span class="line">    System.out.println(a/b);</span><br><span class="line">&#125;<span class="keyword">catch</span>(ArithmeticException e)&#123;</span><br><span class="line">    <span class="comment">//捕获区域，如果捕捉到括号内指明的异常，执行代码块中的内容。</span></span><br><span class="line">    System.out.println(<span class="string">&quot;发现异常&quot;</span>);</span><br><span class="line">    e.printStackTrace();<span class="comment">//打印错误的栈信息。</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//无论是否出现异常，都会执行代码块中的内容。</span></span><br><span class="line">    System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-try关键字：用来监控代码块是否发生异常"><a href="#1-try关键字：用来监控代码块是否发生异常" class="headerlink" title="1. try关键字：用来监控代码块是否发生异常"></a>1. try关键字：用来监控代码块是否发生异常</h3><h3 id="2-catch-捕获异常，如果捕捉到括号内指明的异常，执行代码块中的内容"><a href="#2-catch-捕获异常，如果捕捉到括号内指明的异常，执行代码块中的内容" class="headerlink" title="2. catch( )捕获异常，如果捕捉到括号内指明的异常，执行代码块中的内容."></a>2. catch( )捕获异常，如果捕捉到括号内指明的异常，执行代码块中的内容.</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210421154825.png"></p>
<blockquote>
<p>上图是catch()中异常的范围。如果填Throwable那么catch就能捕获任何异常和错误。</p>
</blockquote>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210421155331.png"></p>
<blockquote>
<p>可以使用catch对异常进行层层拦截，**<em>拦截到即停止继续捕获**</em>。 </p>
</blockquote>
<h3 id="3-finally关键字：无论是否出现异常，都会执行代码块中的内容。"><a href="#3-finally关键字：无论是否出现异常，都会执行代码块中的内容。" class="headerlink" title="3. finally关键字：无论是否出现异常，都会执行代码块中的内容。"></a>3. finally关键字：无论是否出现异常，都会执行代码块中的内容。</h3><h3 id="4-throw关键字：主动抛出异常语句"><a href="#4-throw关键字：主动抛出异常语句" class="headerlink" title="4. throw关键字：主动抛出异常语句"></a>4. throw关键字：主动抛出异常语句</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210421160251.png"></p>
<blockquote>
<p>每个异常都是一个类，需要用new关键字创建后抛出。</p>
</blockquote>
<h3 id="5-throws关键字：方法抛出异常"><a href="#5-throws关键字：方法抛出异常" class="headerlink" title="5. throws关键字：方法抛出异常"></a>5. throws关键字：方法抛出异常</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> <span class="keyword">throws</span> 异常名 </span>&#123;</span><br><span class="line">    <span class="comment">//当方法出现异常时会抛出异常,由外界进行捕获</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Markdown基本操作</title>
    <url>/posts/3050.html</url>
    <content><![CDATA[<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="#这是一级标题"></a>#这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="##这是二级标题"></a>##这是二级标题</h2><h2 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="###这是三级标题"></a>###这是三级标题</h2><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>** <strong>Hello,World(粗体)</strong> **<br><strong>* *</strong>Hello,World(斜体加粗)<strong>* *</strong><br>*<em>Hello,World(斜体)</em> *<br>~~ <del>Hello,World(删除线)</del> ~~</p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote>
<p>这是一段引用</p>
</blockquote>
<a id="more"></a>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr>
<p>(—)</p>
<hr>
<p>(***)</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ol>
<li>A</li>
<li>B</li>
<li>C</li>
</ol>
<ul>
<li>A</li>
<li>B</li>
<li>C<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><a href="https://www.baidu.com/">超链接</a></li>
</ul>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table>
<thead>
<tr>
<th>姓名</th>
<th>性别</th>
<th>生日</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>男</td>
<td>2001</td>
</tr>
</tbody></table>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>是基操啦</category>
      </categories>
      <tags>
        <tag>Markdown基操</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven环境搭建</title>
    <url>/posts/49487.html</url>
    <content><![CDATA[<h1 id="Maven环境搭建"><a href="#Maven环境搭建" class="headerlink" title="Maven环境搭建"></a>Maven环境搭建</h1><p>为什么要学习Maven？</p>
<ol>
<li>在Javaweb开发中，需要使用大量的jar包，我们手动去导入；</li>
<li>如何能够让一个对象帮我们去导入和配置这个jar包，由此，Maven诞生。<h2 id="1-Maven-项目架构管理工具"><a href="#1-Maven-项目架构管理工具" class="headerlink" title="1. Maven:项目架构管理工具"></a>1. Maven:项目架构管理工具</h2><a id="more"></a>
<h2 id="2-下载安装Maven"><a href="#2-下载安装Maven" class="headerlink" title="2. 下载安装Maven"></a>2. 下载安装Maven</h2>Maven官网:<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a><br>进入官网下载解压即可<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210427171401.png"><h2 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h2><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210427172947.png"><h2 id="4-Maven的相关配置"><a href="#4-Maven的相关配置" class="headerlink" title="4. Maven的相关配置"></a>4. Maven的相关配置</h2></li>
</ol>
<ul>
<li>配置文件位置(Maven目录下):<strong>/conf/settings.xml</strong><h2 id="5-配置阿里云镜像"><a href="#5-配置阿里云镜像" class="headerlink" title="5. 配置阿里云镜像"></a>5. 配置阿里云镜像</h2></li>
<li>镜像：mirrors<ul>
<li>作用：加速下载</li>
</ul>
</li>
<li>国内建议使用阿里云镜像<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>打开 <strong>/conf/settings.xml</strong>在mirrors标签下添加如上内容</p>
</blockquote>
<h2 id="6-建立本地仓库"><a href="#6-建立本地仓库" class="headerlink" title="6. 建立本地仓库"></a>6. 建立本地仓库</h2></li>
</ul>
<p><strong>修改settings.xml中的localRepository。</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/Users/haikez/Environment/apache-maven-3.8.1<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210427174132.png"></p>
<h2 id="7-在IDEA中使用Maven"><a href="#7-在IDEA中使用Maven" class="headerlink" title="7.在IDEA中使用Maven"></a>7.在IDEA中使用Maven</h2><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210429112035.png"></p>
<h2 id="8-关于在maven项目中配置文件资源导出问题"><a href="#8-关于在maven项目中配置文件资源导出问题" class="headerlink" title="8. 关于在maven项目中配置文件资源导出问题"></a>8. 关于在maven项目中配置文件资源导出问题</h2><p>标准的Maven项目都会有一个resources目录来存放我们所有的资源配置文件，但是我们往往在项目中不仅仅会把所有的资源配置文件都放在resources中，同时我们也有可能放在项目中的其他位置，那么默认的maven项目构建编译时就不会把我们其他目录下的资源配置文件导出到target目录中，就会导致我们的资源配置文件读取失败，从而导致我们的项目报错出现异常，比如说尤其我们在使用MyBatis框架时，往往Mapper.xml配置文件都会放在dao包中和dao接口类放在一起的,那么执行程序的时候，其中的xml配置文件就一定会读取失败，不会生成到maven的target目录中，所以我们要在项目的pom.xml文件中进行设置，并且我建议大家，每新建一个maven项目，就把该设置导入pom.xml文件中，以防不测！！！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>ReentrantLock锁--可重入锁</title>
    <url>/posts/3866.html</url>
    <content><![CDATA[<h1 id="ReentrantLock锁–可重入锁"><a href="#ReentrantLock锁–可重入锁" class="headerlink" title="ReentrantLock锁–可重入锁"></a>ReentrantLock锁–可重入锁</h1><h2 id="ReentrantLock是Lock接口的实现类，它拥有和synchronized相同的并发性和内存语义，通常使用ReentrantLock锁进行安全控制。它可以实现显示加锁、释放锁。"><a href="#ReentrantLock是Lock接口的实现类，它拥有和synchronized相同的并发性和内存语义，通常使用ReentrantLock锁进行安全控制。它可以实现显示加锁、释放锁。" class="headerlink" title="ReentrantLock是Lock接口的实现类，它拥有和synchronized相同的并发性和内存语义，通常使用ReentrantLock锁进行安全控制。它可以实现显示加锁、释放锁。"></a>ReentrantLock是Lock接口的实现类，它拥有和synchronized相同的并发性和内存语义，通常使用ReentrantLock锁进行安全控制。它可以实现显示加锁、释放锁。</h2><h2 id="ReentrantLock锁的实现步骤："><a href="#ReentrantLock锁的实现步骤：" class="headerlink" title="ReentrantLock锁的实现步骤："></a>ReentrantLock锁的实现步骤：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    lock.lock();<span class="comment">//加锁操作</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>Lambda表达式</title>
    <url>/posts/34313.html</url>
    <content><![CDATA[<h1 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h1><h2 id="一、Lambda表达式意义："><a href="#一、Lambda表达式意义：" class="headerlink" title="一、Lambda表达式意义："></a>一、Lambda表达式意义：</h2><ul>
<li><h3 id="避免匿名内部类定义过多。"><a href="#避免匿名内部类定义过多。" class="headerlink" title="避免匿名内部类定义过多。"></a>避免匿名内部类定义过多。</h3></li>
<li><h3 id="可以让代码看起来更简洁。"><a href="#可以让代码看起来更简洁。" class="headerlink" title="可以让代码看起来更简洁。"></a>可以让代码看起来更简洁。</h3></li>
<li><h3 id="去掉一些没有意义的代码，只留下核心逻辑。"><a href="#去掉一些没有意义的代码，只留下核心逻辑。" class="headerlink" title="去掉一些没有意义的代码，只留下核心逻辑。"></a>去掉一些没有意义的代码，只留下核心逻辑。</h3><h2 id="二、Lambda表达式只能创建函数式接口的对象。"><a href="#二、Lambda表达式只能创建函数式接口的对象。" class="headerlink" title="二、Lambda表达式只能创建函数式接口的对象。"></a>二、Lambda表达式只能创建函数式接口的对象。</h2><h3 id="函数式接口-只含有一个抽象方法的接口。"><a href="#函数式接口-只含有一个抽象方法的接口。" class="headerlink" title="函数式接口:只含有一个抽象方法的接口。"></a>函数式接口:只含有一个抽象方法的接口。</h3><a id="more"></a>
<h2 id="三、Lambda表达式的实现过程"><a href="#三、Lambda表达式的实现过程" class="headerlink" title="三、Lambda表达式的实现过程:"></a>三、Lambda表达式的实现过程:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数式接口。</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Like</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lamda</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//用接口类实现一个对象并用Lambda表达式实现。</span></span><br><span class="line">        Like like = ()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Lambda表达式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        like.lambda();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//上面代码等价于</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">       </span></span><br><span class="line"><span class="comment">        Like like = new Like()&#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public void lambda()&#123;</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;匿名内部类&quot;);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;;</span></span><br><span class="line"><span class="comment">        like.lambda();</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="四、Lambda表达式总结："><a href="#四、Lambda表达式总结：" class="headerlink" title="四、Lambda表达式总结："></a>四、Lambda表达式总结：</h2></li>
<li><h3 id="lambda表达式只能在一行代码的前提下才能简化为一行，其他情况下必须用代码块包裹。"><a href="#lambda表达式只能在一行代码的前提下才能简化为一行，其他情况下必须用代码块包裹。" class="headerlink" title="lambda表达式只能在一行代码的前提下才能简化为一行，其他情况下必须用代码块包裹。"></a>lambda表达式只能在一行代码的前提下才能简化为一行，其他情况下必须用代码块包裹。</h3></li>
<li><h3 id="只能实现函数式接口。"><a href="#只能实现函数式接口。" class="headerlink" title="只能实现函数式接口。"></a>只能实现函数式接口。</h3></li>
<li><h3 id="多个参数可以去掉数据类型，要去掉就全去掉，必须加上括号。"><a href="#多个参数可以去掉数据类型，要去掉就全去掉，必须加上括号。" class="headerlink" title="多个参数可以去掉数据类型，要去掉就全去掉，必须加上括号。"></a>多个参数可以去掉数据类型，要去掉就全去掉，必须加上括号。</h3></li>
</ul>
]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>Java的多态</title>
    <url>/posts/14294.html</url>
    <content><![CDATA[<h1 id="Java的多态"><a href="#Java的多态" class="headerlink" title="Java的多态"></a>Java的多态</h1><h2 id="一、定义-同一种方法根据发送对象的不同二采取多种不同的行为方式。"><a href="#一、定义-同一种方法根据发送对象的不同二采取多种不同的行为方式。" class="headerlink" title="一、定义:同一种方法根据发送对象的不同二采取多种不同的行为方式。"></a>一、定义:同一种方法根据发送对象的不同二采取多种不同的行为方式。</h2><h2 id="二、一个对象的实际类型是确定的，但可以指向对象的引用类型有很多（父类、有关系的类）。"><a href="#二、一个对象的实际类型是确定的，但可以指向对象的引用类型有很多（父类、有关系的类）。" class="headerlink" title="二、一个对象的实际类型是确定的，但可以指向对象的引用类型有很多（父类、有关系的类）。"></a>二、一个对象的实际类型是确定的，但可以指向对象的引用类型有很多（父类、有关系的类）。</h2><a id="more"></a>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210419152826.png"></p>
<h2 id="三、多态存在的条件"><a href="#三、多态存在的条件" class="headerlink" title="三、多态存在的条件:"></a>三、多态存在的条件:</h2><h3 id="1-有继承关系。"><a href="#1-有继承关系。" class="headerlink" title="1. 有继承关系。"></a>1. 有继承关系。</h3><h3 id="2-子类重写父类方法。"><a href="#2-子类重写父类方法。" class="headerlink" title="2. 子类重写父类方法。"></a>2. 子类重写父类方法。</h3><h3 id="3-父类引用指向子类对象。"><a href="#3-父类引用指向子类对象。" class="headerlink" title="3. 父类引用指向子类对象。"></a>3. 父类引用指向子类对象。</h3><h2 id="父类引用指向子类，实例化产生的对象-Person-s1-new-Student"><a href="#父类引用指向子类，实例化产生的对象-Person-s1-new-Student" class="headerlink" title="父类引用指向子类，实例化产生的对象:Person s1 = new Student();"></a>父类引用指向子类，实例化产生的对象:<em>Person s1 = new Student();</em></h2><h3 id="1-该对象-s1-拥有父类的所有方法（若方法被子类重写，则该方法变成重写后的方法）。"><a href="#1-该对象-s1-拥有父类的所有方法（若方法被子类重写，则该方法变成重写后的方法）。" class="headerlink" title="1. 该对象(s1)拥有父类的所有方法（若方法被子类重写，则该方法变成重写后的方法）。"></a>1. 该对象(<em>s1</em>)拥有父类的所有方法（若方法被子类重写，则该方法变成重写后的方法）。</h3><h3 id="2-该对象-s1-拥有子类重写的父类的方法。"><a href="#2-该对象-s1-拥有子类重写的父类的方法。" class="headerlink" title="2. 该对象(s1)拥有子类重写的父类的方法。"></a>2. 该对象(<em>s1</em>)拥有子类重写的父类的方法。</h3><h3 id="3-该对象-s1-没有子类新增加的方法。"><a href="#3-该对象-s1-没有子类新增加的方法。" class="headerlink" title="3. 该对象(s1)没有子类新增加的方法。"></a>3. 该对象(<em>s1</em>)没有子类新增加的方法。</h3><h3 id="4-父类如果想用子类新增的方法可以用强制类型转换将将其转换为子类引用的类型。"><a href="#4-父类如果想用子类新增的方法可以用强制类型转换将将其转换为子类引用的类型。" class="headerlink" title="4. 父类如果想用子类新增的方法可以用强制类型转换将将其转换为子类引用的类型。"></a>4. 父类如果想用子类<em>新增的方法</em>可以用强制类型转换将将其转换为子类引用的类型。</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210419153910.png"></p>
<h2 id="四、多态的注意事项"><a href="#四、多态的注意事项" class="headerlink" title="四、多态的注意事项:"></a>四、多态的注意事项:</h2><h3 id="1-多态是方法的多态，属性没有多态-！！！"><a href="#1-多态是方法的多态，属性没有多态-！！！" class="headerlink" title="1. 多态是方法的多态，属性没有多态 ！！！"></a>1. 多态是方法的多态，属性没有多态 ！！！</h3><h3 id="2-多态必须是父类和子类或者有联系的类之间的关系，否则会类型转换异常（ClassCastException-）"><a href="#2-多态必须是父类和子类或者有联系的类之间的关系，否则会类型转换异常（ClassCastException-）" class="headerlink" title="2. 多态必须是父类和子类或者有联系的类之间的关系，否则会类型转换异常（ClassCastException!）"></a>2. 多态必须是父类和子类或者有联系的类之间的关系，否则会类型转换异常（ClassCastException!）</h3><h3 id="3-多态存在的条件"><a href="#3-多态存在的条件" class="headerlink" title="3. 多态存在的条件:"></a>3. 多态存在的条件:</h3><ul>
<li>必须要有继承关系</li>
<li>方法需要重写</li>
<li>父类引用指向子类 <strong><em>Father f = new Son();</em></strong></li>
</ul>
<h2 id="五、instanceof关键字-Object-instanceof-Class"><a href="#五、instanceof关键字-Object-instanceof-Class" class="headerlink" title="五、instanceof关键字:Object instanceof Class"></a>五、instanceof关键字:<em>Object instanceof Class</em></h2><h3 id="1-instanceof返回值-（X-instanceof-Y）如果X指向的实际类型是Y的子类或者本身，返回True，否则返回False"><a href="#1-instanceof返回值-（X-instanceof-Y）如果X指向的实际类型是Y的子类或者本身，返回True，否则返回False" class="headerlink" title="1. instanceof返回值:（X instanceof Y）如果X指向的实际类型是Y的子类或者本身，返回True，否则返回False"></a>1. instanceof返回值:（X instanceof Y）如果X指向的实际类型是Y的<em>子类或者本身</em>，返回True，否则返回False</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210419163317.png"> </p>
<h3 id="2-instanceof报错情况-（X-instanceof-Y）如果X的引用类和Y类之间没有父子关系，编译器报错"><a href="#2-instanceof报错情况-（X-instanceof-Y）如果X的引用类和Y类之间没有父子关系，编译器报错" class="headerlink" title="2. instanceof报错情况: （X instanceof Y）如果X的引用类和Y类之间没有父子关系，编译器报错"></a>2. instanceof报错情况: （X instanceof Y）如果X的<em>引用类</em>和Y类之间没有父子关系，编译器报错</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210419162822.png"></p>
<h2 id="六、类型转换-（高类型–-gt-父类，低类型–-gt-子类）"><a href="#六、类型转换-（高类型–-gt-父类，低类型–-gt-子类）" class="headerlink" title="六、类型转换 （高类型–&gt;父类，低类型–&gt;子类）"></a>六、类型转换 （高类型–&gt;父类，低类型–&gt;子类）</h2><h3 id="1-高类型转换为低类型需要强制类型转换"><a href="#1-高类型转换为低类型需要强制类型转换" class="headerlink" title="1. 高类型转换为低类型需要强制类型转换"></a>1. 高类型转换为低类型需要强制类型转换</h3><ul>
<li><h4 id="格式-Student-person"><a href="#格式-Student-person" class="headerlink" title="格式:(Student) person;"></a>格式:(Student) person;</h4></li>
<li><h4 id="高类型转换为低类型会获得子类的新增的方法。"><a href="#高类型转换为低类型会获得子类的新增的方法。" class="headerlink" title="高类型转换为低类型会获得子类的新增的方法。"></a>高类型转换为低类型会获得子类的新增的方法。</h4><h3 id="2-低类型转换为高类型可直接转换"><a href="#2-低类型转换为高类型可直接转换" class="headerlink" title="2. 低类型转换为高类型可直接转换"></a>2. 低类型转换为高类型可直接转换</h3></li>
<li><h4 id="Person-person-new-Student"><a href="#Person-person-new-Student" class="headerlink" title="Person person = new Student();"></a>Person person = new Student();</h4></li>
<li><h4 id="低类型转换为高类型会丢失子类新增-的一些方法。"><a href="#低类型转换为高类型会丢失子类新增-的一些方法。" class="headerlink" title="低类型转换为高类型会丢失子类新增 的一些方法。"></a>低类型转换为高类型会丢失子类新增 的一些方法。</h4><h3 id="3-类型转换的意义-方便方法的调用，减少重复的代码，简洁！"><a href="#3-类型转换的意义-方便方法的调用，减少重复的代码，简洁！" class="headerlink" title="3. 类型转换的意义:方便方法的调用，减少重复的代码，简洁！"></a>3. 类型转换的意义:方便方法的调用，减少重复的代码，简洁！</h3></li>
</ul>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Java的多种内部类</title>
    <url>/posts/39461.html</url>
    <content><![CDATA[<h1 id="Java的多种内部类"><a href="#Java的多种内部类" class="headerlink" title="Java的多种内部类"></a>Java的多种内部类</h1><h2 id="1-成员内部类"><a href="#1-成员内部类" class="headerlink" title="1.成员内部类"></a>1.成员内部类</h2><h3 id="1-通过外部类实例化成员内部类"><a href="#1-通过外部类实例化成员内部类" class="headerlink" title="1. 通过外部类实例化成员内部类"></a>1. 通过外部类实例化成员内部类</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210420162757.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210420163344.png"></p>
<a id="more"></a>
<h3 id="2-成员内部类可以获得外部类的-私有属性"><a href="#2-成员内部类可以获得外部类的-私有属性" class="headerlink" title="2. 成员内部类可以获得外部类的 私有属性"></a>2. 成员内部类可以获得外部类的 <strong><em>私有属性</em></strong></h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210420163242.png"></p>
<h2 id="2-静态内部类"><a href="#2-静态内部类" class="headerlink" title="2. 静态内部类"></a>2. 静态内部类</h2><h3 id="用static关键字修饰的内部类"><a href="#用static关键字修饰的内部类" class="headerlink" title="用static关键字修饰的内部类"></a>用static关键字修饰的内部类</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210420164620.png"></p>
<h2 id="3-局部内部类"><a href="#3-局部内部类" class="headerlink" title="3. 局部内部类"></a>3. 局部内部类</h2><h3 id="写在方法区的内部类"><a href="#写在方法区的内部类" class="headerlink" title="写在方法区的内部类"></a>写在方法区的内部类</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210420164801.png"></p>
<h2 id="4-匿名内部类"><a href="#4-匿名内部类" class="headerlink" title="4. 匿名内部类"></a>4. 匿名内部类</h2><h3 id="没有名字初始化类，不用将实例保存到变量中"><a href="#没有名字初始化类，不用将实例保存到变量中" class="headerlink" title="没有名字初始化类，不用将实例保存到变量中"></a>没有名字初始化类，不用将实例保存到变量中</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210420164318.png"></p>
<h3 id="可以用匿名内部类实现接口"><a href="#可以用匿名内部类实现接口" class="headerlink" title="可以用匿名内部类实现接口"></a>可以用匿名内部类实现接口</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210420164406.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210420164417.png"></p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
  </entry>
  <entry>
    <title>Web基本概念</title>
    <url>/posts/10881.html</url>
    <content><![CDATA[<h1 id="Web基本概念"><a href="#Web基本概念" class="headerlink" title="Web基本概念"></a>Web基本概念</h1><h2 id="1、-基本概念"><a href="#1、-基本概念" class="headerlink" title="1、 基本概念"></a>1、 基本概念</h2><h3 id="1-1、前言"><a href="#1-1、前言" class="headerlink" title="1.1、前言"></a>1.1、前言</h3><p>web开发：</p>
<ul>
<li>静态web<ul>
<li>html，css</li>
<li>提供给所有人看的数据始终不发生改变！</li>
</ul>
</li>
<li>动态web<ul>
<li>淘宝，几乎所有的网站；</li>
<li>提供给所有人看的数据始终发生改变，每个人在不同时间，不同地点看到的信息各不相同。</li>
<li>技术栈：<strong>Servlet/JSP</strong> , <strong>ASP</strong>, <strong>PHP</strong></li>
</ul>
</li>
</ul>
<p>在Java中，动态web资源开发的技术统称为JavaWeb。</p>
<a id="more"></a>
<h3 id="1-2、-web应用程序"><a href="#1-2、-web应用程序" class="headerlink" title="1.2、 web应用程序"></a>1.2、 web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序；</p>
<ul>
<li>a.html、b.html等多个web资源可以被外界访问，对外界提供服务；</li>
<li>统一的web资源都会被放在同一个文件夹下，web应用程序–&gt;Tomcat：服务器</li>
<li>一个web应用由多部分组成（静态web，动态web）<ul>
<li>html，css，js</li>
<li>jsp，servlet</li>
<li>java程序</li>
<li>jar包</li>
<li>配置文件（Properties）</li>
</ul>
</li>
</ul>
<p>web应用程序编写完成之后，若想提供给外界访问需要一个服务器进行统一管理。</p>
<h3 id="1-3、静态web"><a href="#1-3、静态web" class="headerlink" title="1.3、静态web"></a>1.3、静态web</h3><ul>
<li>*.htm、 *.html这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/JavaWeb/20210427153352.png"></li>
<li>静态web的缺点<ul>
<li>Web页面无法动态更新，所有用户看到的都是同一个页面<ul>
<li>轮播图，点击特效：伪动态</li>
<li>JavaScript</li>
<li>VBScript</li>
</ul>
</li>
<li>它无法和数据库交互（数据无法持久化，用户无法交互）<h3 id="1-4、动态web"><a href="#1-4、动态web" class="headerlink" title="1.4、动态web"></a>1.4、动态web</h3>页面会动态展示：Web的页面展示效果会因人而异；<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/JavaWeb/20210427154538.png"></li>
</ul>
</li>
<li>缺点<ul>
<li>假如服务器的动态web资源出现错误，我们需要重新编写<strong>后台程序</strong>，重新发布；<ul>
<li>停机维护</li>
</ul>
</li>
</ul>
</li>
<li>优点<ul>
<li>web页面可以动态更新，所有用户看到的都不是同一页面</li>
<li>它可以与数据库交互（数据持久化：注册、商品信息、用户信息……）<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/JavaWeb/20210427155033.png"><h2 id="2、web服务器"><a href="#2、web服务器" class="headerlink" title="2、web服务器"></a>2、web服务器</h2><h3 id="ASP"><a href="#ASP" class="headerlink" title="ASP"></a>ASP</h3></li>
</ul>
</li>
<li>微软：国内最早流行的就是ASP；</li>
<li>在HTML中嵌套了VB的脚本，ASP+COM；</li>
<li>维护成本高</li>
<li>C#</li>
<li>IIS<h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3></li>
<li> PHP开发速度很快，功能很强大，跨平台，代码简单</li>
<li> 无法承受大访问量（局限性）<h3 id="JSP-Servlet"><a href="#JSP-Servlet" class="headerlink" title="JSP/Servlet:"></a>JSP/Servlet:</h3>B/S:浏览器和服务器<br>C/S：客户端和服务器</li>
<li>sun公司主推的B/S架构</li>
<li>基于java语言的</li>
<li>可以承载三高问题带来的影响</li>
<li>语法很像ASP，加强市场强度<h3 id="2-2、web服务器"><a href="#2-2、web服务器" class="headerlink" title="2.2、web服务器"></a>2.2、web服务器</h3>服务器是一种被动的操作，用来处理用户的请求，和给用户一些响应信息。<br>IIS：微软的；Windows自带；ASP<br>Tomcat：开源免费的轻量级web服务器，实际上运行JSP页面和Servlet</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>Tomcat详解</title>
    <url>/posts/35449.html</url>
    <content><![CDATA[<h1 id="Tomcat详解"><a href="#Tomcat详解" class="headerlink" title="Tomcat详解"></a>Tomcat详解</h1><h2 id="1、安装Tomcat"><a href="#1、安装Tomcat" class="headerlink" title="1、安装Tomcat"></a>1、安装Tomcat</h2><h3 id="1-1、下载"><a href="#1-1、下载" class="headerlink" title="1.1、下载"></a>1.1、下载</h3><p>Tomcat官网：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/JavaWeb/20210427162705.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/JavaWeb/20210427162715.png"></p>
<a id="more"></a>
<h3 id="1-2、安装"><a href="#1-2、安装" class="headerlink" title="1.2、安装"></a>1.2、安装</h3><p>解压下载完的压缩包到指定路径。<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/JavaWeb/20210427162936.png"></p>
<h3 id="1-3、配置环境变量（Mac电脑）"><a href="#1-3、配置环境变量（Mac电脑）" class="headerlink" title="1.3、配置环境变量（Mac电脑）"></a>1.3、配置环境变量（Mac电脑）</h3><ul>
<li>在宿主目录下编辑 <strong>.bash_profile</strong> 文件<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/JavaWeb/20210427163358.png"></li>
<li>添加环境变量<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TOMCAT_HOME=/Users/haikez/Environment/apache-tomcat-10.0.5</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$TOMCAT_HOME</span>/bin</span><br></pre></td></tr></table></figure>
<img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/JavaWeb/20210427163438.png"></li>
<li>配置完环境变量就可以在命令行启动Tomcat<h2 id="2、Tomcat的简单使用"><a href="#2、Tomcat的简单使用" class="headerlink" title="2、Tomcat的简单使用"></a>2、Tomcat的简单使用</h2></li>
<li>打开bin目录执行startup文件,就可以启动Tomcat</li>
<li>打开浏览器输入localhost:8080端口就能看到效果<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/JavaWeb/20210427164029.png"></li>
<li>Tomcat会默认展示 <strong>/webapps/ROOT</strong>目录下的index.html<h2 id="3、Tomcat的一些配置"><a href="#3、Tomcat的一些配置" class="headerlink" title="3、Tomcat的一些配置"></a>3、Tomcat的一些配置</h2></li>
<li>Tomcat的核心配置文件为 <strong>/conf/server.xml</strong></li>
<li>通过修改server.xml文件对Tomcat进行配置</li>
<li>更改端口<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/JavaWeb/20210427164958.png"></li>
<li>更改主机<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/JavaWeb/20210427165021.png"><br>更改主机名时需要对本机的主机进行同步修改，Mac电脑下通过修改 <strong>/etc/hosts</strong>文件，将<strong>127.0.0.1</strong>映射到更改的主机名。<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/JavaWeb/20210427165438.png"></li>
<li>Tomcat服务器下网站应有的结构<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/JavaWeb/20210427170032.png"></li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>同步方法和同步块</title>
    <url>/posts/13591.html</url>
    <content><![CDATA[<h1 id="同步方法和同步块-synchronized"><a href="#同步方法和同步块-synchronized" class="headerlink" title="同步方法和同步块(synchronized)"></a>同步方法和同步块(synchronized)</h1><h2 id="一、-同步方法"><a href="#一、-同步方法" class="headerlink" title="一、 同步方法"></a>一、 同步方法</h2><h3 id="1-public-synchronized-void-method"><a href="#1-public-synchronized-void-method" class="headerlink" title="1. public synchronized void method(){}"></a>1. public synchronized void method(){}</h3><p><strong>synchronized</strong>方法控制对 <strong><em>“对象”</em></strong> 的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象锁才能执行。否则会导致阻塞。方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行。</p>
<h3 id="2-若将一个大方法申明为一个synchronized方法，将极大的影响效率。"><a href="#2-若将一个大方法申明为一个synchronized方法，将极大的影响效率。" class="headerlink" title="2. 若将一个大方法申明为一个synchronized方法，将极大的影响效率。"></a>2. 若将一个大方法申明为一个synchronized方法，将极大的影响效率。</h3><a id="more"></a>

<h2 id="二、同步块"><a href="#二、同步块" class="headerlink" title="二、同步块"></a>二、同步块</h2><h3 id="1-synchronized-Obj"><a href="#1-synchronized-Obj" class="headerlink" title="1. synchronized(Obj){}"></a>1. synchronized(Obj){}</h3><ul>
<li><h4 id="Obj（同步监视器）可以是任何对象，但推荐使用共享资源作为同步监视器。"><a href="#Obj（同步监视器）可以是任何对象，但推荐使用共享资源作为同步监视器。" class="headerlink" title="Obj（同步监视器）可以是任何对象，但推荐使用共享资源作为同步监视器。"></a>Obj（同步监视器）可以是任何对象，但推荐使用共享资源作为同步监视器。</h4></li>
<li><h4 id="同步方法中无需指定同步监视器，因为同步方法中的同步监视器就是this，就是这个对象本身，也可以是class。"><a href="#同步方法中无需指定同步监视器，因为同步方法中的同步监视器就是this，就是这个对象本身，也可以是class。" class="headerlink" title="同步方法中无需指定同步监视器，因为同步方法中的同步监视器就是this，就是这个对象本身，也可以是class。"></a>同步方法中无需指定同步监视器，因为同步方法中的同步监视器就是this，就是这个对象本身，也可以是class。</h4><h3 id="2-同步块的Obj就是被修改的对象，方法体的内容为：对这个对象的增删改。"><a href="#2-同步块的Obj就是被修改的对象，方法体的内容为：对这个对象的增删改。" class="headerlink" title="2. 同步块的Obj就是被修改的对象，方法体的内容为：对这个对象的增删改。"></a>2. 同步块的Obj就是被修改的<em>对象</em>，方法体的内容为：对这个对象的<em>增删改</em>。</h3><h2 id="三、使用同步方法和同步块对三个不安全实例的优化。"><a href="#三、使用同步方法和同步块对三个不安全实例的优化。" class="headerlink" title="三、使用同步方法和同步块对三个不安全实例的优化。"></a>三、使用同步方法和同步块对三个不安全实例的优化。</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对于不安全的买票机制，只需要对Buytickets中的buy方法加上synchronized修饰。因为变量ticketNum就是本类中的属性,buy方法也对ticketNum进行修改。</span></span><br><span class="line"><span class="keyword">package</span> demo.study.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBuyTickets</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Buytickets station = <span class="keyword">new</span> Buytickets();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;小红&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;黄牛&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buytickets</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNum = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只需用synchronized对buy方法修饰</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.ticketNum&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;买到了&quot;</span>+ticketNum--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对于不安全的银行机制，不能只是将run方法加个synchronized修饰，因为，run方法的对象是整个Drawing，对Drawing上锁不足以解决资源共享问题。而是使用同步块对account对象进行追踪，并把对account操作的语句添加到方法体中。</span></span><br><span class="line"><span class="keyword">package</span> demo.study.syn;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account(<span class="number">1000</span>,<span class="string">&quot;中国银行&quot;</span>);</span><br><span class="line">        Drawing you = <span class="keyword">new</span> Drawing(account,<span class="number">50</span>,<span class="string">&quot;you&quot;</span>);</span><br><span class="line">        Drawing girlFriend = <span class="keyword">new</span> Drawing(account,<span class="number">100</span>,<span class="string">&quot;girlFriend&quot;</span>);</span><br><span class="line">        you.start();</span><br><span class="line">        girlFriend.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> money, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Account account;</span><br><span class="line">    <span class="keyword">int</span> drawMoney;</span><br><span class="line">    <span class="keyword">int</span> nowMoney;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Drawing</span><span class="params">(Account account,<span class="keyword">int</span> drawMoney,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.account=account;</span><br><span class="line">        <span class="keyword">this</span>.drawMoney=drawMoney;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (account)&#123;</span><br><span class="line">            <span class="keyword">if</span> (account.money-drawMoney&lt;<span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;钱不够了&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            account.money-=drawMoney;</span><br><span class="line">            nowMoney+=drawMoney;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;手里的钱&quot;</span>+nowMoney);</span><br><span class="line">            System.out.println(account.name+<span class="string">&quot;卡内余额&quot;</span>+account.money);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对不安全的list的优化</span></span><br><span class="line"><span class="keyword">package</span> demo.study.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line">                    list.add(Thread.currentThread().getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>Servlet详解</title>
    <url>/posts/34142.html</url>
    <content><![CDATA[<h1 id="Servlet详解"><a href="#Servlet详解" class="headerlink" title="Servlet详解"></a>Servlet详解</h1><h2 id="一、什么是Servlet"><a href="#一、什么是Servlet" class="headerlink" title="一、什么是Servlet"></a>一、什么是Servlet</h2><p>1、Servlet 是 JavaEE 规范之一。规范就是接口<br>2、Servlet 就 JavaWeb 三大组件之一。三大组件分别是：Servlet 程序、Filter 过滤器、Listener 监听器。<br>3、Servlet 是运行在服务器上的一个 java 小程序，它可以接收客户端发送过来的请求，并响应数据给客户端.<br>4、把实现了Servlet接口的Java程序叫做，Servlet。</p>
<a id="more"></a>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210506105752.png"></p>
<h2 id="二、手动实现HelloServlet程序"><a href="#二、手动实现HelloServlet程序" class="headerlink" title="二、手动实现HelloServlet程序"></a>二、手动实现HelloServlet程序</h2><h3 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加Servlet和JSP依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2、编写servlet类继承HttpServlet"><a href="#2、编写servlet类继承HttpServlet" class="headerlink" title="2、编写servlet类继承HttpServlet"></a>2、编写servlet类继承HttpServlet</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//        ServletOutputStream outputStream = resp.getOutputStream();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;进入了doGet&quot;</span>);</span><br><span class="line">        <span class="comment">//设置编码，防止中文乱码，默认是ISO-8859-1</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>); <span class="comment">//ajax异步请求为application/json格式</span></span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        PrintWriter out = resp.getWriter(); <span class="comment">//响应流</span></span><br><span class="line">        out.print(<span class="string">&quot;HelloServlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、到-web-xml-中去配置映射"><a href="#3、到-web-xml-中去配置映射" class="headerlink" title="3、到 web.xml 中去配置映射"></a>3、到 web.xml 中去配置映射</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee</span></span></span><br><span class="line"><span class="tag"><span class="string">https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span> <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- servlet 标签给 Tomcat 配置 Servlet 程序 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--servlet-name 标签 Servlet 程序起一个别名（一般是类名） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet-class 是 Servlet 程序的全类名--&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.nichu.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!--servlet-mapping 标签给2 servlet 程序配置访问地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!--servlet-name 标签的作用是告诉服务器，我当前配置的地址给哪个 Servlet 程序使用--&gt;</span> <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--url-pattern 标签配置访问地址 &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> / 斜杠在服务器解析的时候，表示地址为：http://ip:port/工程路径 &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> /hello 表示地址为：http://ip:port/工程路径/hello &lt;br/&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4、配置Tomcat"><a href="#4、配置Tomcat" class="headerlink" title="4、配置Tomcat"></a>4、配置Tomcat</h3><h3 id="5、启动项目，访问路径"><a href="#5、启动项目，访问路径" class="headerlink" title="5、启动项目，访问路径"></a>5、启动项目，访问路径</h3><h2 id="三、Servlet原理"><a href="#三、Servlet原理" class="headerlink" title="三、Servlet原理"></a>三、Servlet原理</h2><p>Servlet是由Web服务器调用，web服务器在收到浏览器请求之后，会：<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210506110549.png"></p>
<h2 id="四、Mapping问题"><a href="#四、Mapping问题" class="headerlink" title="四、Mapping问题"></a>四、Mapping问题</h2><h3 id="1-一个Servlet可以指定一个映射路径"><a href="#1-一个Servlet可以指定一个映射路径" class="headerlink" title="1. 一个Servlet可以指定一个映射路径"></a>1. 一个Servlet可以指定一个映射路径</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-一个Servlet可以指定多个映射路径"><a href="#2-一个Servlet可以指定多个映射路径" class="headerlink" title="2. 一个Servlet可以指定多个映射路径"></a>2. 一个Servlet可以指定多个映射路径</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello3<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello4<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello5<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-一个Servlet可以指定通用映射路径"><a href="#3-一个Servlet可以指定通用映射路径" class="headerlink" title="3. 一个Servlet可以指定通用映射路径"></a>3. 一个Servlet可以指定通用映射路径</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-默认请求路径"><a href="#4-默认请求路径" class="headerlink" title="4. 默认请求路径"></a>4. 默认请求路径</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--默认请求路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="5-指定一些后缀或者前缀等等…"><a href="#5-指定一些后缀或者前缀等等…" class="headerlink" title="5. 指定一些后缀或者前缀等等…."></a>5. 指定一些后缀或者前缀等等….</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以自定义后缀实现请求映射</span></span><br><span class="line"><span class="comment">    注意点，*前面不能加项目映射的路径</span></span><br><span class="line"><span class="comment">    hello/sajdlkajda.nichu</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.nichu<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="6-优先级问题"><a href="#6-优先级问题" class="headerlink" title="6. 优先级问题"></a>6. 优先级问题</h3><p>指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求（404）；</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--404--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.ErrorServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>error<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="五、ServletContext"><a href="#五、ServletContext" class="headerlink" title="五、ServletContext"></a>五、ServletContext</h2><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用</p>
<h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h3><h3 id="1-共享数据"><a href="#1-共享数据" class="headerlink" title="1. 共享数据"></a>1. 共享数据</h3><ul>
<li>在一个Servlet中写入的数据，在另一个Servlet中可以访问。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.print(<span class="string">&quot;hello,Servlet&quot;</span>);</span><br><span class="line">        ServletContext contest = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String name=<span class="string">&quot;倪矗&quot;</span>;</span><br><span class="line">        contest.setAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        String name = (String) context.getAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">&quot;name:&quot;</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-获得初始化参数"><a href="#2-获得初始化参数" class="headerlink" title="2. 获得初始化参数"></a>2. 获得初始化参数</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  配置一下web应用初始化参数--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:mysql://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 添加映射 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.nichu.servlet.Servlet03<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/DB<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet03</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建context对象</span></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">//获得初始化参数</span></span><br><span class="line">        String url = context.getInitParameter(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">        resp.getWriter().println(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-请求转发-getRequestDispatcher"><a href="#3-请求转发-getRequestDispatcher" class="headerlink" title="3. 请求转发(getRequestDispatcher)"></a>3. 请求转发(getRequestDispatcher)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servlet04</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">//获得请求转发的路径</span></span><br><span class="line">        RequestDispatcher requestDispatcher = context.getRequestDispatcher(<span class="string">&quot;/DB&quot;</span>);</span><br><span class="line">        <span class="comment">//调用forward方法实现请求转发</span></span><br><span class="line">        requestDispatcher.forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-读取资源文件"><a href="#4-读取资源文件" class="headerlink" title="4. 读取资源文件"></a>4. 读取资源文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建properties文件</span></span><br><span class="line">username=root</span><br><span class="line">password=<span class="number">12354654</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">//以流的方式获取资源文件</span></span><br><span class="line">    InputStream is = context.getResourceAsStream(<span class="string">&quot;/WEB-INF/classes/db.properties&quot;</span>);</span><br><span class="line">        <span class="comment">//新建Properties对象</span></span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//加载得到的流</span></span><br><span class="line">    properties.load(is);</span><br><span class="line">        <span class="comment">//从流中获取指定参数</span></span><br><span class="line">    String usr = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    String pwd = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    resp.getWriter().println(usr+<span class="string">&quot;:&quot;</span>+pwd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
访问测试即可；</li>
</ul>
<h2 id="五、HttpServletResponse"><a href="#五、HttpServletResponse" class="headerlink" title="五、HttpServletResponse"></a>五、HttpServletResponse</h2><p>web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse；</p>
<ul>
<li>如果要获取客户端请求过来的参数：找HttpServletRequest</li>
<li>如果要给客户端响应一些信息：找HttpServletResponse</li>
</ul>
<h3 id="1-简单分类"><a href="#1-简单分类" class="headerlink" title="1. 简单分类"></a>1. 简单分类</h3><p>负责向浏览器发送数据的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="function">PrintWriter <span class="title">getWriter</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>
<p>负责向浏览器发送响应头的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCharacterEncoding</span><span class="params">(String var1)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLength</span><span class="params">(<span class="keyword">int</span> var1)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLengthLong</span><span class="params">(<span class="keyword">long</span> var1)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentType</span><span class="params">(String var1)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br></pre></td></tr></table></figure>
<p>响应的状态码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> SC_CONTINUE = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SWITCHING_PROTOCOLS = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">int</span> SC_OK = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CREATED = <span class="number">201</span>;</span><br><span class="line"><span class="keyword">int</span> SC_ACCEPTED = <span class="number">202</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class="number">203</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NO_CONTENT = <span class="number">204</span>;</span><br><span class="line"><span class="keyword">int</span> SC_RESET_CONTENT = <span class="number">205</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PARTIAL_CONTENT = <span class="number">206</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MULTIPLE_CHOICES = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_PERMANENTLY = <span class="number">301</span>;</span><br><span class="line"><span class="keyword">int</span> SC_MOVED_TEMPORARILY = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FOUND = <span class="number">302</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SEE_OTHER = <span class="number">303</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_MODIFIED = <span class="number">304</span>;</span><br><span class="line"><span class="keyword">int</span> SC_USE_PROXY = <span class="number">305</span>;</span><br><span class="line"><span class="keyword">int</span> SC_TEMPORARY_REDIRECT = <span class="number">307</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_REQUEST = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNAUTHORIZED = <span class="number">401</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PAYMENT_REQUIRED = <span class="number">402</span>;</span><br><span class="line"><span class="keyword">int</span> SC_FORBIDDEN = <span class="number">403</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_FOUND = <span class="number">404</span>;</span><br><span class="line"><span class="keyword">int</span> SC_METHOD_NOT_ALLOWED = <span class="number">405</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_ACCEPTABLE = <span class="number">406</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class="number">407</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_TIMEOUT = <span class="number">408</span>;</span><br><span class="line"><span class="keyword">int</span> SC_CONFLICT = <span class="number">409</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GONE = <span class="number">410</span>;</span><br><span class="line"><span class="keyword">int</span> SC_LENGTH_REQUIRED = <span class="number">411</span>;</span><br><span class="line"><span class="keyword">int</span> SC_PRECONDITION_FAILED = <span class="number">412</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_ENTITY_TOO_LARGE = <span class="number">413</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUEST_URI_TOO_LONG = <span class="number">414</span>;</span><br><span class="line"><span class="keyword">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class="number">415</span>;</span><br><span class="line"><span class="keyword">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class="number">416</span>;</span><br><span class="line"><span class="keyword">int</span> SC_EXPECTATION_FAILED = <span class="number">417</span>;</span><br><span class="line"><span class="keyword">int</span> SC_INTERNAL_SERVER_ERROR = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> SC_NOT_IMPLEMENTED = <span class="number">501</span>;</span><br><span class="line"><span class="keyword">int</span> SC_BAD_GATEWAY = <span class="number">502</span>;</span><br><span class="line"><span class="keyword">int</span> SC_SERVICE_UNAVAILABLE = <span class="number">503</span>;</span><br><span class="line"><span class="keyword">int</span> SC_GATEWAY_TIMEOUT = <span class="number">504</span>;</span><br><span class="line"><span class="keyword">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class="number">505</span>;</span><br></pre></td></tr></table></figure>
<h3 id="2-下载文件"><a href="#2-下载文件" class="headerlink" title="2. 下载文件"></a>2. 下载文件</h3><ol>
<li>要获取下载文件的路径</li>
<li>下载的文件名是啥？</li>
<li>设置想办法让浏览器能够支持下载我们需要的东西</li>
<li>获取下载文件的输入流</li>
<li>创建缓冲区</li>
<li>获取OutputStream对象</li>
<li>将FileOutputStream流写入到buffer缓冲区</li>
<li>使用OutputStream将缓冲区中的数据输出到客户端！</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//1.获取下载文件的路径</span></span><br><span class="line">    String realPath =<span class="string">&quot;/Users/haikez/Desktop/javaweb/javaweb-01-servlet/javaweb-02-servlet/src/main/resources/1.png&quot;</span>;</span><br><span class="line">    <span class="comment">//2.获取要下载的文件名</span></span><br><span class="line">    String filename = realPath.substring(realPath.lastIndexOf(<span class="string">&quot;/&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//3.设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码</span></span><br><span class="line">    resp.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+ URLEncoder.encode(filename,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    <span class="comment">//4.获取下载文件的输入流</span></span><br><span class="line">    FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(realPath));</span><br><span class="line">    <span class="comment">//5.创建缓冲区</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="comment">//6.获取OutputStream对象</span></span><br><span class="line">    ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">    <span class="comment">//7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！</span></span><br><span class="line">    <span class="keyword">while</span> ((len=in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        out.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    in.close();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-验证码功能"><a href="#4-验证码功能" class="headerlink" title="4. 验证码功能"></a>4. 验证码功能</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//如何让浏览器3秒自动刷新一次;</span></span><br><span class="line">        resp.setHeader(<span class="string">&quot;refresh&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="comment">//在内存中创建一个图片</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(<span class="number">80</span>,<span class="number">20</span>,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="comment">//得到图片</span></span><br><span class="line">        Graphics2D g = (Graphics2D) image.getGraphics(); <span class="comment">//笔</span></span><br><span class="line">        <span class="comment">//设置图片的背景颜色</span></span><br><span class="line">        g.setColor(Color.white);</span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">80</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//给图片写数据</span></span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>,Font.BOLD,<span class="number">20</span>));</span><br><span class="line">        g.drawString(makeNum(),<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//告诉浏览器，这个请求用图片的方式打开</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">        <span class="comment">//网站存在缓存，不让浏览器缓存</span></span><br><span class="line">        resp.setDateHeader(<span class="string">&quot;expires&quot;</span>,-<span class="number">1</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Cache-Control&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        resp.setHeader(<span class="string">&quot;Pragma&quot;</span>,<span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line">        <span class="comment">//把图片写给浏览器</span></span><br><span class="line">        ImageIO.write(image,<span class="string">&quot;jpg&quot;</span>, resp.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成随机数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">makeNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        String num = random.nextInt(<span class="number">9999999</span>) + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>-num.length() ; i++) &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        num = sb.toString() + num;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-实现重定向-resp-sendRedirect-“-r-success-jsp”"><a href="#5-实现重定向-resp-sendRedirect-“-r-success-jsp”" class="headerlink" title="5. 实现重定向(resp.sendRedirect(“/r/success.jsp”))"></a>5. 实现重定向(resp.sendRedirect(“/r/success.jsp”))</h3><p><img src="https://gitee.com/xiaoyu-98/blogImage/raw/master/img/image-20210320172123691.png"><br>B一个web资源收到客户端A请求后，B会通知A去访问另外一个web资源C，这个过程叫重定向。<br>常见场景：</p>
<ul>
<li>用户登录</li>
</ul>
<h4 id="重定向和转发的区别？"><a href="#重定向和转发的区别？" class="headerlink" title="重定向和转发的区别？"></a>重定向和转发的区别？</h4><ul>
<li>请求转发url不会产生变化，重定向会发生变化</li>
<li>请求转发可以携带参数，重定向不能携带参数</li>
<li>请求转发只能发送一个请求，重定向至少发送两次请求</li>
</ul>
<h4 id="简单实现登录重定向"><a href="#简单实现登录重定向" class="headerlink" title="简单实现登录重定向:"></a>简单实现登录重定向:</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--这里提交的路径，需要寻找到项目的路径--%&gt;</span><br><span class="line">&lt;%--$&#123;pageContext.request.contextPath&#125;代表当前的项目--%&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/login&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">    密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//处理请求</span></span><br><span class="line">    String username = req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    String password = req.getParameter(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    System.out.println(username+<span class="string">&quot;:&quot;</span>+password);</span><br><span class="line">    <span class="comment">//重定向时候一定要注意，路径问题，否则404；</span></span><br><span class="line">    resp.sendRedirect(<span class="string">&quot;/r/success.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>requset<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.RequestTest<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>requset<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>




<h2 id="六、HttpServletRequest"><a href="#六、HttpServletRequest" class="headerlink" title="六、HttpServletRequest"></a>六、HttpServletRequest</h2><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这个HttpServletRequest的方法，获得客户端的所有信息；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/req&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReqServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;url路径：&quot;</span>+req.getRequestURL());</span><br><span class="line">        System.out.println(<span class="string">&quot;uri路径：&quot;</span>+req.getRequestURI());</span><br><span class="line">        System.out.println(<span class="string">&quot;context路径：&quot;</span>+req.getContextPath());</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;/file&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/xiaoyu-98/blogImage/raw/master/img/image-20210320180403649.png"></p>
<blockquote>
<p><strong><em><a href="https://www.kuangstudy.com/bbs/1386537787443974146">狂笔记</a></em></strong></p>
</blockquote>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>线程的五大状态</title>
    <url>/posts/46944.html</url>
    <content><![CDATA[<h1 id="线程的五大状态"><a href="#线程的五大状态" class="headerlink" title="线程的五大状态"></a>线程的五大状态</h1><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210422193657.png"></p>
<a id="more"></a>
<h1 id="操作线程的方法"><a href="#操作线程的方法" class="headerlink" title="操作线程的方法"></a>操作线程的方法</h1><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210422193901.png"></p>
<h2 id="一、线程的停止-stop"><a href="#一、线程的停止-stop" class="headerlink" title="一、线程的停止_stop()"></a>一、线程的停止_stop()</h2><h3 id="建议手动在线程中写stop-方法"><a href="#建议手动在线程中写stop-方法" class="headerlink" title="建议手动在线程中写stop()方法"></a>建议手动在线程中写stop()方法</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210422194057.png"></p>
<h2 id="二、线程的休眠-sleep"><a href="#二、线程的休眠-sleep" class="headerlink" title="二、线程的休眠_sleep()"></a>二、线程的休眠_sleep()</h2><h3 id="1-sleep-方法会导致线程阻塞，必须等到时间结束过后线程才能继续执行。"><a href="#1-sleep-方法会导致线程阻塞，必须等到时间结束过后线程才能继续执行。" class="headerlink" title="1. sleep()方法会导致线程阻塞，必须等到时间结束过后线程才能继续执行。"></a>1. sleep()方法会导致线程<em>阻塞</em>，必须等到时间结束过后线程才能继续执行。</h3><h3 id="2-使用：Thread-sleep-1000"><a href="#2-使用：Thread-sleep-1000" class="headerlink" title="2. 使用：Thread.sleep(1000);"></a>2. 使用：Thread.sleep(1000);</h3><h3 id="3-使用时需要加上异常处理"><a href="#3-使用时需要加上异常处理" class="headerlink" title="3. 使用时需要加上异常处理"></a>3. 使用时需要加上异常处理</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210423102725.png"></p>
<h2 id="三、线程的礼让-yield"><a href="#三、线程的礼让-yield" class="headerlink" title="三、线程的礼让_yield()"></a>三、线程的礼让_yield()</h2><h3 id="1-使用：Thread-yield"><a href="#1-使用：Thread-yield" class="headerlink" title="1. 使用：Thread.yield();"></a>1. 使用：Thread.yield();</h3><h3 id="2-线程的礼让是让当前线程回到就绪状态，等待CPU调度，相当于回到同一起跑线。"><a href="#2-线程的礼让是让当前线程回到就绪状态，等待CPU调度，相当于回到同一起跑线。" class="headerlink" title="2. 线程的礼让是让当前线程回到就绪状态，等待CPU调度，相当于回到同一起跑线。"></a>2. 线程的礼让是让当前线程回到就绪状态，等待CPU调度，相当于回到同一起跑线。</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210423101047.png"></p>
<h2 id="四、线程的强制执行-join"><a href="#四、线程的强制执行-join" class="headerlink" title="四、线程的强制执行_join()"></a>四、线程的强制执行_join()</h2><h3 id="1-使用：线程类对象-join"><a href="#1-使用：线程类对象-join" class="headerlink" title="1. 使用：线程类对象.join();"></a>1. 使用：线程类对象.join();</h3><h3 id="2-线程的强制执行会导致别的线程阻塞，直到插入的线程完成过后，其余线程才会继续执行。"><a href="#2-线程的强制执行会导致别的线程阻塞，直到插入的线程完成过后，其余线程才会继续执行。" class="headerlink" title="2. 线程的强制执行会导致别的线程阻塞，直到插入的线程完成过后，其余线程才会继续执行。"></a>2. 线程的强制执行会导致别的线程阻塞，直到插入的线程完成过后，其余线程才会继续执行。</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210423102208.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210423102257.png"></p>
<blockquote>
<p>直到插入的线程执行完毕，其余线程才能继续执行。</p>
</blockquote>
<h2 id="五、观测线程状态-Thread-State"><a href="#五、观测线程状态-Thread-State" class="headerlink" title="五、观测线程状态(Thread.State)"></a>五、观测线程状态(Thread.State)</h2><h3 id="使用：线程类对象-getState"><a href="#使用：线程类对象-getState" class="headerlink" title="使用：线程类对象.getState();"></a>使用：线程类对象.getState();</h3><h3 id="返回值类型：Thread-State"><a href="#返回值类型：Thread-State" class="headerlink" title="返回值类型：Thread.State"></a>返回值类型：Thread.State</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210423112056.png"></p>
]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>线程的优先级和守护线程</title>
    <url>/posts/25474.html</url>
    <content><![CDATA[<h1 id="线程的优先级和守护线程"><a href="#线程的优先级和守护线程" class="headerlink" title="线程的优先级和守护线程"></a>线程的优先级和守护线程</h1><h2 id="一、设置线程优先级：线程类对象-setPriority-int-xxx"><a href="#一、设置线程优先级：线程类对象-setPriority-int-xxx" class="headerlink" title="一、设置线程优先级：线程类对象.setPriority(int xxx);"></a>一、设置线程优先级：线程类对象.setPriority(int xxx);</h2><h3 id="1-线程优先级范围：1-10。"><a href="#1-线程优先级范围：1-10。" class="headerlink" title="1. 线程优先级范围：1~10。"></a>1. 线程优先级范围：1~10。</h3><h3 id="2-先设置线程优先级后启动线程。"><a href="#2-先设置线程优先级后启动线程。" class="headerlink" title="2. 先设置线程优先级后启动线程。"></a>2. 先设置线程优先级后启动线程。</h3><h3 id="3-线程优先级高的说明被CPU调度的概率高-具体调度顺序还是靠CPU调度。"><a href="#3-线程优先级高的说明被CPU调度的概率高-具体调度顺序还是靠CPU调度。" class="headerlink" title="3. 线程优先级高的说明被CPU调度的概率高,具体调度顺序还是靠CPU调度。"></a>3. 线程优先级高的说明被CPU调度的概率高,具体调度顺序还是靠CPU调度。</h3><h3 id="4-获取线程优先级"><a href="#4-获取线程优先级" class="headerlink" title="4. 获取线程优先级:"></a>4. 获取线程优先级:<img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210425113142.png"></h3><a id="more"></a>
<h3 id="5-案例："><a href="#5-案例：" class="headerlink" title="5. 案例："></a>5. 案例：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.study.ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPriority</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Priority priority = <span class="keyword">new</span> Priority();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(priority);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(priority);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(priority);</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(priority);</span><br><span class="line">        Thread t5 = <span class="keyword">new</span> Thread(priority);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line">        t2.setPriority(<span class="number">4</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.setPriority(<span class="number">7</span>);</span><br><span class="line">        t3.start();</span><br><span class="line">        t4.setPriority(<span class="number">10</span>);</span><br><span class="line">        t4.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Priority</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二、守护-daemon-线程"><a href="#二、守护-daemon-线程" class="headerlink" title="二、守护(daemon)线程"></a>二、守护(daemon)线程</h1><h2 id="1-线程分为用户线程和守护线程。"><a href="#1-线程分为用户线程和守护线程。" class="headerlink" title="1. 线程分为用户线程和守护线程。"></a>1. 线程分为用户线程和守护线程。</h2><h2 id="2-虚拟机必须确保用户线程执行完毕。"><a href="#2-虚拟机必须确保用户线程执行完毕。" class="headerlink" title="2. 虚拟机必须确保用户线程执行完毕。"></a>2. 虚拟机必须确保用户线程执行完毕。</h2><h2 id="3-虚拟机不必等待守护线程执行完毕。"><a href="#3-虚拟机不必等待守护线程执行完毕。" class="headerlink" title="3. 虚拟机不必等待守护线程执行完毕。"></a>3. 虚拟机不必等待守护线程执行完毕。</h2><h2 id="4-创建守护线程：线程类对象-setDaemon-true-参数默认为false代表用户线程。"><a href="#4-创建守护线程：线程类对象-setDaemon-true-参数默认为false代表用户线程。" class="headerlink" title="4. 创建守护线程：线程类对象.setDaemon(true);参数默认为false代表用户线程。"></a>4. 创建守护线程：线程类对象.setDaemon(true);参数默认为false代表用户线程。</h2><h2 id="5-案例：-1"><a href="#5-案例：-1" class="headerlink" title="5. 案例："></a>5. 案例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.study.ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDaeom</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t1=<span class="keyword">new</span> Thread(<span class="keyword">new</span> You());</span><br><span class="line">        Thread t2=<span class="keyword">new</span> Thread(<span class="keyword">new</span> God());</span><br><span class="line">        t2.setDaemon(<span class="keyword">true</span>); <span class="comment">//创建守护线程，参数为true。</span></span><br><span class="line">        t2.start();</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建You为用户线程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">365</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你快乐的活着&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;goodbye&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建God为守护线程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">God</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;上帝保佑你🙏&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>线程的创建之实现Runnable接口</title>
    <url>/posts/11713.html</url>
    <content><![CDATA[<h1 id="线程的创建之实现Runnable接口"><a href="#线程的创建之实现Runnable接口" class="headerlink" title="线程的创建之实现Runnable接口"></a>线程的创建之实现Runnable接口</h1><h2 id="一、实现步骤"><a href="#一、实现步骤" class="headerlink" title="一、实现步骤:"></a>一、实现步骤:</h2><h3 id="1-创建实现类实现Runnable接口。"><a href="#1-创建实现类实现Runnable接口。" class="headerlink" title="1. 创建实现类实现Runnable接口。"></a>1. 创建实现类实现Runnable接口。</h3><h3 id="2-实现Runnable接口中的run-方法。"><a href="#2-实现Runnable接口中的run-方法。" class="headerlink" title="2. 实现Runnable接口中的run()方法。"></a>2. 实现Runnable接口中的run()方法。</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210422152108.png"></p>
<a id="more"></a>
<h3 id="3-创建实现类对象。"><a href="#3-创建实现类对象。" class="headerlink" title="3. 创建实现类对象。"></a>3. 创建实现类对象。</h3><h3 id="4-将-实现类对象-丢入Thread类对象中直接运行。new-Thread-t1-start"><a href="#4-将-实现类对象-丢入Thread类对象中直接运行。new-Thread-t1-start" class="headerlink" title="4. 将 实现类对象 丢入Thread类对象中直接运行。new Thread(t1).start;"></a>4. 将 <em>实现类对象</em> 丢入Thread类对象中直接运行。<em>new Thread(t1).start;</em></h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210422152122.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210422152200.png"></p>
<h2 id="二、线程延迟执行（模拟延迟）"><a href="#二、线程延迟执行（模拟延迟）" class="headerlink" title="二、线程延迟执行（模拟延迟）"></a>二、线程延迟执行（模拟延迟）</h2><h3 id="可以用Thread类中的sleep方法实现线程延迟执行单位-ms-，但是需要对其进行异常处理。"><a href="#可以用Thread类中的sleep方法实现线程延迟执行单位-ms-，但是需要对其进行异常处理。" class="headerlink" title="可以用Thread类中的sleep方法实现线程延迟执行单位 (ms)，但是需要对其进行异常处理。"></a>可以用Thread类中的sleep方法实现线程延迟执行单位 (ms)，但是需要对其进行异常处理。</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210422152521.png"></p>
<h2 id="三、对比Thread继承创建线程的优势-避免单继承的局限性，方便同一个对象被多个线程同时使用。"><a href="#三、对比Thread继承创建线程的优势-避免单继承的局限性，方便同一个对象被多个线程同时使用。" class="headerlink" title="三、对比Thread继承创建线程的优势:避免单继承的局限性，方便同一个对象被多个线程同时使用。"></a>三、对比Thread继承创建线程的优势:避免单继承的局限性，方便同一个对象被多个线程同时使用。</h2><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210422154507.png"></p>
<blockquote>
<p>可以用 <strong>Thread.currentThread().getName()</strong> 获取线程的名字。上图实现了多个线程操作同一个对象。</p>
</blockquote>
<blockquote>
<p>注意:多线程调用同一个对象时会同时占用该对象的资源。<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210422154909.png"></p>
</blockquote>
]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>线程协作之生产者消费者模型</title>
    <url>/posts/1709.html</url>
    <content><![CDATA[<h1 id="线程协作之生产者消费者模型"><a href="#线程协作之生产者消费者模型" class="headerlink" title="线程协作之生产者消费者模型"></a>线程协作之生产者消费者模型</h1><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210505143357.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210505143413.png"></p>
<a id="more"></a>
<h3 id="生产者和消费者共同协助，管理一块缓冲区"><a href="#生产者和消费者共同协助，管理一块缓冲区" class="headerlink" title="生产者和消费者共同协助，管理一块缓冲区"></a>生产者和消费者共同协助，管理一块缓冲区</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.study.ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynContainer container = <span class="keyword">new</span> SynContainer();</span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer(container);</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer(container);</span><br><span class="line">        consumer.start();</span><br><span class="line">        producer.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chicken</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chicken</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    SynContainer container = <span class="keyword">new</span> SynContainer();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(SynContainer container)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container=container;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;生产了&quot;</span>+i+<span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                container.push(<span class="keyword">new</span> Chicken(i));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    SynContainer container = <span class="keyword">new</span> SynContainer();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(SynContainer container)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container=container;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;消费了&quot;</span>+ <span class="keyword">this</span>.container.pop().id+<span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//容器（缓冲区）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynContainer</span></span>&#123;</span><br><span class="line">    Chicken[] chickens=<span class="keyword">new</span> Chicken[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//添加鸡</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Chicken chicken)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//如果鸡的数量等于容器大小（容器满）</span></span><br><span class="line">        <span class="keyword">if</span> (count==chickens.length)&#123;</span><br><span class="line">            <span class="comment">//生产者等待</span></span><br><span class="line">            <span class="keyword">this</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通知消费者消费</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        chickens[count]=chicken;</span><br><span class="line">        count++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Chicken <span class="title">pop</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//通知生产者生产</span></span><br><span class="line">            notifyAll();</span><br><span class="line">            <span class="comment">//消费者等待</span></span><br><span class="line">            wait();</span><br><span class="line">        &#125;</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">return</span> chickens[count];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>进程、线程与多线程</title>
    <url>/posts/44842.html</url>
    <content><![CDATA[<h1 id="进程、线程与多线程"><a href="#进程、线程与多线程" class="headerlink" title="进程、线程与多线程"></a>进程、线程与多线程</h1><h2 id="1-进程（Process）：程序的一次执行过程。"><a href="#1-进程（Process）：程序的一次执行过程。" class="headerlink" title="1. 进程（Process）：程序的一次执行过程。"></a>1. 进程（Process）：程序的一次执行过程。</h2><h2 id="2-线程（Thread）：是操作系统能够进行运算调度的最小单位，是独立调度和分派的基本单位。一条线程指的是进程中一个单一顺序的控制流。"><a href="#2-线程（Thread）：是操作系统能够进行运算调度的最小单位，是独立调度和分派的基本单位。一条线程指的是进程中一个单一顺序的控制流。" class="headerlink" title="2. 线程（Thread）：是操作系统能够进行运算调度的最小单位，是独立调度和分派的基本单位。一条线程指的是进程中一个单一顺序的控制流。"></a>2. 线程（Thread）：是操作系统能够进行运算调度的最小单位，是独立调度和分派的基本单位。一条线程指的是进程中一个单一顺序的控制流。</h2><h2 id="3-多线程：多个线程并发执行。"><a href="#3-多线程：多个线程并发执行。" class="headerlink" title="3. 多线程：多个线程并发执行。"></a>3. 多线程：多个线程并发执行。</h2><a id="more"></a>
<h2 id="4-进程和线程的关系："><a href="#4-进程和线程的关系：" class="headerlink" title="4. 进程和线程的关系："></a>4. 进程和线程的关系：</h2><ul>
<li>一个进程可以有很多线程，每条线程并行执行不同的任务。</li>
<li>同一进程中的多条线程将共享该进程中的全部系统资源，如虚拟地址空间，文件描述符和信号处理等等。</li>
</ul>
<h2 id="5-多线程的一些知识点"><a href="#5-多线程的一些知识点" class="headerlink" title="5.  多线程的一些知识点:"></a>5.  多线程的一些知识点:</h2><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210421163249.png"></p>
]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>Cookie和Session</title>
    <url>/posts/37497.html</url>
    <content><![CDATA[<h1 id="Cookie和Session"><a href="#Cookie和Session" class="headerlink" title="Cookie和Session"></a>Cookie和Session</h1><h2 id="一、会话"><a href="#一、会话" class="headerlink" title="一、会话"></a>一、会话</h2><h3 id="1-会话：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；"><a href="#1-会话：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；" class="headerlink" title="1. 会话：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；"></a>1. 会话：用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；</h3><h3 id="2-有状态会话：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；"><a href="#2-有状态会话：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；" class="headerlink" title="2. 有状态会话：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；"></a>2. 有状态会话：一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；</h3><h2 id="二、保存会话的两种技术"><a href="#二、保存会话的两种技术" class="headerlink" title="二、保存会话的两种技术"></a>二、保存会话的两种技术</h2><p><strong>cookie</strong></p>
<ul>
<li>客户端技术（响应、请求）</li>
</ul>
<p><strong>session</strong></p>
<ul>
<li>服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session中！<a id="more"></a>
<h2 id="三、Cookie"><a href="#三、Cookie" class="headerlink" title="三、Cookie"></a>三、Cookie</h2><h3 id="cookie：一般会保存在本地的-用户目录下-appdata；"><a href="#cookie：一般会保存在本地的-用户目录下-appdata；" class="headerlink" title="cookie：一般会保存在本地的 用户目录下 appdata；"></a>cookie：一般会保存在本地的 用户目录下 appdata；</h3></li>
</ul>
<p>一个网站cookie是否存在上限！聊聊细节问题</p>
<ul>
<li>一个Cookie只能保存一个信息；</li>
<li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；</li>
<li>Cookie大小有限制4kb；</li>
<li>300个cookie浏览器上限</li>
</ul>
<h3 id="删除Cookie；"><a href="#删除Cookie；" class="headerlink" title="删除Cookie；"></a>删除Cookie；</h3><ul>
<li>不设置有效期，关闭浏览器，自动失效；（默认）</li>
<li>设置有效期时间为 0 ；</li>
</ul>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul>
<li>cookie默认有效期是在浏览器关闭后失效，如果设置了有效期就在过期后失效</li>
</ul>
<h3 id="Cookie的使用"><a href="#Cookie的使用" class="headerlink" title="Cookie的使用:"></a>Cookie的使用:</h3><ol>
<li>从请求中拿到cookie信息<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies(); <span class="comment">//从请求中获得Cookie</span></span><br><span class="line">Cookie cookie=cookies[i];</span><br><span class="line">cookie.getName(); <span class="comment">//获得cookie的key</span></span><br><span class="line">cookie.getValue();<span class="comment">//获得cookie的value</span></span><br></pre></td></tr></table></figure></li>
<li>服务器响应给客户端cookie<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;倪矗&quot;</span>);<span class="comment">//创建一个cookie</span></span><br><span class="line">resp.addCookie(cookie); <span class="comment">//向响应中添加cookie</span></span><br></pre></td></tr></table></figure></li>
<li>设置cookie的有效期<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);<span class="comment">//以秒为单位</span></span><br><span class="line"><span class="comment">//将cookie的有效期设置为0，cookie立马失效</span></span><br><span class="line">cookies[i].setMaxAge(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<h3 id="一个cookie案例：获得用户访问时间"><a href="#一个cookie案例：获得用户访问时间" class="headerlink" title="一个cookie案例：获得用户访问时间"></a>一个cookie案例：获得用户访问时间</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">//服务器，告诉你你来的时间，把这个时间封装成为一个 信件，你下次带来我就知道你来了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//解决乱码问题</span></span><br><span class="line">    resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">    req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">    PrintWriter out = resp.getWriter();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Cookie服务器端从客户端获取,从请求里面拿到Cookie</span></span><br><span class="line">    Cookie[] cookies = req.getCookies();<span class="comment">//这里返回数组说明Cookie可能存在多个</span></span><br><span class="line">    <span class="comment">//判断Cookie是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (cookies!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//如果存在怎么办</span></span><br><span class="line">        out.write(<span class="string">&quot;你上一次访问的时间是：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line">            Cookie cookie=cookies[i];</span><br><span class="line">            <span class="comment">//获得cookie的名字</span></span><br><span class="line">            <span class="keyword">if</span> (cookie.getName().equals(<span class="string">&quot;LastLoginTime&quot;</span>))&#123;</span><br><span class="line">                <span class="comment">//获取value的值并转化为长整型</span></span><br><span class="line">                <span class="keyword">long</span> LastLoginTime = Long.parseLong(cookie.getValue());</span><br><span class="line">                <span class="comment">//将时间戳转化并输出</span></span><br><span class="line">                Date date = <span class="keyword">new</span> Date(LastLoginTime);</span><br><span class="line">                out.write(date.toLocaleString());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        out.println(<span class="string">&quot;这是您第一次访问本站&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//服务器给客户端响应一个Cookie</span></span><br><span class="line">    Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;LastLoginTime&quot;</span>, System.currentTimeMillis()+<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置Cookie有效期为</span></span><br><span class="line">    cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);<span class="comment">//以秒为单位</span></span><br><span class="line">    resp.addCookie(cookie);     <span class="comment">//添加cookie</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieDemo02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookies.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cookies[i].getName().equals(<span class="string">&quot;LastLoginTime&quot;</span>))&#123;</span><br><span class="line">                <span class="comment">//将cookie的生命周期设置为0，cookie立马失效</span></span><br><span class="line">                cookies[i].setMaxAge(<span class="number">0</span>);</span><br><span class="line">                resp.addCookie(cookies[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="编码与解码"><a href="#编码与解码" class="headerlink" title="编码与解码"></a>编码与解码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编码</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">&quot;name&quot;</span>, URLEncoder.encode(<span class="string">&quot;筱语&quot;</span>,<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"><span class="comment">//解码</span></span><br><span class="line">out.write(URLDecoder.decode(cookie.getValue(),<span class="string">&quot;utf-8&quot;</span>) );</span><br></pre></td></tr></table></figure>
<h2 id="四、Session-重点"><a href="#四、Session-重点" class="headerlink" title="四、Session(重点)"></a>四、Session(重点)</h2><h3 id="1-什么是session"><a href="#1-什么是session" class="headerlink" title="1. 什么是session"></a>1. 什么是session</h3></li>
</ol>
<ul>
<li>服务器会给<strong>每一个用户</strong>（浏览器）创建一个session对象</li>
<li>一个session独占一个浏览器，主要浏览器没有关闭，这个session就存在</li>
<li>用户登录后，整个网站它都可以房屋——&gt;保存用户的信息，保存购物车的信息。</li>
<li>就像一个用户登录b站后，他的信息在一段时间内可以在b站的各个网页保存。</li>
</ul>
<p><img src="https://gitee.com/xiaoyu-98/blogImage/raw/master/img/image-20210323084508377.png"></p>
<h3 id="2-给session中存用户信息"><a href="#2-给session中存用户信息" class="headerlink" title="2. 给session中存用户信息"></a>2. 给session中存用户信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDemo01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//解决乱码问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html；charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//得到一个Session</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        <span class="comment">//给session中存数据</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;倪矗&quot;</span>);</span><br><span class="line">        <span class="comment">//获取Session的ID</span></span><br><span class="line">        String id = session.getId();</span><br><span class="line">        <span class="comment">//判断是不是新的Session</span></span><br><span class="line">        <span class="keyword">if</span> (session.isNew())&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;Session创建成功，ID:&quot;</span>+id);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">&quot;Session已经在服务器中存在&quot;</span>+id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Session创建的时候会把SessionID放到Cookie里，并且把Cookie响应回去了</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-获取session中存储的用户信息"><a href="#3-获取session中存储的用户信息" class="headerlink" title="3. 获取session中存储的用户信息"></a>3. 获取session中存储的用户信息</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Session02</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取session</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        <span class="comment">//获取session的id</span></span><br><span class="line">        resp.getWriter().write(session.getAttribute(<span class="string">&quot;name&quot;</span>).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>每次新打开一个浏览器访问地址，都会新建一个session会话，也会向客户端存储一个值为sessionId的cookie。</p>
</blockquote>
<h3 id="4-手动注销session"><a href="#4-手动注销session" class="headerlink" title="4. 手动注销session"></a>4. 手动注销session</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/s2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Session03</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取session</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        <span class="comment">//清除session中的属性</span></span><br><span class="line">        session.removeAttribute(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//手动注销Session</span></span><br><span class="line">        session.invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>设置session的失效时间，在web.xml中</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置Session默认的失效时间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--15分钟后Session自动失效，以分钟为单位--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>线程的死锁</title>
    <url>/posts/54749.html</url>
    <content><![CDATA[<h1 id="线程的死锁"><a href="#线程的死锁" class="headerlink" title="线程的死锁"></a>线程的死锁</h1><h2 id="产生死锁的必要条件"><a href="#产生死锁的必要条件" class="headerlink" title="产生死锁的必要条件"></a>产生死锁的必要条件</h2><h3 id="1-互斥条件：一个资源一次只能被一个进程使用。"><a href="#1-互斥条件：一个资源一次只能被一个进程使用。" class="headerlink" title="1. 互斥条件：一个资源一次只能被一个进程使用。"></a>1. 互斥条件：一个资源一次只能被一个进程使用。</h3><h3 id="2-请求与保持条件：一个进程因请求资源而阻塞的时候，对已获得的资源保持不放。"><a href="#2-请求与保持条件：一个进程因请求资源而阻塞的时候，对已获得的资源保持不放。" class="headerlink" title="2. 请求与保持条件：一个进程因请求资源而阻塞的时候，对已获得的资源保持不放。"></a>2. 请求与保持条件：一个进程因请求资源而阻塞的时候，对已获得的资源保持不放。</h3><h3 id="3-不剥夺条件：进程以及获得资源，在未使用完成前，不能强行剥夺。"><a href="#3-不剥夺条件：进程以及获得资源，在未使用完成前，不能强行剥夺。" class="headerlink" title="3. 不剥夺条件：进程以及获得资源，在未使用完成前，不能强行剥夺。"></a>3. 不剥夺条件：进程以及获得资源，在未使用完成前，不能强行剥夺。</h3><h3 id="4-循环等待条件：若干进程之间形成头尾相接的循环等待资源关系。"><a href="#4-循环等待条件：若干进程之间形成头尾相接的循环等待资源关系。" class="headerlink" title="4. 循环等待条件：若干进程之间形成头尾相接的循环等待资源关系。"></a>4. 循环等待条件：若干进程之间形成头尾相接的循环等待资源关系。</h3><a id="more"></a>
<h2 id="死锁的案例："><a href="#死锁的案例：" class="headerlink" title="死锁的案例："></a>死锁的案例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.study.ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        makeup g1=<span class="keyword">new</span> makeup(<span class="string">&quot;灰姑凉&quot;</span>,<span class="number">0</span>);</span><br><span class="line">        makeup g2=<span class="keyword">new</span> makeup(<span class="string">&quot;白雪公主&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        g1.start();</span><br><span class="line">        g2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lipstick</span> </span>&#123; <span class="comment">//创建口红类</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mirror</span></span>&#123; <span class="comment">//创键镜子类</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">makeup</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Lipstick lipstick = <span class="keyword">new</span> Lipstick();</span><br><span class="line">    <span class="keyword">static</span> Mirror mirror= <span class="keyword">new</span> Mirror();</span><br><span class="line">    <span class="keyword">int</span> choice;</span><br><span class="line">    makeup(String name,<span class="keyword">int</span> choice)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.choice=choice;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (choice==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获得了口红的锁&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//制造一秒的延迟，导致镜子锁被其他线程占用。</span></span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//拥有口红锁的情况下，想获取镜子锁。</span></span><br><span class="line">                <span class="keyword">synchronized</span> (mirror) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获得了镜子的锁&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获得了镜子的锁&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//拥有镜子锁的情况下想获取口红锁。</span></span><br><span class="line">                <span class="keyword">synchronized</span> (lipstick) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;获得了口红的锁&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>由两个线程都抱着对方的锁不放，导致的死锁。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>JSP详解</title>
    <url>/posts/35329.html</url>
    <content><![CDATA[<h1 id="JSP详解"><a href="#JSP详解" class="headerlink" title="JSP详解"></a>JSP详解</h1><h2 id="一、什么是JSP"><a href="#一、什么是JSP" class="headerlink" title="一、什么是JSP"></a>一、什么是JSP</h2><p>Java Server Pages：Java服务端页面，也和Servlet一样开发动态web<br>最大特点：</p>
<ul>
<li>写JSP就像在写HTML</li>
<li>区别：<ul>
<li>HTML只给用户提供静态数据</li>
<li>JSP页面中可以嵌入JAVA代码，为用户提供动态数据；</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h2 id="二、JSP原理"><a href="#二、JSP原理" class="headerlink" title="二、JSP原理"></a>二、JSP原理</h2><p>思路：JSP到底是如何执行的？</p>
<ul>
<li>代码层面没有任何问题</li>
<li>服务器内部工作<ul>
<li>tomcat中有个work目录</li>
<li>IDEA中使用Tomcat会在IDEA的tomcat中产生一个work目录</li>
<li>jsp页面或转化为java程序</li>
</ul>
</li>
</ul>
<p><strong>浏览器向服务器发送请求，不管访问什么资源，其实都在访问Servlet</strong></p>
<p>JSP最终也会被转化为一个Java类！，<strong>JSP本质上就是一个Servlet！</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JSP服务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br></pre></td></tr></table></figure>
<ol>
<li>判断请求</li>
<li>内置了一些对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> jakarta.servlet.jsp.PageContext pageContext;  <span class="comment">//页面上下文</span></span><br><span class="line"><span class="keyword">final</span> jakarta.servlet.ServletContext application;</span><br><span class="line"><span class="keyword">final</span> jakarta.servlet.ServletConfig config;</span><br><span class="line">jakarta.servlet.jsp.JspWriter out = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">final</span> java.lang.Object page = <span class="keyword">this</span>;</span><br><span class="line">jakarta.servlet.jsp.JspWriter _jspx_out = <span class="keyword">null</span>;</span><br><span class="line">jakarta.servlet.jsp.PageContext _jspx_page_context = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></li>
<li>输出页面前增加的代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html; charset=UTF-8&quot;</span>);</span><br><span class="line">pageContext = _jspxFactory.getPageContext(<span class="keyword">this</span>, request, response,</span><br><span class="line">        <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="number">8192</span>, <span class="keyword">true</span>);</span><br><span class="line">_jspx_page_context = pageContext;</span><br><span class="line">application = pageContext.getServletContext();</span><br><span class="line">config = pageContext.getServletConfig();</span><br><span class="line">out = pageContext.getOut();</span><br><span class="line">_jspx_out = out;</span><br></pre></td></tr></table></figure></li>
<li>以上的这些对象，问你可以在JSP页面中直接使用！<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210510164627.png"></li>
<li>在JSP中只要是Java代码就会原封不动的输出；如果是HTML代码，就会被转化为如下格式输出到前端<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">out.write(<span class="string">&quot;&lt;!DOCTYPE html&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;&lt;html lang=\&quot;en\&quot;&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;    &lt;head&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;        &lt;meta charset=\&quot;UTF-8\&quot; /&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;        &lt;title&gt;&quot;</span>);</span><br><span class="line">out.print(request.getServletContext().getServerInfo() );</span><br><span class="line">out.write(<span class="string">&quot;&lt;/title&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;        &lt;link href=\&quot;favicon.ico\&quot; rel=\&quot;icon\&quot; type=\&quot;image/x-icon\&quot; /&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;        &lt;link href=\&quot;tomcat.css\&quot; rel=\&quot;stylesheet\&quot; type=\&quot;text/css\&quot; /&gt;\n&quot;</span>);</span><br><span class="line">out.write(<span class="string">&quot;    &lt;/head&gt;\n&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="三、JSP基础语法"><a href="#三、JSP基础语法" class="headerlink" title="三、JSP基础语法"></a>三、JSP基础语法</h2>任何语言都有自己的语法，JSP作为Java技术的扩充，它拥有一些自己扩充的语法（了解知道即可），Java的所有语法JSP都支持！</li>
</ol>
<h3 id="1-JSP导包："><a href="#1-JSP导包：" class="headerlink" title="1. JSP导包："></a>1. JSP导包：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Servlet依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- JSP依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- standard标签库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- JSTL表达式依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-JSP表达式"><a href="#2-JSP表达式" class="headerlink" title="2. JSP表达式"></a>2. JSP表达式</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--JSP表达式</span><br><span class="line"> 作用：用来将程序的输出结果，输出到客户端</span><br><span class="line">&lt;%= 变量或表达式%&gt;</span><br><span class="line">--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%=<span class="keyword">new</span> java.util.Date()%&gt;</span><br></pre></td></tr></table></figure>
<h3 id="3-JSP脚本片段"><a href="#3-JSP脚本片段" class="headerlink" title="3. JSP脚本片段"></a>3. JSP脚本片段</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--脚本片段--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--在代码中嵌入HTML元素--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">%&gt;</span><br><span class="line">  &lt;h1&gt;hello&lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<h3 id="4-JSP声明"><a href="#4-JSP声明" class="headerlink" title="4. JSP声明"></a>4. JSP声明</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Loading Servlet&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> globaVar=<span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.printf(<span class="string">&quot;进入了方法&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>被声明过的语句会被编译到JSP生成的Java的类中，其他的，就会被放在_jspService方法中</p>
</blockquote>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210510173603.png"></p>
<p>JSP的注释不会在客户端显示，HTML的会</p>
<h2 id="四、-JSP指令-（page、include、taglib）"><a href="#四、-JSP指令-（page、include、taglib）" class="headerlink" title="四、 JSP指令 （page、include、taglib）"></a>四、 JSP指令 （page、include、taglib）</h2><h3 id="1-page指令"><a href="#1-page指令" class="headerlink" title="1. page指令"></a>1. page指令</h3><p>可以用来配置错误页面(erroPage)</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- page自定义<span class="number">500</span>错误 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 在index.jsp中写入 --&gt;</span><br><span class="line">&lt;%<span class="meta">@page</span> errorPage=<span class="string">&quot;error/500.jsp&quot;</span> %&gt;</span><br><span class="line">&lt;!-- 在<span class="number">500.</span>jsp中写入 --&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- JSP获得项目路径 --&gt;</span><br><span class="line">    &lt;img src=$&#123;pageContext.request.contextPath&#125;/error/<span class="number">500.</span>png alt=<span class="string">&quot;500&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<!-- 项目结构如下 -->
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210510181153.png"></p>
<p><strong>配置错误页面方法二</strong>：直接在xml中配置(推荐使用)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--错误代码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--错误页面路径（相对于项目地址）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error/404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-include指令"><a href="#2-include指令" class="headerlink" title="2. include指令"></a>2. include指令</h3><ul>
<li><h4 id="include可以拼接页面，将别的页面拼接到本页"><a href="#include可以拼接页面，将别的页面拼接到本页" class="headerlink" title="include可以拼接页面，将别的页面拼接到本页"></a>include可以拼接页面，将别的页面拼接到本页</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;common/header.jsp&quot;</span>%&gt;</span><br><span class="line">&lt;h1&gt;我是主体&lt;/h1&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;common/footer.jsp&quot;</span>%&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="拼接页面的第二种方式（jsp-include标签引用）"><a href="#拼接页面的第二种方式（jsp-include标签引用）" class="headerlink" title="拼接页面的第二种方式（jsp:include标签引用）"></a>拼接页面的第二种方式（jsp:include标签引用）</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;common/header.jsp&quot;</span>/&gt;</span><br><span class="line">&lt;h1&gt;我是主体&lt;/h1&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;common/footer.jsp&quot;</span>/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<p>最终效果<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210510230556.png"></p>
</li>
</ul>
<p><strong>注意：include是将header.jsp和footer.jsp的内容拼接到当前页面中。<br>相当于复制粘贴过来。然而，jsp:include标签则是相当于引用</strong></p>
<h2 id="五、JSP内置对象及作用域"><a href="#五、JSP内置对象及作用域" class="headerlink" title="五、JSP内置对象及作用域"></a>五、JSP内置对象及作用域</h2><h3 id="九大内置对象"><a href="#九大内置对象" class="headerlink" title="九大内置对象"></a>九大内置对象</h3><ul>
<li>PageContext 存东西</li>
<li>Request 存东西</li>
<li>Response</li>
<li>Session 存东西</li>
<li>Application【ServletContext】 存东西</li>
<li>config【ServletConfig】</li>
<li>out 输出</li>
<li>page</li>
<li>exception</li>
</ul>
<h3 id="JSP存数据对象的作用域"><a href="#JSP存数据对象的作用域" class="headerlink" title="JSP存数据对象的作用域:"></a>JSP存数据对象的作用域:</h3><p>PageContext<br>Request<br>Session<br>Application</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pageContext.setAttribute(<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;倪矗1号&quot;</span>);<span class="comment">//保存的数据只在一个页面内有效</span></span><br><span class="line">request.setAttribute(<span class="string">&quot;name2&quot;</span>,<span class="string">&quot;倪矗2号&quot;</span>);    <span class="comment">//保存的数据只在一次请求中有效，请求转发会携带这个数据</span></span><br><span class="line">session.setAttribute(<span class="string">&quot;name3&quot;</span>,<span class="string">&quot;倪矗3号&quot;</span>);    <span class="comment">//保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span></span><br><span class="line">application.setAttribute(<span class="string">&quot;name4&quot;</span>,<span class="string">&quot;倪矗4号&quot;</span>);<span class="comment">//保存的数据只在服务器中有效，从打开服务器到关闭服务器</span></span><br></pre></td></tr></table></figure>
<h3 id="修改pageContext对象的作用域"><a href="#修改pageContext对象的作用域" class="headerlink" title="修改pageContext对象的作用域"></a>修改pageContext对象的作用域</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pageContext.setAttribute(<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;倪矗1号&quot;</span>,PageContext.SESSION_SCOPE);</span><br><span class="line"><span class="comment">// public static final int PAGE_SCOPE = 1;</span></span><br><span class="line"><span class="comment">// public static final int REQUEST_SCOPE = 2;</span></span><br><span class="line"><span class="comment">// public static final int SESSION_SCOPE = 3;</span></span><br><span class="line"><span class="comment">// public static final int APPLICATION_SCOPE = 4;</span></span><br></pre></td></tr></table></figure>
<h4 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h4><p>request：客户端向服务器发送请求，产生的数据，用户看完就没用了<br>session：客户端向服务器发送请求，产生的数据，用户用完一会儿还要用<br>application：客户端向服务器发送请求，产生的数据，一个用户用完了，其他的用户还肯使用。</p>
<h4 id="pageContext实现请求转发"><a href="#pageContext实现请求转发" class="headerlink" title="pageContext实现请求转发:"></a>pageContext实现请求转发:</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pageContext.forward(<span class="string">&quot;/index.jsp&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="六、JSP标签、JSTL表达式、EL表达式"><a href="#六、JSP标签、JSTL表达式、EL表达式" class="headerlink" title="六、JSP标签、JSTL表达式、EL表达式"></a>六、JSP标签、JSTL表达式、EL表达式</h2><h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式: ${}"></a>EL表达式: ${}</h3><ul>
<li>获取数据</li>
<li>执行运算</li>
<li>获取web开发的常用对象</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;coreif.jsp&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    EL表达式获取表单中的数据</span></span><br><span class="line"><span class="comment">    $&#123;param.参数名&#125; </span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;param.usernaem&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-JSP标签："><a href="#1-JSP标签：" class="headerlink" title="1. JSP标签："></a>1. JSP标签：</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210511150512.png"></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!-- <span class="number">1.</span> 请求转发标签 --&gt;</span><br><span class="line">&lt;jsp:forward page=<span class="string">&quot;/pageContextDemo01.jsp&quot;</span>&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;倪矗&quot;</span>/&gt;</span><br><span class="line">    &lt;jsp:param name=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;18&quot;</span>/&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br><span class="line">&lt;!-- <span class="number">2.</span> 引用文件标签 --&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;common/header.jsp&quot;</span>/&gt;</span><br><span class="line">&lt;h1&gt;我是主体&lt;/h1&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">&quot;common/footer.jsp&quot;</span>/&gt;</span><br><span class="line">&lt;!-- <span class="number">3.</span> 引用实体类（JavaBean）标签 --&gt;</span><br><span class="line">&lt;jsp:useBean id=<span class="string">&quot;people&quot;</span>（对象） <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.nichu.People&quot;</span>（类） scope=<span class="string">&quot;page&quot;</span>（作用域）/&gt;</span><br><span class="line">&lt;!-- <span class="number">4.</span> 给对象赋值 --&gt;</span><br><span class="line">&lt;jsp:setProperty name=<span class="string">&quot;people&quot;</span> property=<span class="string">&quot;address&quot;</span> value=<span class="string">&quot;杭州&quot;</span>/&gt;</span><br><span class="line">&lt;jsp:setProperty name=<span class="string">&quot;people&quot;</span> property=<span class="string">&quot;name&quot;</span> value=<span class="string">&quot;倪矗&quot;</span>/&gt;</span><br><span class="line">&lt;jsp:setProperty name=<span class="string">&quot;people&quot;</span> property=<span class="string">&quot;id&quot;</span> value=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">&lt;jsp:setProperty name=<span class="string">&quot;people&quot;</span> property=<span class="string">&quot;age&quot;</span> value=<span class="string">&quot;18&quot;</span>/&gt;</span><br><span class="line">&lt;!-- <span class="number">5.</span> 取值 --&gt;</span><br><span class="line">&lt;jsp:getProperty name=<span class="string">&quot;people&quot;</span> property=<span class="string">&quot;name&quot;</span>/&gt;</span><br><span class="line">&lt;jsp:getProperty name=<span class="string">&quot;people&quot;</span> property=<span class="string">&quot;id&quot;</span>/&gt;</span><br><span class="line">&lt;jsp:getProperty name=<span class="string">&quot;people&quot;</span> property=<span class="string">&quot;adress&quot;</span>/&gt;</span><br><span class="line">&lt;jsp:getProperty name=<span class="string">&quot;people&quot;</span> property=<span class="string">&quot;age&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<h3 id="2-JSTL表达式"><a href="#2-JSTL表达式" class="headerlink" title="2. JSTL表达式"></a>2. JSTL表达式</h3><p>JSTL标签库的使用是为了弥补HTML标签的不足；它自定义了许多标签，可以供我们使用，标签库的功能和java代码一样！<br><a href="https://www.runoob.com/jsp/jsp-jstl.html">JSTL标签库</a></p>
<h2 id="七、JavaBean"><a href="#七、JavaBean" class="headerlink" title="七、JavaBean"></a>七、JavaBean</h2><p>实体类<br>JavaBean有特定写法</p>
<ul>
<li>必须要有一个无参构造</li>
<li>属性必须私有化</li>
<li>必须有get、set方法</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>线程的创建之继承Thread类</title>
    <url>/posts/14171.html</url>
    <content><![CDATA[<h1 id="线程的创建之继承Thread类"><a href="#线程的创建之继承Thread类" class="headerlink" title="线程的创建之继承Thread类"></a>线程的创建之继承Thread类</h1><h2 id="一、线程的创建"><a href="#一、线程的创建" class="headerlink" title="一、线程的创建"></a>一、线程的创建</h2><ul>
<li><h3 id="用一个类继承Thread类，并重写Thread类中的run-方法即可实现线程的创建。"><a href="#用一个类继承Thread类，并重写Thread类中的run-方法即可实现线程的创建。" class="headerlink" title="用一个类继承Thread类，并重写Thread类中的run()方法即可实现线程的创建。"></a>用一个类继承Thread类，并重写Thread类中的run()方法即可实现线程的创建。</h3><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210421165555.png"><a id="more"></a>
<h2 id="二、线程的调用"><a href="#二、线程的调用" class="headerlink" title="二、线程的调用"></a>二、线程的调用</h2></li>
<li><h3 id="用创建好的线程类实例化一个对象，通过对象的-start-方法完成线程的调用。"><a href="#用创建好的线程类实例化一个对象，通过对象的-start-方法完成线程的调用。" class="headerlink" title="用创建好的线程类实例化一个对象，通过对象的 start() 方法完成线程的调用。"></a>用创建好的线程类实例化一个对象，通过对象的 <strong><em>start()</em></strong> 方法完成线程的调用。</h3><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210421165218.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210421165714.png"><h2 id="三、IDEA导包操作（粗略版）"><a href="#三、IDEA导包操作（粗略版）" class="headerlink" title="三、IDEA导包操作（粗略版）"></a>三、IDEA导包操作（粗略版）</h2><h3 id="1-下载好jar包"><a href="#1-下载好jar包" class="headerlink" title="1. 下载好jar包"></a>1. 下载好jar包</h3><h3 id="2-将其拷贝到项目目录下"><a href="#2-将其拷贝到项目目录下" class="headerlink" title="2. 将其拷贝到项目目录下"></a>2. 将其拷贝到项目目录下</h3><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210422145520.png"><h3 id="3-右击添加为Library"><a href="#3-右击添加为Library" class="headerlink" title="3. 右击添加为Library"></a>3. 右击添加为Library</h3><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210422145529.png"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java%E5%9F%BA%E7%A1%80/20210422145647.png"><h2 id="四、编写一个多线程网络下载器"><a href="#四、编写一个多线程网络下载器" class="headerlink" title="四、编写一个多线程网络下载器"></a>四、编写一个多线程网络下载器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demo.study.ThreadTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新建一个Downloader类用于下载图片</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Downloader</span></span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(String url,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url),<span class="keyword">new</span> File(name));</span><br><span class="line">            <span class="comment">//用FileUtils类下载图片并保存为name</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">&quot;IO异常，download下载方法出现异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新建多线程实现类WebDownloader</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebDownloader</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器用于传入url和name</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebDownloader</span><span class="params">(String url, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写run方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//多线程同步下载</span></span><br><span class="line">        Downloader down = <span class="keyword">new</span> Downloader(); <span class="comment">//实例化Downloader类</span></span><br><span class="line">        <span class="comment">//调用下载方法</span></span><br><span class="line">        down.download(url,name);</span><br><span class="line">        System.out.println(name+<span class="string">&quot;下载完成！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//实现类创建多线程对象</span></span><br><span class="line">        WebDownloader t1 = <span class="keyword">new</span> WebDownloader(<span class="string">&quot;https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java基础/20210421165714.png&quot;</span>,<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">        WebDownloader t2 = <span class="keyword">new</span> WebDownloader(<span class="string">&quot;https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java基础/20210421165714.png&quot;</span>,<span class="string">&quot;2.jpg&quot;</span>);</span><br><span class="line">        WebDownloader t3 = <span class="keyword">new</span> WebDownloader(<span class="string">&quot;https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Java基础/20210421165714.png&quot;</span>,<span class="string">&quot;3.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//start方法实现多线程的调用</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>JDBC详解</title>
    <url>/posts/8077.html</url>
    <content><![CDATA[<h1 id="JDBC详解"><a href="#JDBC详解" class="headerlink" title="JDBC详解"></a>JDBC详解</h1><h2 id="一、什么是JDBC"><a href="#一、什么是JDBC" class="headerlink" title="一、什么是JDBC"></a>一、什么是JDBC</h2><p>JDBC：Java连接数据库！<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210512143552.png"><br>需要的jar包支持</p>
<ul>
<li>java.sql</li>
<li>javax.sql</li>
<li>mysql-connecter-java…连接驱动(必须要导入)</li>
</ul>
<a id="more"></a>
<h2 id="二、实验环境搭建"><a href="#二、实验环境搭建" class="headerlink" title="二、实验环境搭建"></a>二、实验环境搭建</h2><h3 id="1-SQL语句创建表"><a href="#1-SQL语句创建表" class="headerlink" title="1. SQL语句创建表"></a>1. SQL语句创建表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users ( id <span class="type">INT</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>, `name` <span class="type">VARCHAR</span> ( <span class="number">40</span> ), `password` <span class="type">VARCHAR</span> ( <span class="number">40</span> ), email <span class="type">VARCHAR</span> ( <span class="number">60</span> ), birthday <span class="type">DATE</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users ( id, `name`, `password`, email, birthday )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">	( <span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;zs@qq.com&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users ( id, `name`, `password`, email, birthday )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">	( <span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;ls@qq.com&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span> );</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users ( id, `name`, `password`, email, birthday )</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">	( <span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;ww@qq.com&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span> );∞</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users;</span><br></pre></td></tr></table></figure>
<h3 id="2-导入数据库依赖"><a href="#2-导入数据库依赖" class="headerlink" title="2. 导入数据库依赖"></a>2. 导入数据库依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql的驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-在IDEA中配置数据库"><a href="#3-在IDEA中配置数据库" class="headerlink" title="3. 在IDEA中配置数据库"></a>3. 在IDEA中配置数据库</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210512154748.png"></p>
<h3 id="4-JDBC固定步骤"><a href="#4-JDBC固定步骤" class="headerlink" title="4. JDBC固定步骤"></a>4. JDBC固定步骤</h3><ol>
<li>加载驱动</li>
<li>连接数据库,代表数据库</li>
<li>向数据库发送SQL的对象Statement，PreparedStatement ：CRUD</li>
<li>编写SQL(根据业务，不同的SQL)</li>
<li>执行查询SQL,返回一个ResultSet结果集</li>
<li>关闭连接，释放资源（一定要做） 先开后关</li>
</ol>
<h3 id="5-直接执行SQL"><a href="#5-直接执行SQL" class="headerlink" title="5. 直接执行SQL"></a>5. 直接执行SQL</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//配置信息</span></span><br><span class="line">    <span class="comment">//userUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class="line">    String url = <span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?userUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>;</span><br><span class="line">    String username=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">    String password=<span class="string">&quot;nc20011019&quot;</span>;</span><br><span class="line">    <span class="comment">//1. 加载驱动</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 连接数据库,代表数据库</span></span><br><span class="line">    Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 向数据库发送SQL的对象Statement：CRUD</span></span><br><span class="line">    Statement statement = connection.createStatement();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 编写SQL</span></span><br><span class="line">    String sql = <span class="string">&quot;SELECT * FROM users;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 执行查询SQL,返回一个ResultSet结果集</span></span><br><span class="line">    ResultSet rs = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id=&quot;</span>+rs.getObject(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span>+rs.getObject(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;password=&quot;</span>+rs.getObject(<span class="string">&quot;password&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;email=&quot;</span>+rs.getObject(<span class="string">&quot;email&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;birthday=&quot;</span>+rs.getObject(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6. 关闭连接，释放资源（一定要做） 先开后关</span></span><br><span class="line"></span><br><span class="line">    rs.close();</span><br><span class="line">    statement.close();</span><br><span class="line">    connection.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-预编译执行SQL"><a href="#6-预编译执行SQL" class="headerlink" title="6. 预编译执行SQL"></a>6. 预编译执行SQL</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testJDBC02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//配置信息</span></span><br><span class="line">        <span class="comment">//userUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?userUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>;</span><br><span class="line">        String username=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password=<span class="string">&quot;nc20011019&quot;</span>;</span><br><span class="line">        <span class="comment">//1. 加载驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 连接数据库,代表数据库</span></span><br><span class="line">        Connection connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 编写SQL</span></span><br><span class="line">        String sql = <span class="string">&quot;insert into users (id, name, password, email, birthday) value (?,?,?,?,?);&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 预编译</span></span><br><span class="line">        PreparedStatement preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">        preparedStatement.setInt(<span class="number">1</span>,<span class="number">4</span>); <span class="comment">//给第一个占位符&#x27;？&#x27;赋值为4；</span></span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>,<span class="string">&quot;王二麻&quot;</span>); <span class="comment">//给第二个占位符&#x27;？&#x27;赋值为&quot;王二麻&quot;；</span></span><br><span class="line">        preparedStatement.setString(<span class="number">3</span>,<span class="string">&quot;123456&quot;</span>); <span class="comment">//给第三个占位符&#x27;？&#x27;赋值为&quot;123456&quot;；</span></span><br><span class="line">        preparedStatement.setString(<span class="number">4</span>,<span class="string">&quot;wem@qq.com&quot;</span>); <span class="comment">//给第四个占位符&#x27;？&#x27;赋值为&quot;wem@qq.com&quot;；</span></span><br><span class="line">        preparedStatement.setDate(<span class="number">5</span>,<span class="keyword">new</span> Date(<span class="keyword">new</span> java.util.Date().getTime())); <span class="comment">//给第五个占位符&#x27;？&#x27;赋值为new Date(new java.util.Date().getTime())；第一个Date是SQL的Date第二个才是java的Date</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. 执行SQL</span></span><br><span class="line">        <span class="keyword">int</span> i = preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;插入成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6. 关闭连接，释放资源（一定要做） 先开后关</span></span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        connection.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>预编译的SQL，一次编译后，在后面直接执行就可，不需要再次传递sql语句.<br>int i = preparedStatement.executeUpdate();</p>
</blockquote>
<h2 id="三、事务"><a href="#三、事务" class="headerlink" title="三、事务"></a>三、事务</h2><p><strong>要么都成功，要么都失败！<br>ACID原则：保证数据的安全。</strong></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">开启事务</span><br><span class="line">事务提交    commit()</span><br><span class="line">事务回滚    roallback()</span><br><span class="line">关闭事务</span><br><span class="line"></span><br><span class="line">转账:</span><br><span class="line">A:1000</span><br><span class="line">B:1000</span><br><span class="line"></span><br><span class="line">A(900)  --100--&gt;  B(1100)</span><br><span class="line">A转给B 100 假如服务器崩了，事务回滚 </span><br></pre></td></tr></table></figure>
<h3 id="1-Junit单元测试（可以免写main方法！）"><a href="#1-Junit单元测试（可以免写main方法！）" class="headerlink" title="1. Junit单元测试（可以免写main方法！）"></a>1. Junit单元测试（可以免写main方法！）</h3><p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>/<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nichu.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testJDBC03</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span> <span class="comment">//在方法上加入@Test注解，该方法就可执行！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-事务实现转账"><a href="#2-事务实现转账" class="headerlink" title="2. 事务实现转账"></a>2. 事务实现转账</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testJDBC03</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//配置信息</span></span><br><span class="line">        <span class="comment">//userUnicode=true&amp;characterEncoding=utf-8 解决中文乱码</span></span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/jdbc?userUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span>;</span><br><span class="line">        String username=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password=<span class="string">&quot;nc20011019&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 加载驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//2. 连接数据库,代表数据库</span></span><br><span class="line">            connection = DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3. 通知数据库开启事务,false开启</span></span><br><span class="line">            connection.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//3. 编写SQL</span></span><br><span class="line">            String sql = <span class="string">&quot;UPDATE account set money=money-100 where name = &#x27;王五&#x27;;&quot;</span>;</span><br><span class="line">            connection.prepareStatement(sql).executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//制造错误</span></span><br><span class="line">            <span class="comment">//int i=1/0;</span></span><br><span class="line">            String sql2 =  <span class="string">&quot;UPDATE account set money=money+100 where name = &#x27;赵四&#x27;;&quot;</span>;</span><br><span class="line">            connection.prepareStatement(sql2).executeUpdate();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//4. 以上语句都执行成功了就提交事务</span></span><br><span class="line">            connection.commit();</span><br><span class="line">            System.out.println(<span class="string">&quot;转账成功！！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//5. 如果出现异常执行回滚事务</span></span><br><span class="line">                connection.rollback();</span><br><span class="line">                System.out.println(<span class="string">&quot;转账失败！！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//6. 关闭连接，释放资源（一定要做） 先开后关</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意：要开启通知数据库开启事务connection.setAutoCommit(false);</strong></p>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>Java文件上传详解</title>
    <url>/posts/50934.html</url>
    <content><![CDATA[<h1 id="Java文件上传详解"><a href="#Java文件上传详解" class="headerlink" title="Java文件上传详解"></a>Java文件上传详解</h1>]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>线程的同步</title>
    <url>/posts/8092.html</url>
    <content><![CDATA[<h1 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h1><p>当多个线程访问<strong>同一个对象</strong>的时候 <strong>（并发）</strong>，并且某些线程还想<strong>修改</strong>这个对象，此时就需要<strong>线程同步</strong>。线程同步实质上是一种<strong>等待机制</strong>，多个需要访问此对象的线程进入这个<strong>对象的线程等待池</strong>，等前一个线程使用完毕，后一个线程才能开始访问。</p>
<h2 id="线程同步的解决措施：锁机制"><a href="#线程同步的解决措施：锁机制" class="headerlink" title="线程同步的解决措施：锁机制"></a>线程同步的解决措施：锁机制</h2><p>由于一个进程内的多个线程共享一块存储空间，为了保证数据的<strong>正确性</strong>，并发的同时加入<strong>锁机制synchronized</strong>，当一个线程获取到锁的时候，其他线程必须等待，使用和释放锁即可。</p>
<a id="more"></a>
<h2 id="线程的三个不安全实例："><a href="#线程的三个不安全实例：" class="headerlink" title="线程的三个不安全实例："></a>线程的三个不安全实例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不安全的买票机制</span></span><br><span class="line"><span class="keyword">package</span> demo.study.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBuyTickets</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Buytickets station = <span class="keyword">new</span> Buytickets();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;小红&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;黄牛&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buytickets</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNum = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.ticketNum&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;买到了&quot;</span>+ticketNum--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不安全的银行取钱机制</span></span><br><span class="line"><span class="keyword">package</span> demo.study.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBuyTickets</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Buytickets station = <span class="keyword">new</span> Buytickets();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;小明&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;小红&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">&quot;黄牛&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Buytickets</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNum = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                buy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.ticketNum&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;买到了&quot;</span>+ticketNum--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不安全的数组</span></span><br><span class="line"><span class="keyword">package</span> demo.study.syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                list.add(Thread.currentThread().getName());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java的多线程</category>
      </categories>
  </entry>
  <entry>
    <title>Lombok详解</title>
    <url>/posts/30523.html</url>
    <content><![CDATA[<h2 id="一、Lombok简介"><a href="#一、Lombok简介" class="headerlink" title="一、Lombok简介"></a>一、Lombok简介</h2><p>Lombok是一个可以通过简单的注解形式来帮助我们简化消除一些必须有但显得很臃肿的Java代码的工具，通过使用对应的注解，可以在编译源码的时候生成对应的方法</p>
<h2 id="二、IntelliJ-IDEA-使用它的方法"><a href="#二、IntelliJ-IDEA-使用它的方法" class="headerlink" title="二、IntelliJ IDEA 使用它的方法"></a>二、IntelliJ IDEA 使用它的方法</h2><h3 id="先安装插件"><a href="#先安装插件" class="headerlink" title="先安装插件"></a>先安装插件</h3><p><img src="https://upload-images.jianshu.io/upload_images/4259109-ab6cf3975cc8e533.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/447"></p>
<h3 id="然后引入lombok的jar包"><a href="#然后引入lombok的jar包" class="headerlink" title="然后引入lombok的jar包"></a>然后引入lombok的jar包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="三、Lombok的简单使用"><a href="#三、Lombok的简单使用" class="headerlink" title="三、Lombok的简单使用"></a>三、Lombok的简单使用</h2><ul>
<li>@Getter / @Setter: 自动生成Getter/Setter方法。把@Getter / @Setter单独放在属性上，则只生成该属性的Getter和Setter。</li>
<li>@NoArgsConstructor: 自动生成无参数构造函数。</li>
<li>@AllArgsConstructor: 自动生成全参数构造函数。</li>
<li>@Data: 自动为所有字段添加@ToString, @EqualsAndHashCode,@Getter方法，为非final字段添加@Setter,和@RequiredArgsConstructor!</li>
</ul>
]]></content>
      <categories>
        <category>Mybatis学习</category>
      </categories>
  </entry>
  <entry>
    <title>MVC三层架构</title>
    <url>/posts/30326.html</url>
    <content><![CDATA[<h1 id="MVC三层架构"><a href="#MVC三层架构" class="headerlink" title="MVC三层架构"></a>MVC三层架构</h1><p>什么是MVC：Model、View、Controller  模型 视图 控制器</p>
<h2 id="早些年"><a href="#早些年" class="headerlink" title="早些年"></a>早些年</h2><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210511161128.png"></p>
<a id="more"></a>
<h3 id="用户直接访问控制层，控制层就可以直接操作数据库"><a href="#用户直接访问控制层，控制层就可以直接操作数据库" class="headerlink" title="用户直接访问控制层，控制层就可以直接操作数据库"></a>用户直接访问控制层，控制层就可以直接操作数据库</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Servlet--&gt;CRUD--&gt;数据库</span><br><span class="line">弊端: 程序十分臃肿，不利于维护</span><br><span class="line">Servlet的代码中包含：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码</span><br><span class="line">架构:没有什么是加一层解决不了的！</span><br></pre></td></tr></table></figure>
<h2 id="MVC三层架构-1"><a href="#MVC三层架构-1" class="headerlink" title="MVC三层架构:"></a>MVC三层架构:</h2><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210511161725.png"></p>
<h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><ul>
<li>业务处理:业务逻辑（Service）</li>
<li>数据持久层：CRUD （Dao)<h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3></li>
<li>展示数据</li>
<li>提供链路发起Servlet请求（a,form,img）<h3 id="Controller（Servlet）"><a href="#Controller（Servlet）" class="headerlink" title="Controller（Servlet）"></a>Controller（Servlet）</h3></li>
<li>接收用户的请求：req请求参数、Session信息….</li>
<li>交给业务层处理对应的代码</li>
<li>控制视图的跳转（请求转发、重定向）</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis的CRUD</title>
    <url>/posts/20315.html</url>
    <content><![CDATA[<h1 id="Mybatis的CRUD"><a href="#Mybatis的CRUD" class="headerlink" title="Mybatis的CRUD"></a>Mybatis的CRUD</h1><h2 id="一-注意点"><a href="#一-注意点" class="headerlink" title="一. 注意点"></a>一. 注意点</h2><h4 id="1-namespace中的包名要和Dao-Mapper接口的包名一致"><a href="#1-namespace中的包名要和Dao-Mapper接口的包名一致" class="headerlink" title="1. namespace中的包名要和Dao/Mapper接口的包名一致"></a>1. namespace中的包名要和Dao/Mapper<strong>接口</strong>的包名一致</h4><h4 id="2-执行增删改操作时需要提交事务！！！"><a href="#2-执行增删改操作时需要提交事务！！！" class="headerlink" title="2. 执行增删改操作时需要提交事务！！！"></a>2. 执行增删改操作时需要提交事务！！！</h4><h4 id="3-增删改操作返回值类型为int，查询的返回值类型是实体类"><a href="#3-增删改操作返回值类型为int，查询的返回值类型是实体类" class="headerlink" title="3. 增删改操作返回值类型为int，查询的返回值类型是实体类"></a>3. 增删改操作返回值类型为int，查询的返回值类型是实体类</h4><a id="more"></a>

<h2 id="二、增删改查实现"><a href="#二、增删改查实现" class="headerlink" title="二、增删改查实现"></a>二、增删改查实现</h2><h3 id="1、-查询"><a href="#1、-查询" class="headerlink" title="1、 查询"></a>1、 查询</h3><h4 id="1-在Dao层接口中添加查询方法"><a href="#1-在Dao层接口中添加查询方法" class="headerlink" title="1. 在Dao层接口中添加查询方法"></a>1. 在<strong>Dao层接口</strong>中添加查询方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-在Dao层的接口配置文件中配置查询语句-lt-select-gt-标签"><a href="#2-在Dao层的接口配置文件中配置查询语句-lt-select-gt-标签" class="headerlink" title="2. 在Dao层的接口配置文件中配置查询语句 &lt;select&gt;标签"></a>2. 在Dao层的接口配置文件中配置查询语句 <strong>&lt;select&gt;标签</strong></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.nichu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-编写测试程序"><a href="#3-编写测试程序" class="headerlink" title="3. 编写测试程序"></a>3. 编写测试程序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; userList = mapper.getUserList();</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//用完记得关闭sqlSession</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2、-增加"><a href="#2、-增加" class="headerlink" title="2、 增加"></a>2、 增加</h3><h4 id="1-在Dao层接口中添加增加操作方法"><a href="#1-在Dao层接口中添加增加操作方法" class="headerlink" title="1. 在Dao层接口中添加增加操作方法"></a>1. 在<strong>Dao层接口</strong>中添加增加操作方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注意参数类型</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-在Dao层的接口配置文件中配置语句-lt-insert-gt-标签"><a href="#2-在Dao层的接口配置文件中配置语句-lt-insert-gt-标签" class="headerlink" title="2. 在Dao层的接口配置文件中配置语句 &lt;insert&gt;标签"></a>2. 在<strong>Dao层的接口配置文件</strong>中配置语句 <strong>&lt;insert&gt;标签</strong></h4><pre><code><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.nichu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    insert into mybatis.user (id, name, pwd)</span><br><span class="line">    values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
- **parameterType** 是传入的参数类型，指向实体类 **&quot;com.nichu.pojo.User&quot;**
- 使用 #&#123;&#125; 来获取传入的值
- #&#123;&#125;,括号内是实体类属性/数据库字段</code></pre>
<h4 id="3-编写测试程序-1"><a href="#3-编写测试程序-1" class="headerlink" title="3. 编写测试程序"></a>3. 编写测试程序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.addUser(<span class="keyword">new</span> User(<span class="number">5</span>,<span class="string">&quot;倪矗5&quot;</span>,<span class="string">&quot;234333&quot;</span>));</span><br><span class="line">    <span class="comment">// 千万不要忘记提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>一定要记得提交事务！！！</strong></p>
<h3 id="3、-修改"><a href="#3、-修改" class="headerlink" title="3、 修改"></a>3、 修改</h3><h4 id="1-在Dao层接口中添加修改操作方法"><a href="#1-在Dao层接口中添加修改操作方法" class="headerlink" title="1. 在Dao层接口中添加修改操作方法"></a>1. 在<strong>Dao层接口</strong>中添加修改操作方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注意参数类型</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-在Dao层的接口配置文件中配置语句-lt-update-gt-标签"><a href="#2-在Dao层的接口配置文件中配置语句-lt-update-gt-标签" class="headerlink" title="2. 在Dao层的接口配置文件中配置语句 &lt;update&gt;标签"></a>2. 在<strong>Dao层的接口配置文件</strong>中配置语句 <strong>&lt;update&gt;标签</strong></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.nichu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update mybatis.user set name=#&#123;name&#125;, pwd=#&#123;pwd&#125; where id =#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-编写测试程序-2"><a href="#3-编写测试程序-2" class="headerlink" title="3. 编写测试程序"></a>3. 编写测试程序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.updUser(<span class="keyword">new</span> User(<span class="number">5</span>,<span class="string">&quot;倪矗6&quot;</span>,<span class="string">&quot;234333&quot;</span>));</span><br><span class="line">    <span class="comment">// 千万不要忘记提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4、删除"><a href="#4、删除" class="headerlink" title="4、删除"></a>4、删除</h3><h4 id="1-在Dao层接口中添加增加操作方法-1"><a href="#1-在Dao层接口中添加增加操作方法-1" class="headerlink" title="1. 在Dao层接口中添加增加操作方法"></a>1. 在<strong>Dao层接口</strong>中添加增加操作方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注意参数类型</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-在Dao层的接口配置文件中配置语句-lt-delete-gt-标签"><a href="#2-在Dao层的接口配置文件中配置语句-lt-delete-gt-标签" class="headerlink" title="2. 在Dao层的接口配置文件中配置语句 &lt;delete&gt;标签"></a>2. 在<strong>Dao层的接口配置文件</strong>中配置语句 <strong>&lt;delete&gt;标签</strong></h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete  from mybatis.user where id =#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-编写测试程序-3"><a href="#3-编写测试程序-3" class="headerlink" title="3. 编写测试程序"></a>3. 编写测试程序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    mapper.delUser(<span class="number">3</span>);</span><br><span class="line">    <span class="comment">// 千万不要忘记提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、万能的Map"><a href="#三、万能的Map" class="headerlink" title="三、万能的Map"></a>三、万能的Map</h2><p>假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用Map！</p>
<h3 id="1-使用Map增加记录"><a href="#1-使用Map增加记录" class="headerlink" title="1. 使用Map增加记录"></a>1. 使用Map增加记录</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//万能的Map</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser2</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    insert into mybatis.user (id,name,pwd)</span><br><span class="line">    values (#&#123;userId&#125;,#&#123;userName&#125;,#&#123;userPassword&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;userId&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    map.put(<span class="string">&quot;userName&quot;</span>,<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;userPassword&quot;</span>,<span class="string">&quot;222222&quot;</span>);</span><br><span class="line">    mapper.addUser2(map);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-使用Map查找记录"><a href="#2-使用Map查找记录" class="headerlink" title="2. 使用Map查找记录"></a>2. 使用Map查找记录</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserListById</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserListById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.nichu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id = #&#123;userId&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;userId&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    List&lt;User&gt; userListById = mapper.getUserListById(map);</span><br><span class="line">    System.out.println(userListById);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Map传递参数，直接在sql中取出key即可！<br>对象传递参数，直接在sql中取出对象的属性即可！<br>只有一个参数的情况下，可以直接在sql中取。<br>多个参数用Map，<strong>或者注解</strong>。</p>
<h2 id="四、Mybatis模糊查询"><a href="#四、Mybatis模糊查询" class="headerlink" title="四、Mybatis模糊查询"></a>四、Mybatis模糊查询</h2><p>方法1：在Java代码执行的时候，传递通配符% %</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userListById = mapper.getUserLike(<span class="string">&quot;%倪%&quot;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserLike&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.nichu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where name like #&#123;userName&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>方法2：在sql拼接中使用通配符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userListById = mapper.getUserLike(<span class="string">&quot;倪&quot;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserLike&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.nichu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where name like &quot;%&quot;#&#123;userName&#125;&quot;%&quot;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mybatis学习</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis日志工厂</title>
    <url>/posts/61985.html</url>
    <content><![CDATA[<h1 id="Mybatis日志工厂"><a href="#Mybatis日志工厂" class="headerlink" title="Mybatis日志工厂"></a>Mybatis日志工厂</h1><h2 id="一、日志工厂"><a href="#一、日志工厂" class="headerlink" title="一、日志工厂"></a>一、日志工厂</h2><p>如果一个数据库操作，出现了异常，我们需要排错。日志就是最好的助手！<br>曾经：sout、debug<br>现在：日志工厂<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Mybatis/20210525170602.png"></p>
<ul>
<li>SLF4J</li>
<li>LOG4J【掌握】</li>
<li>LOG4J2</li>
<li>JDK_LOGGING</li>
<li>COMMONS_LOGGING</li>
<li>STDOUT_LOGGING【掌握】</li>
<li>NO_LOGGING <a id="more"></a>
<h2 id="二、STDOUT-LOGGING（标准日志）的使用"><a href="#二、STDOUT-LOGGING（标准日志）的使用" class="headerlink" title="二、STDOUT_LOGGING（标准日志）的使用"></a>二、STDOUT_LOGGING（标准日志）的使用</h2><h3 id="在核心配置文件中配置"><a href="#在核心配置文件中配置" class="headerlink" title="在核心配置文件中配置"></a>在核心配置文件中配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
日志会显示程序运行时的信息<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Mybatis/20210525171658.png"></li>
</ul>
<h2 id="三、使用Log4j配置日志"><a href="#三、使用Log4j配置日志" class="headerlink" title="三、使用Log4j配置日志"></a>三、使用Log4j配置日志</h2><h3 id="1-什么是Log4j"><a href="#1-什么是Log4j" class="headerlink" title="1. 什么是Log4j"></a>1. 什么是Log4j</h3><ul>
<li>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件</li>
<li>我们也可以控制每一条日志的输出格式。</li>
<li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</li>
<li>通过一个<strong>配置文件</strong>来灵活地进行配置，而不需要修改应用的代码。</li>
</ul>
<h3 id="2-导入依赖"><a href="#2-导入依赖" class="headerlink" title="2. 导入依赖"></a>2. 导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-配置log4j文件"><a href="#3-配置log4j文件" class="headerlink" title="3. 配置log4j文件"></a>3. 配置log4j文件</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"><span class="meta">log4j.appender.console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="comment">#日志文件输出路径</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/nichiu.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure>
<h3 id="4-配置log4j为日志的实现"><a href="#4-配置log4j为日志的实现" class="headerlink" title="4. 配置log4j为日志的实现"></a>4. 配置log4j为日志的实现</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LOG4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="5-直接测试运行刚才的查询"><a href="#5-直接测试运行刚才的查询" class="headerlink" title="5. 直接测试运行刚才的查询"></a>5. 直接测试运行刚才的查询</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Mybatis/20210525203552.png"></p>
<h3 id="6-简单使用"><a href="#6-简单使用" class="headerlink" title="6. 简单使用"></a>6. 简单使用</h3><ol>
<li>在要使用Log4j的类中，导入包import org.apache.log4j.Logger;</li>
<li>日志对象，参数为当前类的class<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger= Logger.getLogger(UserTest.class);</span><br></pre></td></tr></table></figure></li>
<li>在测试文件中使用logger对象调用log4j <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLog4j</span><span class="params">()</span></span>&#123;</span><br><span class="line">    logger.info(<span class="string">&quot;info:进入了log4j方法&quot;</span>);</span><br><span class="line">    logger.debug(<span class="string">&quot;debug:进入了log4j&quot;</span>);</span><br><span class="line">    logger.error(<span class="string">&quot;error:进入了log4j&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Mybatis学习</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis使用注解开发</title>
    <url>/posts/24871.html</url>
    <content><![CDATA[<h2 id="一、使用注解开发"><a href="#一、使用注解开发" class="headerlink" title="一、使用注解开发"></a>一、使用注解开发</h2><h3 id="1-注解在接口上实现"><a href="#1-注解在接口上实现" class="headerlink" title="1. 注解在接口上实现"></a>1. 注解在接口上实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">     <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">     <span class="function">List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-需要在核心配置文件中绑定接口！"><a href="#2-需要在核心配置文件中绑定接口！" class="headerlink" title="2. 需要在核心配置文件中绑定接口！"></a>2. 需要在核心配置文件中绑定接口！</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--绑定接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.nichu.dao.UserMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    List&lt;User&gt; user = mapper.getUser();</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注解开发的"><a href="#注解开发的" class="headerlink" title="注解开发的"></a>注解开发的</h3><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">本质：反射机制实现</span><br><span class="line">底层：动态代理！</span><br><span class="line">弊端：使用注解来映射简单语句会使代码显得更加简洁，但对于稍微复杂一点</span><br><span class="line">的语句，Java 注解不仅力不从心，还会让你本就复杂的 SQL 语句更加混乱</span><br><span class="line">不堪。 因此，如果你需要做一些很复杂的操作，最好用 XML 来映射语句。 </span><br></pre></td></tr></table></figure>
<h2 id="二、Mybatis执行流程"><a href="#二、Mybatis执行流程" class="headerlink" title="二、Mybatis执行流程"></a>二、Mybatis执行流程</h2><p><img src="https://img-blog.csdnimg.cn/2019062319433043.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MjcwMTA2,size_16,color_FFFFFF,t_70"></p>
<h2 id="三、-注解的CRUD"><a href="#三、-注解的CRUD" class="headerlink" title="三、 注解的CRUD"></a>三、 注解的CRUD</h2><h3 id="1-在MybatisUtils中开启自动提交"><a href="#1-在MybatisUtils中开启自动提交" class="headerlink" title="1. 在MybatisUtils中开启自动提交"></a>1. 在MybatisUtils中开启自动提交</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-编写接口文件"><a href="#2-编写接口文件" class="headerlink" title="2. 编写接口文件"></a>2. 编写接口文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">getUserByID</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into user(id,name,pwd) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delUserByID</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> <span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update user set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-编写测试类"><a href="#3-编写测试类" class="headerlink" title="3. 编写测试类"></a>3. 编写测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">    User user = mapper.getUserByID(<span class="number">2</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    mapper.insertUser(<span class="keyword">new</span> User(<span class="number">6</span>,<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;1231234&quot;</span>));</span><br><span class="line">    mapper.delUserByID(<span class="number">6</span>);</span><br><span class="line">    mapper.updateUser(<span class="keyword">new</span> User(<span class="number">10</span>,<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;22223&quot;</span>));</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="关于-Param"><a href="#关于-Param" class="headerlink" title="关于@Param()"></a>关于@Param()</h3><ul>
<li>基于类型的参数或者String类型，需要加上。</li>
<li>引用类型不需要加。</li>
<li>如果只有一个基本类型的话，可以忽略，但是建议加上。</li>
<li>在SQL中引用的就是@Param()中设置的属性。</li>
</ul>
<h3 id="和-区别"><a href="#和-区别" class="headerlink" title="#{} 和 ${}区别"></a>#{} 和 ${}区别</h3><p>#{} 是预编译处理，像传进来的数据会加个” “（#将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号）<br>${} 就是字符串替换。直接替换掉占位符。$方式一般用于传入数据库对象，例如传入表名.<br>使用 ${} 的话会导致 sql 注入。</p>
]]></content>
      <categories>
        <category>Mybatis学习</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis的一对多</title>
    <url>/posts/48548.html</url>
    <content><![CDATA[<h1 id="Mybatis的一对多"><a href="#Mybatis的一对多" class="headerlink" title="Mybatis的一对多"></a>Mybatis的一对多</h1><h2 id="一、对应关系"><a href="#一、对应关系" class="headerlink" title="一、对应关系"></a>一、对应关系</h2><p>比如：一个老师拥有多个学生！对老师而言，就是一对多的关系！</p>
<a id="more"></a>
<h2 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h2><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//一个老师拥有多个学生</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、一对多的处理"><a href="#三、一对多的处理" class="headerlink" title="三、一对多的处理"></a>三、一对多的处理</h2><h3 id="1-按照结果嵌套处理"><a href="#1-按照结果嵌套处理" class="headerlink" title="1. 按照结果嵌套处理"></a>1. 按照结果嵌套处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--按照结果嵌套查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getTeacherStudent&quot;</span>&gt;</span></span><br><span class="line">    select t.id tid,t.name tname,s.id sid,s.name sname from teacher t,students s where s.tid = t.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;getTeacherStudent&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复杂的属性，我们需要单独处理 对象：association 集合：collection--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--avaType=&quot;&quot; 指定的属性类型！--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--集合中的泛型信息，我们使用ofType--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-按照查询嵌套的方式处理"><a href="#2-按照查询嵌套的方式处理" class="headerlink" title="2. 按照查询嵌套的方式处理"></a>2. 按照查询嵌套的方式处理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;getTeacherStudent2&quot;</span>&gt;</span></span><br><span class="line">    select id as tid,name as tname from teacher where id = #&#123;tid&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;getTeacherStudent2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentByTeacherId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    select * from students where tid = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h2><ol>
<li>关联 - association</li>
<li>集合 - collection</li>
<li>JavaType &amp; ofType<ol>
<li>JavaType 用来指定实体类中属性的类型</li>
<li>ofType 用来指定映射到List或者集合中的pojo类型，泛型中的约束类型！</li>
</ol>
</li>
</ol>
<h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><ul>
<li>保证SQL的可读性，尽量保证通俗易懂</li>
<li>注意一对多和多对一中属性名和字段名问题！</li>
<li>如果问题不好排查错误，可以使用日志log4j</li>
</ul>
<h3 id="面试高频"><a href="#面试高频" class="headerlink" title="面试高频"></a>面试高频</h3><ul>
<li>MySQL引擎</li>
<li>InnoDB底层原理</li>
<li>索引</li>
<li>索引优化</li>
</ul>
]]></content>
      <categories>
        <category>Mybatis学习</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis分页</title>
    <url>/posts/6770.html</url>
    <content><![CDATA[<h1 id="Mybatis分页"><a href="#Mybatis分页" class="headerlink" title="Mybatis分页"></a>Mybatis分页</h1><h2 id="一、为什么要分页？"><a href="#一、为什么要分页？" class="headerlink" title="一、为什么要分页？"></a>一、为什么要分页？</h2><ul>
<li>减少数据处理<h2 id="二、SQL分页语句limit"><a href="#二、SQL分页语句limit" class="headerlink" title="二、SQL分页语句limit"></a>二、SQL分页语句limit</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 语法：select * from mybatis.user limit startIndex,pageSize;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mybatis.user limit <span class="number">0</span>,<span class="number">2</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mybatis.user limit <span class="number">3</span>; #[<span class="number">0</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="三、使用Mybatis实现分页"><a href="#三、使用Mybatis实现分页" class="headerlink" title="三、使用Mybatis实现分页"></a>三、使用Mybatis实现分页</h2><h3 id="1-接口"><a href="#1-接口" class="headerlink" title="1. 接口"></a>1. 接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserListBylimit</span><span class="params">(Map&lt;String ,Integer&gt; map)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-Mapper-xml"><a href="#2-Mapper-xml" class="headerlink" title="2. Mapper.xml"></a>2. Mapper.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserListBylimit&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3. 测试"></a>3. 测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    map.put(<span class="string">&quot;pageSize&quot;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userListBylimit = mapper.getUserListBylimit(map);</span><br><span class="line">    System.out.println(userListBylimit);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="四、通过RowBounds实现分页"><a href="#四、通过RowBounds实现分页" class="headerlink" title="四、通过RowBounds实现分页"></a>四、通过RowBounds实现分页</h2>不再使用SQL实现分页<h3 id="1-接口-1"><a href="#1-接口-1" class="headerlink" title="1. 接口"></a>1. 接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserListByRowBounds</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-Mapper-xml-1"><a href="#2-Mapper-xml-1" class="headerlink" title="2. Mapper.xml"></a>2. Mapper.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserListByRowBounds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-测试-1"><a href="#3-测试-1" class="headerlink" title="3. 测试"></a>3. 测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    RowBounds rowBounds = <span class="keyword">new</span> RowBounds(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;com.nichu.dao.UserMapper.getUserListByRowBounds&quot;</span>, <span class="keyword">null</span>, rowBounds);</span><br><span class="line">    System.out.println(userList);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Mybatis/20210525214150.png"></li>
</ul>
]]></content>
      <categories>
        <category>Mybatis学习</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis的多对一</title>
    <url>/posts/32459.html</url>
    <content><![CDATA[<h1 id="Mybatis的多对一"><a href="#Mybatis的多对一" class="headerlink" title="Mybatis的多对一"></a>Mybatis的多对一</h1><h2 id="一、对应关系"><a href="#一、对应关系" class="headerlink" title="一、对应关系"></a>一、对应关系</h2><ul>
<li>多个学生，对应一个老师。</li>
<li>对于学生这边而言， <strong>关联：</strong> 多个学生关联一个老师。</li>
<li>对于老师而言，<strong>集合：</strong> 一个老师有很多学生。<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Mybatis/20210528211429.png"></li>
</ul>
<a id="more"></a>
<h2 id="二、测试环境的搭建"><a href="#二、测试环境的搭建" class="headerlink" title="二、测试环境的搭建"></a>二、测试环境的搭建</h2><ol>
<li>导入lombok。</li>
<li>新建实体类Student,Teacher。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Student</span></span><br><span class="line"> <span class="meta">@Data</span></span><br><span class="line"> <span class="meta">@NoArgsConstructor</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">     <span class="keyword">private</span> String name;</span><br><span class="line">     <span class="keyword">private</span> Teacher teacher;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Teacher</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>建立Mapper接口。</li>
<li>建立Mapper.xml文件。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 以TeacherMapper.xml为例 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.nichu.dao.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在核心配置文件中绑定Mapper接口或者文件！</li>
<li>测试查询是否能够成功。</li>
</ol>
<h2 id="三、按照查询嵌套的方式实现多对一"><a href="#三、按照查询嵌套的方式实现多对一" class="headerlink" title="三、按照查询嵌套的方式实现多对一"></a>三、按照查询嵌套的方式实现多对一</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">思路：</span></span><br><span class="line"><span class="comment">1.查询所有学生信息</span></span><br><span class="line"><span class="comment">2. 根据查询出来的学生的tid，寻找对应的老师!  子查询</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Student&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher&quot;</span>&gt;</span></span><br><span class="line">    select * from students;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">复杂的属性，我们需要单独处理</span></span><br><span class="line"><span class="comment">对象：association</span></span><br><span class="line"><span class="comment">集合：collection</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span> <span class="attr">select</span>=<span class="string">&quot;getTeacher&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getTeacher&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.teacher where id =#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="四、按照结果嵌套处理"><a href="#四、按照结果嵌套处理" class="headerlink" title="四、按照结果嵌套处理"></a>四、按照结果嵌套处理</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--按照结果嵌套处理</span></span><br><span class="line"><span class="comment">思路：</span></span><br><span class="line"><span class="comment">1.查询所有学生信息</span></span><br><span class="line"><span class="comment">2.根据查询出来的学生的tid (teacher) 查找 teacher.name 并关联到结果集的tname</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudent2&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentTeacher2&quot;</span>&gt;</span></span><br><span class="line">    select s.id sid ,s.name sname,t.name tname</span><br><span class="line">    from students s,teacher t</span><br><span class="line">    where s.tid = t.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;StudentTeacher2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="五、回顾MySQL多对一查询方式"><a href="#五、回顾MySQL多对一查询方式" class="headerlink" title="五、回顾MySQL多对一查询方式"></a>五、回顾MySQL多对一查询方式</h2><h3 id="1-子查询"><a href="#1-子查询" class="headerlink" title="1. 子查询"></a>1. 子查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students <span class="keyword">where</span> tid <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> teacher)</span><br></pre></td></tr></table></figure>
<h3 id="2-联表查询"><a href="#2-联表查询" class="headerlink" title="2. 联表查询"></a>2. 联表查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> students s,teacher t <span class="keyword">where</span> s.tid <span class="operator">=</span> t.id;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mybatis学习</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis简介</title>
    <url>/posts/50273.html</url>
    <content><![CDATA[<h1 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h1><h2 id="一、什么是-MyBatis？"><a href="#一、什么是-MyBatis？" class="headerlink" title="一、什么是 MyBatis？"></a>一、什么是 MyBatis？</h2><p><img src="https://mybatis.org/images/mybatis-logo.png"></p>
<ul>
<li><p>MyBatis 是一款优秀的<strong>持久层框架</strong>。</p>
</li>
<li><p>它支持自定义 SQL、存储过程以及高级映射。</p>
</li>
<li><p>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</p>
</li>
<li><p>MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>
</li>
<li><p>MyBatis 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。</p>
</li>
<li><p>2013年11月迁移到Github。</p>
<a id="more"></a>
<h2 id="二、如何获得Mybatis"><a href="#二、如何获得Mybatis" class="headerlink" title="二、如何获得Mybatis?"></a>二、如何获得Mybatis?</h2></li>
<li><p>maven仓库 :</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Github : <a href="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases</a></p>
</li>
<li><p>中文文档 : <a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
<h2 id="三、什么是持久层"><a href="#三、什么是持久层" class="headerlink" title="三、什么是持久层"></a>三、什么是持久层</h2><h3 id="1-数据持久化"><a href="#1-数据持久化" class="headerlink" title="1. 数据持久化"></a>1. 数据持久化</h3></li>
<li><p>持久化就是将程序的数据在持久状态和瞬时状态转化的过程。</p>
</li>
<li><p>内存：<strong>断电即失</strong></p>
</li>
<li><p>数据库（jdbc）,io文件持久化。</p>
</li>
<li><p>生活中：冷藏</p>
</li>
</ul>
<h3 id="2-为什么需要持久化"><a href="#2-为什么需要持久化" class="headerlink" title="2. 为什么需要持久化"></a>2. 为什么需要持久化</h3><ul>
<li>有一些对象，不能让他丢掉</li>
<li>内存太贵</li>
</ul>
<h2 id="四、持久层"><a href="#四、持久层" class="headerlink" title="四、持久层"></a>四、持久层</h2><h3 id="Dao层，Service层，Controller层"><a href="#Dao层，Service层，Controller层" class="headerlink" title="Dao层，Service层，Controller层"></a>Dao层，Service层，Controller层</h3><ul>
<li>完成持久化工作的代码。</li>
<li>层界限十分明显。</li>
</ul>
<h2 id="五、为什么需要Mybatis？"><a href="#五、为什么需要Mybatis？" class="headerlink" title="五、为什么需要Mybatis？"></a>五、为什么需要Mybatis？</h2><ul>
<li>帮助程序员将数据存入数据库中。</li>
<li>方便</li>
<li>传统的JDBC代码太复杂。简化，框架。自动化。</li>
<li>不用Mybatis也可以。只不过用了更容易上手。<strong>技术没有高低之分</strong>。</li>
<li>优点： <ul>
<li>简单</li>
<li>灵活</li>
<li>sql和代码分离，提高了可维护性</li>
<li>提供映射标签，支持对象与数据库的orm字段关系映射</li>
<li>提供对象关系映射，支持对象关系组建维护</li>
<li>提供xml标签，支持编写动态sql。</li>
</ul>
</li>
</ul>
<p><strong>最重要的一点： 使用的人多</strong></p>
]]></content>
      <categories>
        <category>Mybatis学习</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis的配置解析</title>
    <url>/posts/63670.html</url>
    <content><![CDATA[<h1 id="Mybatis的配置解析"><a href="#Mybatis的配置解析" class="headerlink" title="Mybatis的配置解析"></a>Mybatis的配置解析</h1><h2 id="一、核心配置文件"><a href="#一、核心配置文件" class="headerlink" title="一、核心配置文件"></a>一、核心配置文件</h2><ul>
<li>mybatis-config.xml</li>
<li>Mybatis的配置文件包含了会深深影响Mybatis行为的设置和属性信息。<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="二、环境配置（environments）"><a href="#二、环境配置（environments）" class="headerlink" title="二、环境配置（environments）"></a>二、环境配置（environments）</h2>Mybatis可以配置成适应多套运行环境<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- default:选择默认的环境 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;...&quot;</span> <span class="attr">value</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p>
<p>学会使用配置多套运行环境！</p>
<p>Mybatis默认的事务管理器就是JDBC，连接池：POOLED</p>
<h2 id="三、属性（properties）"><a href="#三、属性（properties）" class="headerlink" title="三、属性（properties）"></a>三、属性（properties）</h2><h3 id="1-注意：配置文件中的标签一定要按顺序排布"><a href="#1-注意：配置文件中的标签一定要按顺序排布" class="headerlink" title="1. 注意：配置文件中的标签一定要按顺序排布"></a>1. 注意：配置文件中的标签一定要按顺序排布</h3><p>properties -&gt; settings -&gt; typeAliases -&gt; typeHandlers……<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Mybatis/20210524172356.png"><br>这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置【db.properties】</p>
<h3 id="2-可以通过properties属性来实现引用外部配置文件"><a href="#2-可以通过properties属性来实现引用外部配置文件" class="headerlink" title="2. 可以通过properties属性来实现引用外部配置文件"></a>2. 可以通过properties属性来实现引用外部配置文件</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!--</span> <span class="string">db.properties --&gt;</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?useSSL=false&amp;;useUnicode=true&amp;;characterEncoding=UTF-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">nc20011019</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Mybatis/20210524172622.png"></p>
<h3 id="3-可以直接在核心配置文件中直接设置"><a href="#3-可以直接在核心配置文件中直接设置" class="headerlink" title="3. 可以直接在核心配置文件中直接设置"></a>3. 可以直接在核心配置文件中直接设置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dev_user&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;F2Fa3!33TYyg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-当同时配置以上两种方式时，优先使用外部配置文件！！！"><a href="#4-当同时配置以上两种方式时，优先使用外部配置文件！！！" class="headerlink" title="4. 当同时配置以上两种方式时，优先使用外部配置文件！！！"></a>4. 当同时配置以上两种方式时，优先使用外部配置文件！！！</h3><h2 id="四、类型别名（typeAliases）"><a href="#四、类型别名（typeAliases）" class="headerlink" title="四、类型别名（typeAliases）"></a>四、类型别名（typeAliases）</h2><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写</p>
<h3 id="1-类型别名可为实体类设置一个缩写名字。-它仅用于XML配置，意在降低冗余的全限定类名书写。"><a href="#1-类型别名可为实体类设置一个缩写名字。-它仅用于XML配置，意在降低冗余的全限定类名书写。" class="headerlink" title="1. 类型别名可为实体类设置一个缩写名字。 它仅用于XML配置，意在降低冗余的全限定类名书写。"></a>1. 类型别名可为实体类设置一个缩写名字。 它仅用于XML配置，意在降低冗余的全限定类名书写。</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以给实体类起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.nichu.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;User&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Mybatis/20210524173548.png"></p>
<h3 id="2-也可以指定一个包名，MyBatis-会在包名下面搜索需要的实体类"><a href="#2-也可以指定一个包名，MyBatis-会在包名下面搜索需要的实体类" class="headerlink" title="2. 也可以指定一个包名，MyBatis 会在包名下面搜索需要的实体类"></a>2. 也可以指定一个包名，MyBatis 会在包名下面搜索需要的实体类</h3><p>扫描实体类的包，它的默认别名就为这个类的类名，首字母小写！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 读取包下所有实体类 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.nihcu.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在实体类比较少的时候使用第一种<br>如果实体类十分多，建议使用第二种</p>
<h2 id="五、其他配置"><a href="#五、其他配置" class="headerlink" title="五、其他配置"></a>五、其他配置</h2><ul>
<li>typeHandlers（类型处理器）</li>
<li>objectFactory（对象工厂）</li>
<li>plugins（插件）<ul>
<li>mybatis-generator-core</li>
<li>mybatis-plus</li>
<li>通用mapper</li>
</ul>
</li>
</ul>
<h2 id="六、映射器-mappers"><a href="#六、映射器-mappers" class="headerlink" title="六、映射器(mappers)"></a>六、映射器(mappers)</h2><p>MapperRegistry:注册绑定我们的Mapper文件；<br>方式一：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/AuthorMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/builder/PostMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>方式二：使用class文件绑定注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用映射器接口实现类的完全限定类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.AuthorMapper&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.BlogMapper&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.builder.PostMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>方式三：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;org.mybatis.builder&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>方法二和方法三的注意点：</p>
<ul>
<li>接口和他的Mapper配置文件必须同名！</li>
<li>接口和他的Mapper配置文件必须在同一个包下！</li>
</ul>
<h2 id="七、生命周期和作用域"><a href="#七、生命周期和作用域" class="headerlink" title="七、生命周期和作用域"></a>七、生命周期和作用域</h2><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Mybatis/20210524175827.PNG"></p>
<p>生命周期，和作用域，是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。 SqISessionFactoryBuilder:</p>
<ul>
<li>一旦创建了SqlSessionFactory, 就不再需要它了</li>
<li>局部变量</li>
</ul>
<p><strong>SqISessionFactory:</strong></p>
<ul>
<li>说白了就是可以想象为:数据库连接池</li>
<li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。</li>
<li>因此SqlSessionFactory的最佳作用域是应用作用域。</li>
<li>最简单的就是使用单例模式或者静态单例模式。</li>
</ul>
<p><strong>SqISession</strong></p>
<ul>
<li>连接到连接池的一个请求!</li>
<li>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</li>
<li>用完之后需要赶紧关闭，否则资源被占用!</li>
</ul>
<h2 id="八、解决属性名和字段名不一致的问题"><a href="#八、解决属性名和字段名不一致的问题" class="headerlink" title="八、解决属性名和字段名不一致的问题"></a>八、解决属性名和字段名不一致的问题</h2><h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h3><p>数据库中的字段（pwd）<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Mybatis/20210525162447.png"></p>
<p>若实体类中的字段和数据库中的不一致（password）<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Mybatis/20210525162734.png"></p>
<p>数据库查不出来<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Mybatis/20210525163521.png"></p>
<p>原因：类处理器识别不出来</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">select * from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>类处理器</span><br><span class="line">select id,name,pwd from mybatis.user where id = #&#123;id&#125;;</span><br></pre></td></tr></table></figure>
<p>解决方法：</p>
<ul>
<li>起别名，修改sql<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserListById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.nichu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">  select id,name,pwd as password from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-解决方法-resultMap"><a href="#2-解决方法-resultMap" class="headerlink" title="2. 解决方法 resultMap"></a>2. 解决方法 resultMap</h3><h4 id="结果集映射"><a href="#结果集映射" class="headerlink" title="结果集映射"></a>结果集映射</h4><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">id name pwd</span><br><span class="line">id name password</span><br></pre></td></tr></table></figure>
在接口配置文件中添加结果集映射<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--结果集映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column数据库中的字段，property实体类中的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserListById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserMap&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Mybatis/20210525164541.png"><blockquote>
<p>column对应数据库中的字段，property对应实体类的属性。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Mybatis学习</category>
      </categories>
  </entry>
  <entry>
    <title>SMBMS项目学习</title>
    <url>/posts/5246.html</url>
    <content><![CDATA[<h1 id="SMBMS项目学习"><a href="#SMBMS项目学习" class="headerlink" title="SMBMS项目学习"></a>SMBMS项目学习</h1><h2 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h2><p><img src="https://img-blog.csdnimg.cn/20190925140503738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NsaXNrcw==,size_16,color_FFFFFF,t_70"></p>
<h2 id="在数据库中创建对应的表"><a href="#在数据库中创建对应的表" class="headerlink" title="在数据库中创建对应的表"></a>在数据库中创建对应的表</h2><a id="more"></a>
<h2 id="一、-搭建项目环境（准备工作）"><a href="#一、-搭建项目环境（准备工作）" class="headerlink" title="一、 搭建项目环境（准备工作）"></a>一、 搭建项目环境（准备工作）</h2><h3 id="1-搭建一个maven-web项目"><a href="#1-搭建一个maven-web项目" class="headerlink" title="1. 搭建一个maven web项目"></a>1. 搭建一个maven web项目</h3><h3 id="2-配置Tomcat"><a href="#2-配置Tomcat" class="headerlink" title="2. 配置Tomcat"></a>2. 配置Tomcat</h3><h3 id="3-测试项目是否能正常运行"><a href="#3-测试项目是否能正常运行" class="headerlink" title="3. 测试项目是否能正常运行"></a>3. 测试项目是否能正常运行</h3><h3 id="4-导入项目jar包"><a href="#4-导入项目jar包" class="headerlink" title="4. 导入项目jar包"></a>4. 导入项目jar包</h3><p>   jsp,Servlet,mysql驱动，jstl，standard…</p>
<h3 id="5-创建项目包结构"><a href="#5-创建项目包结构" class="headerlink" title="5. 创建项目包结构"></a>5. 创建项目包结构</h3><p>   <img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210514105149.png"></p>
<h3 id="6-编写实体类pojo"><a href="#6-编写实体类pojo" class="headerlink" title="6. 编写实体类pojo"></a>6. 编写实体类pojo</h3><h3 id="7-编写基础公共类"><a href="#7-编写基础公共类" class="headerlink" title="7. 编写基础公共类"></a>7. 编写基础公共类</h3><pre><code>1. 数据库配置文件db.properties
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">dirver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">nc20011019</span></span><br></pre></td></tr></table></figure>
2. 编写数据库公共类 </code></pre>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//操作数据库的公共类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String username;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">   <span class="comment">//静态代码块，类加载的时候就初始化了</span></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">      Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">      <span class="comment">//通过类加载器读取对应的资源</span></span><br><span class="line">      InputStream is = BaseDao.class.getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(is);</span><br><span class="line"></span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      driver = properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">      url = properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">      username = properties.getProperty(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">      password = properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//获取数据库连接对象</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">      Connection connection=<span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            connection = DriverManager.getConnection(url, username, password);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> connection;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//编写数据库查询公共类</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultSet <span class="title">execute</span><span class="params">(String sql,Connection connection,Object[] params,ResultSet resultSet ,PreparedStatement preparedStatement)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">      preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;params.length;i++)&#123;</span><br><span class="line">            preparedStatement.setObject(i+<span class="number">1</span>,params[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      resultSet = preparedStatement.executeQuery();</span><br><span class="line">      <span class="keyword">return</span> resultSet;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//编写数据库增删改公共类</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">execute</span><span class="params">(String sql,Connection connection,Object[] params,PreparedStatement preparedStatement )</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">      preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;params.length;i++)&#123;</span><br><span class="line">            preparedStatement.setObject(i+<span class="number">1</span>,params[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> updateRows = preparedStatement.executeUpdate();</span><br><span class="line">      <span class="keyword">return</span> updateRows;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//释放资源</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">closeResource</span><span class="params">(Connection connection,PreparedStatement preparedStatement,ResultSet resultSet)</span></span>&#123;</span><br><span class="line">      <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">if</span> (resultSet!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               resultSet.close();</span><br><span class="line">               <span class="comment">//gc回收</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">               throwables.printStackTrace();</span><br><span class="line">               flag=<span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (preparedStatement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               preparedStatement.close();</span><br><span class="line">               <span class="comment">//gc回收</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">               throwables.printStackTrace();</span><br><span class="line">               flag=<span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               connection.close();</span><br><span class="line">               <span class="comment">//gc回收</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">               throwables.printStackTrace();</span><br><span class="line">               flag=<span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> flag;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>编写字符编码过滤器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">      servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">      servletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">      filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-导入静态资源"><a href="#8-导入静态资源" class="headerlink" title="8. 导入静态资源"></a>8. 导入静态资源</h3><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210515092051.png"><h2 id="二、登录页功能实现"><a href="#二、登录页功能实现" class="headerlink" title="二、登录页功能实现"></a>二、登录页功能实现</h2><img src="https://kuangstudy.oss-cn-beijing.aliyuncs.com/bbs/2021/03/27/kuangstudya6d03a8e-56f9-47d7-88db-e65e3ad92f20.png"><h3 id="1、登录功能实现"><a href="#1、登录功能实现" class="headerlink" title="1、登录功能实现"></a>1、登录功能实现</h3></li>
<li>编写前端页面</li>
<li>设置欢迎页面<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--设置欢迎页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写Dao层得到用户登录接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"> <span class="comment">//得到登录的用户</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> User <span class="title">getLoginUser</span><span class="params">(Connection connection, String userCode)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写dao接口的实现类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> User <span class="title">getLoginUser</span><span class="params">(Connection connection, String userCode)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">      ResultSet resultSet =<span class="keyword">null</span>;</span><br><span class="line">      PreparedStatement preparedStatement = <span class="keyword">null</span>;</span><br><span class="line">      User user = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            String sql=<span class="string">&quot;select * from smbms_user where userCode=?&quot;</span>;</span><br><span class="line">            Object[] params = &#123;userCode&#125;;</span><br><span class="line">            resultSet = BaseDao.execute(sql,connection,params,resultSet,preparedStatement);</span><br><span class="line">            <span class="keyword">if</span> (resultSet.next())&#123;</span><br><span class="line">               user = <span class="keyword">new</span> User();</span><br><span class="line">               user.setId(resultSet.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">               user.setUserCode(resultSet.getString(<span class="string">&quot;userCode&quot;</span>));</span><br><span class="line">               user.setUserName(resultSet.getString(<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">               user.setUserPassword(resultSet.getString(<span class="string">&quot;userPassword&quot;</span>));</span><br><span class="line">               user.setGender(resultSet.getInt(<span class="string">&quot;gender&quot;</span>));</span><br><span class="line">               user.setBirthday(resultSet.getDate(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">               user.setPhone(resultSet.getString(<span class="string">&quot;phone&quot;</span>));</span><br><span class="line">               user.setAddress(resultSet.getString(<span class="string">&quot;address&quot;</span>));</span><br><span class="line">               user.setUserRole(resultSet.getInt(<span class="string">&quot;userRole&quot;</span>));</span><br><span class="line">               user.setCreatedBy(resultSet.getInt(<span class="string">&quot;createdBy&quot;</span>));</span><br><span class="line">               user.setCreationDate(resultSet.getTimestamp(<span class="string">&quot;creationDate&quot;</span>));</span><br><span class="line">               user.setModifyBy(resultSet.getInt(<span class="string">&quot;modifyBy&quot;</span>));</span><br><span class="line">               user.setModifyDate(resultSet.getTimestamp(<span class="string">&quot;modifyDate&quot;</span>));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            BaseDao.closeResource(<span class="keyword">null</span>,preparedStatement,resultSet);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> user;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>业务层接口<blockquote>
<p>在service下建立user包，建立UserService接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//用户登录</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String userCode, String password)</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line">   ```   </span><br><span class="line"><span class="number">6.</span> 业务层接口实现类</span><br><span class="line">   ``` java</span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="comment">//业务层都会调用Dao层，所以要引用Dao层</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">login</span><span class="params">(String userCode, String password)</span> </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        User user = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = BaseDao.getConnection();</span><br><span class="line">            <span class="comment">//通过业务层调用对应的具体的数据库</span></span><br><span class="line">            user = userDao.getLoginUser(connection,userCode);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            BaseDao.closeResource(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li>编写Servlet类<blockquote>
<p>在Servlet包中创建user包，在user包中建立LoginServlet类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"> <span class="comment">//Servlet:控制层，调用业务层代码</span></span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;LoginServlet--start....&quot;</span>);</span><br><span class="line">     <span class="comment">//获取用户名和密码</span></span><br><span class="line">     String userCode = req.getParameter(<span class="string">&quot;userCode&quot;</span>);</span><br><span class="line">     String userPassword = req.getParameter(<span class="string">&quot;userPassword&quot;</span>);</span><br><span class="line">     <span class="comment">//和数据库中的密码进行对比，调用业务层；</span></span><br><span class="line">     UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">     User user = userService.login(userCode, userPassword);  <span class="comment">//这里已经把登录的人给查出来了</span></span><br><span class="line">     System.out.println(userCode);</span><br><span class="line">     System.out.println(userPassword);</span><br><span class="line">     <span class="keyword">if</span> (user!=<span class="keyword">null</span>)&#123; <span class="comment">//查有此人，可以登录</span></span><br><span class="line">         <span class="comment">//将用户的信息放到Session中;</span></span><br><span class="line">         req.getSession().setAttribute(Constants.USER_SESSION,user);</span><br><span class="line">         <span class="comment">//跳转到主页</span></span><br><span class="line">         resp.sendRedirect(<span class="string">&quot;jsp/frame.jsp&quot;</span>);</span><br><span class="line">     &#125;<span class="keyword">else</span> &#123;<span class="comment">//查无此人，无法登录</span></span><br><span class="line">         <span class="comment">//转发回登录页面，顺带提示它，用户名或者密码错误；</span></span><br><span class="line">         req.setAttribute(<span class="string">&quot;error&quot;</span>,<span class="string">&quot;用户名或者密码不正确&quot;</span>);</span><br><span class="line">         req.getRequestDispatcher(<span class="string">&quot;login.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     doGet(req, resp);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在web.xml中注册<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.user.LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2、注销功能实现"><a href="#2、注销功能实现" class="headerlink" title="2、注销功能实现"></a>2、注销功能实现</h3><ol>
<li>在Servlet包的user包中建立LogoutServlett类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogoutServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     <span class="comment">//移除用户的Constants.USER_SESSION</span></span><br><span class="line">     req.getSession().removeAttribute(Constants.USER_SESSION);</span><br><span class="line">     resp.sendRedirect(<span class="string">&quot;/login.jsp&quot;</span>);<span class="comment">//返回登录页面</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     doGet(req, resp);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在web.xml中注册<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LogoutServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.user.LogoutServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LogoutServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/jsp/logout.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>设置自动注销<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置30分后session自动失效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3、-登录拦截功能实现"><a href="#3、-登录拦截功能实现" class="headerlink" title="3、 登录拦截功能实现"></a>3、 登录拦截功能实现</h3></li>
</ol>
</li>
<li>在filter中建立SysFilter类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">     HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">     HttpServletResponse response = (HttpServletResponse) resp;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//过滤器，从Session中获取用户，</span></span><br><span class="line">     User user = (User) request.getSession().getAttribute(Constants.USER_SESSION);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (user==<span class="keyword">null</span>)&#123; <span class="comment">//已经被移除或者注销了，或者未登录</span></span><br><span class="line">         response.sendRedirect(<span class="string">&quot;/error.jsp&quot;</span>);</span><br><span class="line">     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         chain.doFilter(req,resp);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在web.xml中注册<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--用户登录过滤器--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SysFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.kuang.filter.SysFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SysFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/jsp/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="二、密码修改的实现"><a href="#二、密码修改的实现" class="headerlink" title="二、密码修改的实现"></a>二、密码修改的实现</h3></li>
<li>导入前端素材</li>
<li>编写dao层用户修改密码的接口UserDao<blockquote>
<p>UserDao接口写如下代码 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改当前用户密码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updatePwd</span><span class="params">(Connection connection, <span class="keyword">int</span> id, String password)</span> <span class="keyword">throws</span> SQLException</span>;</span><br></pre></td></tr></table></figure></li>
<li>编写UserDao 接口实现类UserDaoImpl<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updatePwd</span><span class="params">(Connection connection, <span class="keyword">int</span> id, String password)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> execute = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        String sql = <span class="string">&quot;update smbms_user set userPassword = ? where id = ?&quot;</span>;</span><br><span class="line">        Object params[] = &#123;password,id&#125;;</span><br><span class="line">        execute = BaseDao.execute(connection, sql, params, pstm);</span><br><span class="line">        BaseDao.closeResource(<span class="keyword">null</span>,pstm,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> execute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>编写业务层接口<blockquote>
<p>在service的user包中的UserService接口中添加如下代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据用户ID修改密码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updatePwd</span><span class="params">(<span class="keyword">int</span> id, String pwd)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>编写业务层接口实现类<blockquote>
<p>在service的user包中的UserServiceImpl类中添加以下代码</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updatePwd</span><span class="params">(<span class="keyword">int</span> id, String pwd)</span> </span>&#123;</span><br><span class="line">     Connection connection = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">     <span class="comment">//修改密码</span></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         connection = BaseDao.getConnection();</span><br><span class="line">         <span class="keyword">if</span> (userDao.updatePwd(connection,id,pwd)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">             flag = <span class="keyword">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">         BaseDao.closeResource(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> flag;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li>编写Servlet类<blockquote>
<p>在Servlet包中的user包中建立UserServlet类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     String method = req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">     <span class="keyword">if</span> (method.equals(<span class="string">&quot;savepwd&quot;</span>)&amp;&amp;method!=<span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">this</span>.updatePwd(req,resp);</span><br><span class="line">     &#125;<span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">&quot;pwdmodify&quot;</span>))&#123;</span><br><span class="line">         <span class="keyword">this</span>.pwdModify(req, resp);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     doGet(req, resp);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//修改密码</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePwd</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">     <span class="comment">//从Session里面拿ID;</span></span><br><span class="line">     Object o = req.getSession().getAttribute(Constants.USER_SESSION);</span><br><span class="line"></span><br><span class="line">     String newpassword = req.getParameter(<span class="string">&quot;newpassword&quot;</span>);</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;UserServlet:&quot;</span>+newpassword);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">     System.out.println(o!=<span class="keyword">null</span>);</span><br><span class="line">     System.out.println(StringUtils.isNullOrEmpty(newpassword));</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (o!=<span class="keyword">null</span> &amp;&amp; newpassword!=<span class="keyword">null</span>)&#123;</span><br><span class="line">         UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">         flag = userService.updatePwd(((User) o).getId(), newpassword);</span><br><span class="line">         <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">             req.setAttribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;修改密码成功，请退出，使用新密码登录&quot;</span>);</span><br><span class="line">             <span class="comment">//密码修改成功，移除当前Session</span></span><br><span class="line">             req.getSession().removeAttribute(Constants.USER_SESSION);</span><br><span class="line">         &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">             req.setAttribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;密码修改失败&quot;</span>);</span><br><span class="line">             <span class="comment">//密码修改成功，移除当前Session</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         req.setAttribute(<span class="string">&quot;message&quot;</span>,<span class="string">&quot;新密码有问题&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         req.getRequestDispatcher(<span class="string">&quot;pwdmodify.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//验证旧密码,session中有用户的密码</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pwdModify</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line">     <span class="comment">//从Session里面拿ID;</span></span><br><span class="line"></span><br><span class="line">     Object o = req.getSession().getAttribute(Constants.USER_SESSION);</span><br><span class="line">     String oldpassword = req.getParameter(<span class="string">&quot;oldpassword&quot;</span>);</span><br><span class="line">     System.out.println(oldpassword);</span><br><span class="line">     <span class="comment">//万能的Map : 结果集</span></span><br><span class="line">     Map&lt;String, String&gt; resultMap = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (o==<span class="keyword">null</span>)&#123; <span class="comment">//Session失效了，session过期了</span></span><br><span class="line">         resultMap.put(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;sessionerror&quot;</span>);</span><br><span class="line">     &#125;<span class="keyword">else</span> <span class="keyword">if</span> (StringUtils.isNullOrEmpty(oldpassword))&#123; <span class="comment">//输入的密码为空</span></span><br><span class="line">         resultMap.put(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;error&quot;</span>);</span><br><span class="line">     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         String userPassword = ((User) o).getUserPassword(); <span class="comment">//Session中用户的密码</span></span><br><span class="line">         <span class="keyword">if</span> (oldpassword.equals(userPassword))&#123;</span><br><span class="line">             resultMap.put(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">         &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">             resultMap.put(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;false&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         resp.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">         PrintWriter writer = resp.getWriter();</span><br><span class="line">         <span class="comment">//JSONArray 阿里巴巴的JSON工具类, 转换格式</span></span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">         resultMap = [&quot;result&quot;,&quot;sessionerror&quot;,&quot;result&quot;,&quot;error&quot;]</span></span><br><span class="line"><span class="comment">         Json格式 = &#123;key：value&#125;</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">         writer.write(JSONArray.toJSONString(resultMap));</span><br><span class="line">         writer.flush();</span><br><span class="line">         writer.close();</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>  <strong>在web.xml中注册</strong><br>  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>updatePwd<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.user.UserServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>updatePwd<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/jsp/user.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="三、用户管理实现"><a href="#三、用户管理实现" class="headerlink" title="三、用户管理实现"></a>三、用户管理实现</h2><h3 id="1-导入分页的工具类"><a href="#1-导入分页的工具类" class="headerlink" title="1. 导入分页的工具类"></a>1. 导入分页的工具类</h3><p>PageSupport<br>userlist.jsp</p>
<h3 id="2-获取用户数量"><a href="#2-获取用户数量" class="headerlink" title="2. 获取用户数量"></a>2. 获取用户数量</h3><blockquote>
<p>select count(1) as count from smbms_user u,smbms_role r where u.userRole=r.id; 联表查询用户数量</p>
</blockquote>
<ol>
<li>UserDao<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询用户总数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserCount</span><span class="params">(Connection connection,String username ,<span class="keyword">int</span> userRole)</span><span class="keyword">throws</span> SQLException</span>;</span><br></pre></td></tr></table></figure></li>
<li>UserDaoImpl<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserCount</span><span class="params">(Connection connection, String username, <span class="keyword">int</span> userRole)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">     <span class="comment">//根据用户名或者角色查询用户总数</span></span><br><span class="line"></span><br><span class="line">     PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">     ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">         StringBuffer sql = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">         sql.append(<span class="string">&quot;select count(1) as count from smbms_user u,smbms_role r where u.userRole = r.id&quot;</span>);</span><br><span class="line">         ArrayList&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;Object&gt;();<span class="comment">//存放我们的参数</span></span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (!StringUtils.isNullOrEmpty(username))&#123;</span><br><span class="line">             sql.append(<span class="string">&quot; and u.userName like ?&quot;</span>);</span><br><span class="line">             list.add(<span class="string">&quot;%&quot;</span>+username+<span class="string">&quot;%&quot;</span>); <span class="comment">//index:0</span></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (userRole&gt;<span class="number">0</span>)&#123;</span><br><span class="line">             sql.append(<span class="string">&quot; and u.userRole = ?&quot;</span>);</span><br><span class="line">             list.add(userRole); <span class="comment">//index:1</span></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">//怎么把List转换为数组</span></span><br><span class="line">         Object[] params = list.toArray();</span><br><span class="line"></span><br><span class="line">         System.out.println(<span class="string">&quot;UserDaoImpl-&gt;getUserCount:&quot;</span>+sql.toString()); <span class="comment">//输出最后完整的SQL语句</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         rs = BaseDao.execute(connection, pstm, rs, sql.toString(), params);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (rs.next())&#123;</span><br><span class="line">             count = rs.getInt(<span class="string">&quot;count&quot;</span>); <span class="comment">//从结果集中获取最终的数量</span></span><br><span class="line">         &#125;</span><br><span class="line">         BaseDao.closeResource(<span class="keyword">null</span>,pstm,rs);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> count;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li>UserService<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询用户总数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserCount</span><span class="params">(Connection connection,String username ,<span class="keyword">int</span> userRole)</span><span class="keyword">throws</span> SQLException</span>;</span><br></pre></td></tr></table></figure></li>
<li>UserServiceImpl<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserCount</span><span class="params">(String username, <span class="keyword">int</span> userRole)</span> </span>&#123;</span><br><span class="line">         Connection connection = <span class="keyword">null</span>;</span><br><span class="line">         <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             connection = BaseDao.getConnection();</span><br><span class="line">             count = userDao.getUserCount(connection, username, userRole);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">             BaseDao.closeResource(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> count;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-获取用户列表"><a href="#2-获取用户列表" class="headerlink" title="2.获取用户列表"></a>2.获取用户列表</h3></li>
<li>UserDao<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过条件查询-userList</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">(Connection connection, String userName, <span class="keyword">int</span> userRole, <span class="keyword">int</span> currentPageNo, <span class="keyword">int</span> pageSize)</span><span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure></li>
<li>UserDaoImpl<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">(Connection connection, String userName,<span class="keyword">int</span> userRole,<span class="keyword">int</span> currentPageNo, <span class="keyword">int</span> pageSize)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">    <span class="keyword">if</span>(connection != <span class="keyword">null</span>)&#123;</span><br><span class="line">        StringBuffer sql = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        sql.append(<span class="string">&quot;select u.*,r.roleName as userRoleName from smbms_user u,smbms_role r where u.userRole = r.id&quot;</span>);</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isNullOrEmpty(userName))&#123;</span><br><span class="line">            sql.append(<span class="string">&quot; and u.userName like ?&quot;</span>);</span><br><span class="line">            list.add(<span class="string">&quot;%&quot;</span>+userName+<span class="string">&quot;%&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(userRole &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            sql.append(<span class="string">&quot; and u.userRole = ?&quot;</span>);</span><br><span class="line">            list.add(userRole);</span><br><span class="line">        &#125;</span><br><span class="line">        sql.append(<span class="string">&quot; order by creationDate DESC limit ?,?&quot;</span>);</span><br><span class="line">        currentPageNo = (currentPageNo-<span class="number">1</span>)*pageSize;</span><br><span class="line">        list.add(currentPageNo);</span><br><span class="line">        list.add(pageSize);</span><br><span class="line"></span><br><span class="line">        Object[] params = list.toArray();</span><br><span class="line">        System.out.println(<span class="string">&quot;sql ----&gt; &quot;</span> + sql.toString());</span><br><span class="line">        rs = BaseDao.execute(connection, pstm, rs, sql.toString(), params);</span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            User _user = <span class="keyword">new</span> User();</span><br><span class="line">            _user.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            _user.setUserCode(rs.getString(<span class="string">&quot;userCode&quot;</span>));</span><br><span class="line">            _user.setUserName(rs.getString(<span class="string">&quot;userName&quot;</span>));</span><br><span class="line">            _user.setGender(rs.getInt(<span class="string">&quot;gender&quot;</span>));</span><br><span class="line">            _user.setBirthday(rs.getDate(<span class="string">&quot;birthday&quot;</span>));</span><br><span class="line">            _user.setPhone(rs.getString(<span class="string">&quot;phone&quot;</span>));</span><br><span class="line">            _user.setUserRole(rs.getInt(<span class="string">&quot;userRole&quot;</span>));</span><br><span class="line">            _user.setUserRoleName(rs.getString(<span class="string">&quot;userRoleName&quot;</span>));</span><br><span class="line">            userList.add(_user);</span><br><span class="line">        &#125;</span><br><span class="line">        BaseDao.closeResource(<span class="keyword">null</span>, pstm, rs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>UserService<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询记录数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserCount</span><span class="params">(String username,<span class="keyword">int</span> userRole)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>UserServiceImpl<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">(String queryUserName, <span class="keyword">int</span> queryUserRole, <span class="keyword">int</span> currentPageNo, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">    Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">null</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;queryUserName ---- &gt; &quot;</span> + queryUserName);</span><br><span class="line">    System.out.println(<span class="string">&quot;queryUserRole ---- &gt; &quot;</span> + queryUserRole);</span><br><span class="line">    System.out.println(<span class="string">&quot;currentPageNo ---- &gt; &quot;</span> + currentPageNo);</span><br><span class="line">    System.out.println(<span class="string">&quot;pageSize ---- &gt; &quot;</span> + pageSize);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        connection = BaseDao.getConnection();</span><br><span class="line">        userList = userDao.getUserList(connection, queryUserName,queryUserRole,currentPageNo,pageSize);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        BaseDao.closeResource(connection, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-获取角色操作"><a href="#3-获取角色操作" class="headerlink" title="3.获取角色操作"></a>3.获取角色操作</h3></li>
<li>UserDao<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取角色列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleList</span><span class="params">(Connection connection)</span><span class="keyword">throws</span> SQLException</span>;</span><br></pre></td></tr></table></figure></li>
<li>UserDaoImpl<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleDaoImpl</span> <span class="keyword">implements</span> <span class="title">RoleDao</span> </span>&#123;</span><br><span class="line"> <span class="comment">//获取角色列表</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleList</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">     PreparedStatement pstm = <span class="keyword">null</span>;</span><br><span class="line">     ResultSet resultSet = <span class="keyword">null</span>;</span><br><span class="line">     ArrayList&lt;Role&gt; roleList = <span class="keyword">new</span> ArrayList&lt;Role&gt;();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (connection!=<span class="keyword">null</span>)&#123;</span><br><span class="line">         String sql = <span class="string">&quot;select * from smbms_role&quot;</span>;</span><br><span class="line">         Object[] params = &#123;&#125;;</span><br><span class="line">         resultSet = BaseDao.execute(connection, pstm, resultSet, sql, params);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">             Role _role = <span class="keyword">new</span> Role();</span><br><span class="line">             _role.setId(resultSet.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">             _role.setRoleCode(resultSet.getString(<span class="string">&quot;roleCode&quot;</span>));</span><br><span class="line">             _role.setRoleName(resultSet.getString(<span class="string">&quot;roleName&quot;</span>));</span><br><span class="line">             roleList.add(_role);</span><br><span class="line">         &#125;</span><br><span class="line">         BaseDao.closeResource(<span class="keyword">null</span>,pstm,resultSet);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> roleList;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>UserService<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//获取角色列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleList</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>UserServiceImpl<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleServiceImpl</span> <span class="keyword">implements</span> <span class="title">RoleService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//引入Dao</span></span><br><span class="line"> <span class="keyword">private</span> RoleDao roleDao;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">RoleServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     roleDao = <span class="keyword">new</span> RoleDaoImpl();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getRoleList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     Connection connection = <span class="keyword">null</span>;</span><br><span class="line">     List&lt;Role&gt; roleList = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         connection = BaseDao.getConnection();</span><br><span class="line">         roleList = roleDao.getRoleList(connection);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         BaseDao.closeResource(connection,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> roleList;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-编写Servlet类"><a href="#4-编写Servlet类" class="headerlink" title="4.编写Servlet类"></a>4.编写Servlet类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加一个if判断</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String method = req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">&quot;savepwd&quot;</span>)&amp;&amp;method!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.updatePwd(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">&quot;pwdmodify&quot;</span>)&amp;&amp;method!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.pwdModify(req, resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">&quot;query&quot;</span>)&amp;&amp;method!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.query(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//query方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询用户列表</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从前端获取数据；</span></span><br><span class="line">        String queryUserName = req.getParameter(<span class="string">&quot;queryname&quot;</span>);</span><br><span class="line">        String temp = req.getParameter(<span class="string">&quot;queryUserRole&quot;</span>);</span><br><span class="line">        String pageIndex = req.getParameter(<span class="string">&quot;pageIndex&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> queryUserRole = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取用户列表</span></span><br><span class="line">        UserServiceImpl userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次走这个请求，一定是第一页，页面大小固定的；</span></span><br><span class="line">        <span class="keyword">int</span> pageSize = <span class="number">5</span>; <span class="comment">//可以把这个些到配置文件中，方便后期修改；</span></span><br><span class="line">        <span class="keyword">int</span> currentPageNo = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (queryUserName ==<span class="keyword">null</span>)&#123;</span><br><span class="line">            queryUserName = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (temp!=<span class="keyword">null</span> &amp;&amp; !temp.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            queryUserRole = Integer.parseInt(temp);  <span class="comment">//给查询赋值！0,1,2,3</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pageIndex!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            currentPageNo = Integer.parseInt(pageIndex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取用户的总数 (分页：  上一页，下一页的情况)</span></span><br><span class="line">        <span class="keyword">int</span> totalCount = userService.getUserCount(queryUserName, queryUserRole);</span><br><span class="line">        <span class="comment">//总页数支持</span></span><br><span class="line">        PageSupport pageSupport = <span class="keyword">new</span> PageSupport();</span><br><span class="line">        pageSupport.setCurrentPageNo(currentPageNo);</span><br><span class="line">        pageSupport.setPageSize(pageSize);</span><br><span class="line">        pageSupport.setTotalCount(totalCount);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> totalPageCount = ((<span class="keyword">int</span>)(totalCount/pageSize))+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//控制首页和尾页</span></span><br><span class="line">        <span class="comment">//如果页面要小于1了，就显示第一页的东西</span></span><br><span class="line">        <span class="keyword">if</span> (currentPageNo&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            currentPageNo = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (currentPageNo&gt;totalPageCount)&#123; <span class="comment">//当前页面大于了最后一页；</span></span><br><span class="line">            currentPageNo = totalPageCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取用户列表展示</span></span><br><span class="line">        userList = userService.getUserList(queryUserName, queryUserRole, currentPageNo, pageSize);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;userList&quot;</span>,userList);</span><br><span class="line"></span><br><span class="line">        RoleServiceImpl roleService = <span class="keyword">new</span> RoleServiceImpl();</span><br><span class="line">        List&lt;Role&gt; roleList = roleService.getRoleList();</span><br><span class="line">        req.setAttribute(<span class="string">&quot;roleList&quot;</span>,roleList);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;totalCount&quot;</span>,totalCount);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;currentPageNo&quot;</span>,currentPageNo);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;totalPageCount&quot;</span>,totalPageCount);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;queryUserName&quot;</span>,queryUserName);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;queryUserRole&quot;</span>,queryUserRole);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回前端</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;userlist.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>Mybatis缓存</title>
    <url>/posts/11971.html</url>
    <content><![CDATA[<h1 id="Mybatis缓存"><a href="#Mybatis缓存" class="headerlink" title="Mybatis缓存"></a>Mybatis缓存</h1><h2 id="一、缓存"><a href="#一、缓存" class="headerlink" title="一、缓存"></a>一、缓存</h2><h3 id="1-什么是缓存【Cache】？"><a href="#1-什么是缓存【Cache】？" class="headerlink" title="1. 什么是缓存【Cache】？"></a>1. 什么是缓存【Cache】？</h3><ul>
<li>存在内存中的临时数据</li>
<li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上（关系型数据库数据文件）查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题<h3 id="2-为什么使用缓存？"><a href="#2-为什么使用缓存？" class="headerlink" title="2. 为什么使用缓存？"></a>2. 为什么使用缓存？</h3></li>
<li>减少和数据库交互的次数，减少系统开销，提高系统的效率<h3 id="3-什么样的数据能使用缓存？"><a href="#3-什么样的数据能使用缓存？" class="headerlink" title="3. 什么样的数据能使用缓存？"></a>3. 什么样的数据能使用缓存？</h3></li>
<li>经常查询并且不经常使用的数据<a id="more"></a>
<h2 id="二、Mybatis缓存"><a href="#二、Mybatis缓存" class="headerlink" title="二、Mybatis缓存"></a>二、Mybatis缓存</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3></li>
<li>Mybatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</li>
<li>Mybatis系统默认定义了两级缓存：一级缓存和二级缓存<ul>
<li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</li>
<li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li>
<li>为了提高扩展性，Mybatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li>
</ul>
</li>
</ul>
<h2 id="三、-一级缓存"><a href="#三、-一级缓存" class="headerlink" title="三、 一级缓存"></a>三、 一级缓存</h2><ul>
<li>一级缓存也叫本地缓存：<ul>
<li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li>
<li>以后如果需要获取相同的数据，直接从缓存中拿，没必要再去查询数据库。<h2 id="四、-二级缓存"><a href="#四、-二级缓存" class="headerlink" title="四、 二级缓存"></a>四、 二级缓存</h2></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Mybatis学习</category>
      </categories>
  </entry>
  <entry>
    <title>Spring简介</title>
    <url>/posts/47931.html</url>
    <content><![CDATA[<h2 id="一、Spring简介"><a href="#一、Spring简介" class="headerlink" title="一、Spring简介"></a>一、Spring简介</h2><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/">官方文档</a></p>
<ul>
<li>Spring：春天—&gt;给软件行业带来春天</li>
<li>2002年首次推出spring雏形：interface 21架构</li>
<li>spring理念：使现有的技术更加容易使用，本身是一个大杂烩，整合了现有的技术框架！解决企业应用开发的复杂性。</li>
<li>SSH：Struct2+Spring+Hibernate</li>
<li>SSM：SpringMVC+Spring+Mybatis<a id="more"></a>
官网：<a href="https://spring.io/projects/spring-framework#overview">https://spring.io/projects/spring-framework#overview</a></li>
</ul>
<p>官方下载地址：<a href="https://repo.spring.io/release/org/springframework/spring/">https://repo.spring.io/release/org/springframework/spring/</a></p>
<p>Github地址：<a href="https://github.com/spring-projects/spring-framework">https://github.com/spring-projects/spring-framework</a></p>
<p>导入jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="二、优点"><a href="#二、优点" class="headerlink" title="二、优点"></a>二、优点</h2><ul>
<li>Spring是一个开源的免费的框架（容器）！</li>
<li>Spring是一个轻量级的、非入侵式的框架！</li>
<li>控制反转（IOC），面向切面编程（AOP）</li>
<li>支持事务处理，对框架整合的支持！</li>
</ul>
<p>总结一句话：Spring就是一个轻量级的控制反转（IOC）和面向切面编程的框架！</p>
<h2 id="三、组成"><a href="#三、组成" class="headerlink" title="三、组成"></a>三、组成</h2><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20230113153326.png"></p>
<h2 id="四、扩展"><a href="#四、扩展" class="headerlink" title="四、扩展"></a>四、扩展</h2><p>在Spring的官网有这个介绍：现代化的java开发就是基于Spring的开发！</p>
<p>构建一切 Spring Boot build Anything<br>协调一切 Spring cloud coordinate Anything<br>连接一切 Spring cloud Data Flow Connect Everything</p>
<h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><ul>
<li>一个快速开发的脚手架</li>
<li>基于SpringBoot可以快速开发单个微服务。</li>
<li>约定大于配置</li>
</ul>
<h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3><ul>
<li>SpringCloud是基于SpringBoot实现的</li>
</ul>
<p>因为现在大多数公司都在使用SpringBoot开发，学习SpringBoot前提是，需要完全掌握Spring及SpringMVC！Spring起承上启下的作用！</p>
<p>弊端：发展太久之后，违背了原来的理念！配置十分繁琐，人称：”配置地狱！”</p>
]]></content>
      <categories>
        <category>Spring5学习</category>
      </categories>
  </entry>
  <entry>
    <title>第一个Mybatis程序</title>
    <url>/posts/55620.html</url>
    <content><![CDATA[<h1 id="第一个Mybatis程序"><a href="#第一个Mybatis程序" class="headerlink" title="第一个Mybatis程序"></a>第一个Mybatis程序</h1><p>流程：搭建环境–&gt;导入Mybatis–&gt;编写代码–&gt;测试</p>
<h2 id="一、搭建环境"><a href="#一、搭建环境" class="headerlink" title="一、搭建环境"></a>一、搭建环境</h2><h3 id="1-搭建数据库"><a href="#1-搭建数据库" class="headerlink" title="1. 搭建数据库"></a>1. 搭建数据库</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Mybatis/20210521105721.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis`;</span><br><span class="line">USE `mybatis`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>`(</span><br><span class="line">	`id` <span class="type">INT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span>,</span><br><span class="line">	`name` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`pwd` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span></span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>`(`id`,`name`,`pwd`) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;倪矗1&#x27;</span>,<span class="string">&#x27;1234&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;倪矗2&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;倪矗3&#x27;</span>,<span class="string">&#x27;12346&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;倪矗4&#x27;</span>,<span class="string">&#x27;123654&#x27;</span>)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2-新建项目-作为父项目"><a href="#2-新建项目-作为父项目" class="headerlink" title="2. 新建项目(作为父项目)"></a>2. 新建项目(作为父项目)</h3><ol>
<li>新建一个普通的Maven项目</li>
<li>删除src文件</li>
<li>导入jar包<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-创建模块-作为子项目，子项目可以直接使用父项目的依赖"><a href="#3-创建模块-作为子项目，子项目可以直接使用父项目的依赖" class="headerlink" title="3. 创建模块(作为子项目，子项目可以直接使用父项目的依赖)"></a>3. 创建模块(作为子项目，子项目可以直接使用父项目的依赖)</h3></li>
</ol>
<h2 id="二、配置第一个Mybatis程序"><a href="#二、配置第一个Mybatis程序" class="headerlink" title="二、配置第一个Mybatis程序"></a>二、配置第一个Mybatis程序</h2><p><strong>目录结构:</strong><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210913160042.png"></p>
<h3 id="1-编写mybatis工具类"><a href="#1-编写mybatis工具类" class="headerlink" title="1. 编写mybatis工具类"></a>1. 编写mybatis工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sqlSessionFactory</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用Mybatis获取sqlSessionFactory</span></span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;<span class="comment">//resource指向核心配置文件</span></span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//既然有了 SqlSessionFactory，顾名思义，我们可以从中获得 SqlSession 的实例。</span></span><br><span class="line">    <span class="comment">// SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-编写mybatis核心配置文件"><a href="#2-编写mybatis核心配置文件" class="headerlink" title="2. 编写mybatis核心配置文件"></a>2. 编写mybatis核心配置文件</h3><p>在resources目录中新建mybatis-config.xml文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 环境标签内配置链接数据库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> </span></span><br><span class="line"><span class="tag">                        <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;nc20011019&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-编写数据库每张表的实体类pojo"><a href="#3-编写数据库每张表的实体类pojo" class="headerlink" title="3. 编写数据库每张表的实体类pojo"></a>3. 编写数据库每张表的实体类pojo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nichu.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-编写Dao层接口"><a href="#4-编写Dao层接口" class="headerlink" title="4. 编写Dao层接口"></a>4. 编写Dao层接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nichu.dao;</span><br><span class="line"><span class="keyword">import</span> com.nichu.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-编写配置文件绑定接口并实现对数据库的操作"><a href="#5-编写配置文件绑定接口并实现对数据库的操作" class="headerlink" title="5.  编写配置文件绑定接口并实现对数据库的操作"></a>5.  编写配置文件绑定接口并实现对数据库的操作</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--namespace=绑定一个对应的Dao/Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.nichu.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id为绑定的方法名，resultType=实体类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.nichu.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--编写sql语句--&gt;</span></span><br><span class="line">        select * from mybatis.user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="6-在核心配置文件中添加映射"><a href="#6-在核心配置文件中添加映射" class="headerlink" title="6. 在核心配置文件中添加映射"></a>6. 在核心配置文件中添加映射</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/nichu/dao/UserMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="7-编写测试类"><a href="#7-编写测试类" class="headerlink" title="7. 编写测试类"></a>7. 编写测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.nichu.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.nichu.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.nichu.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//一、获得sqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法一：getMapper(推荐使用)</span></span><br><span class="line">        UserDao UserDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line">        List&lt;User&gt; userList = UserDao.getUserList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法二：（不推荐使用）</span></span><br><span class="line">        List&lt;User&gt; uu = sqlSession.selectList(<span class="string">&quot;com.nichu.dao.UserDao.getUserList&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : uu) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8-关于在maven项目中配置文件资源导出问题"><a href="#8-关于在maven项目中配置文件资源导出问题" class="headerlink" title="8. 关于在maven项目中配置文件资源导出问题"></a>8. 关于在maven项目中配置文件资源导出问题</h3><p>标准的Maven项目都会有一个resources目录来存放我们所有的资源配置文件，但是我们往往在项目中不仅仅会把所有的资源配置文件都放在resources中，同时我们也有可能放在项目中的其他位置，那么默认的maven项目构建编译时就不会把我们其他目录下的资源配置文件导出到target目录中，就会导致我们的资源配置文件读取失败，从而导致我们的项目报错出现异常，比如说尤其我们在使用MyBatis框架时，往往Mapper.xml配置文件都会放在dao包中和dao接口类放在一起的,那么执行程序的时候，其中的xml配置文件就一定会读取失败，不会生成到maven的target目录中，所以我们要在项目的pom.xml文件中进行设置，并且我建议大家，每新建一个maven项目，就把该设置导入pom.xml文件中，以防不测！！！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mybatis学习</category>
      </categories>
  </entry>
  <entry>
    <title>HelloSpring</title>
    <url>/posts/12515.html</url>
    <content><![CDATA[<h1 id="HelloSpring"><a href="#HelloSpring" class="headerlink" title="HelloSpring"></a>HelloSpring</h1><h2 id="一、新建maven项目，编写实体类。"><a href="#一、新建maven项目，编写实体类。" class="headerlink" title="一、新建maven项目，编写实体类。"></a>一、新建maven项目，编写实体类。</h2><ol>
<li>导包<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>编写实体类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;str=&#x27;&quot;</span> + str + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二、编写xml配置文件"><a href="#二、编写xml配置文件" class="headerlink" title="二、编写xml配置文件"></a>二、编写xml配置文件</h2></li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--使用Spring来创建对象，在Spring这些都称为Bean</span><br><span class="line">    类型 变量名 = <span class="keyword">new</span> 类型();</span><br><span class="line">    Hello hello = <span class="keyword">new</span> Hello();</span><br><span class="line"></span><br><span class="line">    id = 变量名</span><br><span class="line">    <span class="class"><span class="keyword">class</span> </span>= <span class="keyword">new</span>的对象</span><br><span class="line">    property 相当于给对象中的属性设置一个值！</span><br><span class="line">        --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;hello&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;com.kuang.pojo.Hello&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;str&quot;</span> value=<span class="string">&quot;Spring&quot;</span>/&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>
<h2 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取Spring的上下文对象！</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//我们的对象现在都在Spring中的管理了，我们需要使用，直接去里面取出来就可以！</span></span><br><span class="line">        Hello hello = (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="四、思考问题？"><a href="#四、思考问题？" class="headerlink" title="四、思考问题？"></a>四、思考问题？</h2><ul>
<li>Hello对象是谁创建的？<ul>
<li>Hello对象是由Spring创建的。</li>
</ul>
</li>
<li>Hello对象的属性是怎么设置的？<ul>
<li>Hello对象的属性是由Spring容器设置的。</li>
</ul>
</li>
</ul>
<p><strong>控制：</strong> 谁来控制对象的创建，传统应用程序的对象是由程序本身控制创建的，使用Spring后，对象是由Spring来创建的。</p>
<p><strong>反转：</strong> 程序本身不创建对象，而变成被动的接收对象。</p>
<p><strong>依赖注入：</strong> 就是利用set方法来进行注入的。</p>
<p>IOC是一种编程思想，由主动的编程变成被动的接收。</p>
<p>可以通过new ClassPathXmlApplicationContext去浏览一下底层源码。</p>
<p><strong>OK，到了现在，我们彻底不用在程序中去改动了，要实现不同的操作，只需要在xml配置文件中进行修改，所谓的IOC，一句话搞定：对象由Spring来创建，管理，装配！</strong></p>
<h2 id="五、IoC创建对象的方式"><a href="#五、IoC创建对象的方式" class="headerlink" title="五、IoC创建对象的方式"></a>五、IoC创建对象的方式</h2><h3 id="1-使用无参构造创建对象，默认！"><a href="#1-使用无参构造创建对象，默认！" class="headerlink" title="1. 使用无参构造创建对象，默认！"></a>1. 使用无参构造创建对象，默认！</h3><h3 id="2-假设我们要使用有参构造创建对象。"><a href="#2-假设我们要使用有参构造创建对象。" class="headerlink" title="2. 假设我们要使用有参构造创建对象。"></a>2. 假设我们要使用有参构造创建对象。</h3><ol>
<li>下标赋值<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种方式：下标赋值    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;狂神说Java&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>类型<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二种方式：通过类型的创建，不建议使用    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;lifa&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>参数名<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--第三种方式：直接通过参数名来设置    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李发&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>总结：在配置文件加载的时候，容器中管理的对象就已经初始化了！</strong></p>
]]></content>
      <categories>
        <category>Spring5学习</category>
      </categories>
  </entry>
  <entry>
    <title>IOC理论推导</title>
    <url>/posts/36444.html</url>
    <content><![CDATA[<h1 id="IOC理论推导"><a href="#IOC理论推导" class="headerlink" title="IOC理论推导"></a>IOC理论推导</h1><h2 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h2><p><strong>控制反转IoC（Inversion of Control）</strong>，是一种设计思想，<strong>DI（依赖注入）</strong> 是实现IoC的一种方法，也有人认为DI只是IoC的另一种说法。没有IoC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方，个人认为所谓控制反转就是：获得依赖对象的方式反转了。</p>
<a id="more"></a>
<ol>
<li>UserDao 接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>UserDaoImpl 实现类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;默认获取用户数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>UserService 业务接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>UserServiceImpl 业务实现类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户实际调用的是业务层，dao层他们不需要接触！</span></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        userService.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
在我们之前的业务中，用户的需求可能会影响我们原来的代码，我们需要根据用户的需求去修改原代码！如果程序代码量十分大，修改一次的成本代价十分昂贵！<br>在这里插入图片描述<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210911212407.png"><br>我们使用一个Set接口实现，已经发生了革命性的变化！</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过set方法从外界传入对象，避免对象被写死在程序中，从而降低代码的耦合性，方便用户自定义。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>之前，程序是主动创建对象！控制权在程序猿手上！</li>
<li>使用了set注入后，程序不再具有主动性，而是变成了被动的接收对象！</li>
</ul>
<p>这种思想，从本质上解决了问题，我们程序猿不用再去管理对象的创建了。系统的耦合性大大降低~，可以更加专注的在业务的实现上！这是IOC的原型！<br>在这里插入图片描述<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210911212504.png"></p>
<p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。<br>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IoC容器，其实现方法是<strong>依赖注入（Dependency Injection，DI）</strong>。</p>
]]></content>
      <categories>
        <category>Spring5学习</category>
      </categories>
  </entry>
  <entry>
    <title>ESP-01S实现智能灯控</title>
    <url>/posts/1069.html</url>
    <content><![CDATA[<h1 id="ESP-01S实现智能灯控"><a href="#ESP-01S实现智能灯控" class="headerlink" title="ESP-01S实现智能灯控"></a>ESP-01S实现智能灯控</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着HomeAssistant和HomeBridge的接入，我屋内的智能家居开始变得完备起来，智能风扇，智能加湿器，智能温湿度传感器。这一切都归功于树莓派和这一颗热爱折腾的心😄。剩下的问题就是把家用灯也变得智能起来，只有这个实现了，这一套才算是入门级智能家居了吧。</p>
<p><strong>问题分析:</strong><br>智能风扇的实现得益于小米智能插座，湿度传感器是接在树莓派上的。显然我不能把家用灯接在智能插座或树莓派上—-太臃肿。</p>
<p><strong>机缘巧合</strong><br>一个偶然的瞬间我在网上发现，可以通过ESP-01S模块加继电器实现对家用灯的控制。</p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><table>
<thead>
<tr>
<th>材料</th>
<th>价格</th>
</tr>
</thead>
<tbody><tr>
<td>ESP-01s模块</td>
<td>5.65</td>
</tr>
<tr>
<td>Relay继电器</td>
<td>4.2</td>
</tr>
<tr>
<td>ESP-01s烧录下载器</td>
<td>8.2</td>
</tr>
<tr>
<td>220V转5V降压模块</td>
<td>4</td>
</tr>
<tr>
<td>总计</td>
<td>22.05</td>
</tr>
<tr>
<td>除了这些以外，还需要杜邦线若干。</td>
<td></td>
</tr>
</tbody></table>
<p>从左到右分别为ESP-01/ESP-01s芯片 、 继电器模块 、 ESP-01/ESP-01s烧录器<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915173231.jpeg"></p>
<p>降压模块:<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915173349.png"></p>
<h2 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h2><p>需要在Windows电脑上运行！！！</p>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载:"></a>下载:</h3><ul>
<li><p>固件驱动: <a href="https://github.com/Haikez/ESP_smart_lights.git">https://github.com/Haikez/ESP_smart_lights.git</a></p>
</li>
<li><p>工具: <a href="https://pan.baidu.com/s/1Lamp5MbUz9Cwf5_NhCgrIg">https://pan.baidu.com/s/1Lamp5MbUz9Cwf5_NhCgrIg</a> 提取码: r9fg</p>
<h3 id="刷写固件："><a href="#刷写固件：" class="headerlink" title="刷写固件："></a>刷写固件：</h3><p>打开下载好的文件夹，安装烧录器驱动。<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915173658.png"><br>用flash_download_tool工具将文件夹内的fullhaaboot.bin固件烧录到模块中。<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915174618.jpg"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915172021.jpg"></p>
</li>
</ul>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915172032.jpg"></p>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915172107.jpg"><br>这里COM口根据你实际选择</p>
<p>点击START进行刷写</p>
<p>如下显示时为刷写完成<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915172131.jpg"></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>完成之后，ESP-01s 会建立一个 SSID 为 HAA-XXXXXX 的开放 2.4GHz WiFi 热点，连接它，等待几秒钟，就会跳转到 Home Accessory Architect 的配置页面。（如果为未自动跳转，进入<strong>192.168.4.1:4567</strong>）</p>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915172501.png"></p>
<p>这里我们需要写一个 JSON 来配置 ESP-01 的功能，HAA 提供了相当丰富的物联网设备类型供我们选择，这里我们选择相对简单的的开关（Switch）来配置。</p>
<p><strong>将 wiki 中提供的范例 JSON 稍加修改：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;c&quot;</span>: &#123; <span class="attr">&quot;l&quot;</span>: <span class="number">1</span>, <span class="attr">&quot;b&quot;</span>: [&#123; <span class="attr">&quot;g&quot;</span>: <span class="number">2</span>, <span class="attr">&quot;t&quot;</span>: <span class="number">5</span> &#125;] &#125;,</span><br><span class="line">  <span class="attr">&quot;a&quot;</span>: [&#123;</span><br><span class="line">    <span class="attr">&quot;t&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;s&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;0&quot;</span>: &#123; <span class="attr">&quot;r&quot;</span>: [&#123; <span class="attr">&quot;g&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;v&quot;</span>: <span class="number">1</span> &#125;] &#125;,</span><br><span class="line">    <span class="attr">&quot;1&quot;</span>: &#123; <span class="attr">&quot;r&quot;</span>: [&#123; <span class="attr">&quot;g&quot;</span>: <span class="number">0</span>, <span class="attr">&quot;v&quot;</span>: <span class="number">0</span> &#125;] &#125;,</span><br><span class="line">    <span class="attr">&quot;b&quot;</span>: [&#123; <span class="attr">&quot;g&quot;</span>: <span class="number">2</span> &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里表示了一个基本类型的开关（”t”: 1），通过 GPIO 0 控制继电器，因为这个继电器模块是 GPIO 0 低电平时闭合，所以在下面的 “0” 表示开关关闭的选项中 “v”: 1 表示高电平，而 “1” 与之相反。LED 指示灯定义为 GPIO 1，按钮定义为 GPIO 2，”s”: 1 表示通电后默认为开关打开状态。</p>
<p>详细的配置规则可以参阅原项目的 <a href="https://github.com/RavenSystem/esp-homekit-devices/wiki/Switches">Wiki</a>。</p>
<p>将 JSON 填入配置页面，并在下方连接 WiFi，注意 ESP-01 仅能连接 2.4GHz 的 WiFi。</p>
<p>之后点击保存并等待 7 分钟左右，完成后 LED 会亮起几秒钟。</p>
<h2 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h2><p>将 220V 的火线与零线接到 220V 转 5V 降压模块上。</p>
<p>降压模块输出 5V 电接入继电器的 VCC 与 GND。将 ESP-01 插在继电器上，因为该继电器自带一个 5V 转 3.3V，所以可以直接给 ESP-01 供电。<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915175850.jpg"></p>
<p>由于我房间是两个开关控制一个灯，分别是门口和床头。所以只用对其中一个开关安装这套硬件。保持电路闭合，模块才可控制灯的状态，同时物理开关也可以控制灯的状态。</p>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915180609.JPG"></p>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915180627.jpg"></p>
<h2 id="添加-HomeKit-设备"><a href="#添加-HomeKit-设备" class="headerlink" title="添加 HomeKit 设备"></a>添加 HomeKit 设备</h2><p>在 iOS 设备中打开「家庭」App，通过下方的设置代码，按照正常步骤添加新配件。大约等待 30 秒即可添加完成。<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915180750.png"></p>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915180800.png"></p>
<p>现在我们就可以在 iOS 设备上通过 HomeKit 控制灯泡了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>优点: ESP-01s脱离了树莓派的控制，是一个单独的模块。所以具有更强的稳定性和实用性。由于是单片机，在单方面的性能上更好，延迟更低，是个非常有意义的项目。</p>
]]></content>
      <tags>
        <tag>智能家居</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring配置</title>
    <url>/posts/17454.html</url>
    <content><![CDATA[<h1 id="Spring配置"><a href="#Spring配置" class="headerlink" title="Spring配置"></a>Spring配置</h1><h2 id="一、别名"><a href="#一、别名" class="headerlink" title="一、别名"></a>一、别名</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--别名，如果添加了别名，我们也可以使用别名获取到这个对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;userNew&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="二、Bean的配置"><a href="#二、Bean的配置" class="headerlink" title="二、Bean的配置"></a>二、Bean的配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">id：bean的唯一标识符，也就是相当于我们学的对象名</span></span><br><span class="line"><span class="comment">class：bean对象所对应的全限定名：包名+类名</span></span><br><span class="line"><span class="comment">name：也是别名，而且name可以同时取多个别名</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.pojo.UserT&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user2 u2,u3;u4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黑心白莲&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="三、import"><a href="#三、import" class="headerlink" title="三、import"></a>三、import</h2><p>这个import。一般用于团队开发使用，它可以将多个配置文件，导入合并为一个。<br>假设，现在项目中有多个人开发，这三个人负责不同的类开发，不同的类需要注册在不同的bean中，我们可以利用import将所有人的beans.xml合并为一个总的！</p>
<ul>
<li>张三</li>
<li>李四</li>
<li>王五</li>
<li>applicationContext.xml</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;bean.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;bean2.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;bean3.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这三个文件中的配置就被添加到了applicationContext.xml中--&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用的时候，直接使用总的配置就可以了。</p>
]]></content>
      <categories>
        <category>Spring5学习</category>
      </categories>
  </entry>
  <entry>
    <title>过滤器与监听器</title>
    <url>/posts/32674.html</url>
    <content><![CDATA[<h1 id="过滤器与监听器"><a href="#过滤器与监听器" class="headerlink" title="过滤器与监听器"></a>过滤器与监听器</h1><h2 id="一、过滤器（Filter）"><a href="#一、过滤器（Filter）" class="headerlink" title="一、过滤器（Filter）"></a>一、过滤器（Filter）</h2><p>用于过滤网站的数据；</p>
<ul>
<li>处理中文代码</li>
<li>登录验证<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/JavaWeb/20210511162438.png"><a id="more"></a>
<h3 id="1-创建过滤器"><a href="#1-创建过滤器" class="headerlink" title="1. 创建过滤器"></a>1. 创建过滤器</h3><h4 id="编写一个过滤器实现Filter接口（注意导包）"><a href="#编写一个过滤器实现Filter接口（注意导包）" class="headerlink" title="编写一个过滤器实现Filter接口（注意导包）"></a>编写一个过滤器<strong>实现Filter接口</strong>（注意导包）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计网站在线人数：统计session</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//初始化服务器启动的时候就已经初始化了，随时等待过滤对象的出现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">//将servlet请求设置编码</span></span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//将servlet响应设置编码</span></span><br><span class="line">        servletResponse.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        servletResponse.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//链接下一个过滤器（固定不变）</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);<span class="comment">//让我们的请求继续走，如果不写，程序到这里就被拦截停止！！</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//销毁：服务器关闭的时候自动销毁</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEncodingFilter销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>记住创建过滤器的时候，要链接到下一个过滤器。filterChain.doFilter(servletRequest,servletResponse);（固定不变的代码）</p>
</blockquote>
</li>
</ul>
<h3 id="2-在web-xml中配置过滤器（和servlet类似）"><a href="#2-在web-xml中配置过滤器（和servlet类似）" class="headerlink" title="2. 在web.xml中配置过滤器（和servlet类似）"></a>2. 在web.xml中配置过滤器（和servlet类似）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--创建映射，这点和servlet类似--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.nichu.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  指定过滤器的作用范围 例如：</span></span><br><span class="line"><span class="comment">  只要是/hello的任何请求都会经过这个过滤器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>过滤器本质上就是一个servelt程序</strong></p>
<h2 id="二、监听器（Listener）"><a href="#二、监听器（Listener）" class="headerlink" title="二、监听器（Listener）"></a>二、监听器（Listener）</h2><h3 id="1-监测网站在线人数（基于session）"><a href="#1-监测网站在线人数（基于session）" class="headerlink" title="1. 监测网站在线人数（基于session）"></a>1. 监测网站在线人数（基于session）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计网站在线人数：统计session</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnlineCountListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//创建session监听：看你的一举一动</span></span><br><span class="line">    <span class="comment">//一但创建一个session就会自动触发这个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class="line">        ServletContext ctx = httpSessionEvent.getSession().getServletContext();</span><br><span class="line">        Integer onlineCount = (Integer) ctx.getAttribute(<span class="string">&quot;onlineCount&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(onlineCount==<span class="keyword">null</span>)&#123;</span><br><span class="line">            onlineCount=<span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> count=onlineCount.intValue();</span><br><span class="line">            onlineCount=<span class="keyword">new</span> Integer(count+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.setAttribute(<span class="string">&quot;onlineCount&quot;</span>,onlineCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//销毁session监听</span></span><br><span class="line">    <span class="comment">//一但创建一个session就会自动触发这个</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;</span><br><span class="line">        ServletContext ctx = httpSessionEvent.getSession().getServletContext();</span><br><span class="line">        Integer onlineCount = (Integer) ctx.getAttribute(<span class="string">&quot;onlineCount&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(onlineCount==<span class="number">0</span>)&#123;</span><br><span class="line">            onlineCount=<span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> count=onlineCount.intValue();</span><br><span class="line">            onlineCount=<span class="keyword">new</span> Integer(count-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.setAttribute(<span class="string">&quot;onlineCount&quot;</span>,onlineCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-编写index-jsp页面"><a href="#2-编写index-jsp页面" class="headerlink" title="2. 编写index.jsp页面"></a>2. 编写index.jsp页面</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> contentType=<span class="string">&quot;text/html; charset=utf-8&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;当前有&lt;span&gt;&lt;%=this.getServletConfig().getServletContext().getAttribute(&quot;onlineCount&quot;)%&gt;&lt;/span&gt;人在线&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h3 id="3-在web-xml中注册监听器"><a href="#3-在web-xml中注册监听器" class="headerlink" title="3. 在web.xml中注册监听器"></a>3. 在web.xml中注册监听器</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册监听器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.nichu.listener.OnlineCountListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-session销毁方法"><a href="#4-session销毁方法" class="headerlink" title="4. session销毁方法"></a>4. session销毁方法</h3><ul>
<li>手动销毁 getSession().invalidate();</li>
<li>自动销毁 在web.xml中设置超时时间<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--以分钟为单位 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>1<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaWeb学习</category>
      </categories>
  </entry>
  <entry>
    <title>树莓派安装HomeBridge</title>
    <url>/posts/50070.html</url>
    <content><![CDATA[<h1 id="树莓派安装HomeBridge"><a href="#树莓派安装HomeBridge" class="headerlink" title="树莓派安装HomeBridge"></a>树莓派安装HomeBridge</h1><h2 id="一、什么是HomeBridge"><a href="#一、什么是HomeBridge" class="headerlink" title="一、什么是HomeBridge"></a>一、什么是HomeBridge</h2><p>Homebridge是一个轻量级的NodeJS服务器，它是为了模拟iOS HomeKit API而构建的。利用这款软件，可以将家里的设备与Apple Home进行整合。还可以利用Homebridge来连接各种不被Apple Home支持的第三方应用。</p>
<p><strong>HomeBridge和HomeAssistant区别:</strong><br>homebridge是用于连接苹果homekit的工具，而homeassistant是一个独立智能家居控制系统。</p>
<a id="more"></a>
<h2 id="二、为安装Homebridge准备Raspberry-Pi"><a href="#二、为安装Homebridge准备Raspberry-Pi" class="headerlink" title="二、为安装Homebridge准备Raspberry Pi"></a>二、为安装Homebridge准备Raspberry Pi</h2><h3 id="将Node-js安装到Raspberry-Pi上为Homebridge做准备。"><a href="#将Node-js安装到Raspberry-Pi上为Homebridge做准备。" class="headerlink" title="将Node.js安装到Raspberry Pi上为Homebridge做准备。"></a>将Node.js安装到Raspberry Pi上为Homebridge做准备。</h3><p>Homebridge服务器是基于Node.js运行时构建的。</p>
<h4 id="1-第一个任务是将Node-js官方仓库添加到包列表中。"><a href="#1-第一个任务是将Node-js官方仓库添加到包列表中。" class="headerlink" title="1. 第一个任务是将Node.js官方仓库添加到包列表中。"></a>1. 第一个任务是将Node.js官方仓库添加到包列表中。</h4><p>这样做可以让安装更多最新版本的服务器软件，而不是默认的Raspbian软件库中的软件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_12.x | sudo bash -</span><br></pre></td></tr></table></figure>
<p>这个命令把Node Source网站上的bash脚本管到bash中，可以直接在网页浏览器中去验证这个脚本的内容。</p>
<h4 id="2-现在把node-js、Python以及GCC编译器安装到Raspberry-Pi上。"><a href="#2-现在把node-js、Python以及GCC编译器安装到Raspberry-Pi上。" class="headerlink" title="2. 现在把node.js、Python以及GCC编译器安装到Raspberry Pi上。"></a>2. 现在把node.js、Python以及GCC编译器安装到Raspberry Pi上。</h4><p>运行以下命令来安装这些软件包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install -y nodejs gcc g++ make python</span><br></pre></td></tr></table></figure>
<h4 id="3-运行下面的命令，验证nodejs是否已经安装完毕。"><a href="#3-运行下面的命令，验证nodejs是否已经安装完毕。" class="headerlink" title="3. 运行下面的命令，验证nodejs是否已经安装完毕。"></a>3. 运行下面的命令，验证nodejs是否已经安装完毕。</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>
<p>如果NodeJS软件已正确安装，该命令将返回当前版本。</p>
<h4 id="4-现在通过运行下面的命令来确保npm的版本是最新的。"><a href="#4-现在通过运行下面的命令来确保npm的版本是最新的。" class="headerlink" title="4. 现在通过运行下面的命令来确保npm的版本是最新的。"></a>4. 现在通过运行下面的命令来确保npm的版本是最新的。</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm install -g npm</span><br></pre></td></tr></table></figure>
<p>npm是NodsJS模块的包管理器，也是安装Homebridge软件所要用到的。<br>在Raspberry Pi上安装Homebridge</p>
<h3 id="在Raspberry-Pi上安装了NodeJS和npm之后，可以继续使用它们来安装Homebridge。"><a href="#在Raspberry-Pi上安装了NodeJS和npm之后，可以继续使用它们来安装Homebridge。" class="headerlink" title="在Raspberry Pi上安装了NodeJS和npm之后，可以继续使用它们来安装Homebridge。"></a>在Raspberry Pi上安装了NodeJS和npm之后，可以继续使用它们来安装Homebridge。</h3><h4 id="1-运行以下命令在Raspberry-Pi上安装Homebridge和Homebridge-Config-UI-X模块。"><a href="#1-运行以下命令在Raspberry-Pi上安装Homebridge和Homebridge-Config-UI-X模块。" class="headerlink" title="1. 运行以下命令在Raspberry Pi上安装Homebridge和Homebridge Config UI X模块。"></a>1. 运行以下命令在Raspberry Pi上安装Homebridge和Homebridge Config UI X模块。</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm install -g --unsafe-perm homebridge homebridge-config-ui-x</span><br></pre></td></tr></table></figure>
<p>在安装Homebridge的同时安装Homebridge Config UI X，因为它提供了一个易于使用的基于网络的Homebridge软件管理工具。</p>
<h4 id="2-要想让Homebridge软件在开机时启动，可以运行以下命令。"><a href="#2-要想让Homebridge软件在开机时启动，可以运行以下命令。" class="headerlink" title="2. 要想让Homebridge软件在开机时启动，可以运行以下命令。"></a>2. 要想让Homebridge软件在开机时启动，可以运行以下命令。</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo hb-service install --user homebridge</span><br></pre></td></tr></table></figure>
<p>该命令将使用提供的hb-service工具来设置并安装Homebridge作为服务。<br>访问Homebridge配置界面X</p>
<h4 id="1-要进入网页界面，需要知道Raspberry-Pi的IP地址。"><a href="#1-要进入网页界面，需要知道Raspberry-Pi的IP地址。" class="headerlink" title="1. 要进入网页界面，需要知道Raspberry Pi的IP地址。"></a>1. 要进入网页界面，需要知道Raspberry Pi的IP地址。</h4><p>可以通过运行以下命令获取Raspberry Pi的本地IP地址。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostname -I</span><br></pre></td></tr></table></figure>
<h4 id="2-在网络浏览器中，进入以下地址。"><a href="#2-在网络浏览器中，进入以下地址。" class="headerlink" title="2. 在网络浏览器中，进入以下地址。"></a>2. 在网络浏览器中，进入以下地址。</h4><p>请确保将”[RASPBERRYPIIPADDRESS]”替换为上一步检索到的IP地址。</p>
<p>http://[RASPBERRYPIIPADDRESS]:8581</p>
<h4 id="3-现在将出现以下登录界面。"><a href="#3-现在将出现以下登录界面。" class="headerlink" title="3. 现在将出现以下登录界面。"></a>3. 现在将出现以下登录界面。</h4><p>登录Homebridge软件，可以使用默认的用户名admin和默认的密码admin。</p>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915112925.png"></p>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915113218.png"></p>
]]></content>
      <categories>
        <category>树莓派的反击</category>
      </categories>
      <tags>
        <tag>智能家居</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派机器人</title>
    <url>/posts/11879.html</url>
    <content><![CDATA[<h1 id="树莓派机器人"><a href="#树莓派机器人" class="headerlink" title="树莓派机器人"></a>树莓派机器人</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>去年在<a href="https://www.bilibili.com/video/BV14g4y1q7yf?spm_id_from=333.999.0.0">b站</a>上看到一个树莓派机器人视频，心血来潮就像自己也DIY弄一个。无奈由于采购的硬件过于粗糙，弄出来的机器人可操作性不是很强。后来突发奇想，在某鱼上入手了一台废弃的扫地机器人。在经历了一番改造之后，就有了今天的这篇文章。😋</strong></p>
<a id="more"></a>
<h2 id="这是机器人一代（疯狗版）"><a href="#这是机器人一代（疯狗版）" class="headerlink" title="这是机器人一代（疯狗版）"></a>这是机器人一代（疯狗版）</h2><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210914215256.jpeg"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210914215445.PNG"></p>
<p>此类机器人的主要功能就是通过浏览器对机器人进行前后左右的实时控制。使机器人用于移动能力。</p>
<h2 id="失败总结"><a href="#失败总结" class="headerlink" title="失败总结"></a>失败总结</h2><p>由于tt马达的稳定性不好，对速度的把控不是很好。一但机器人启动，两个马达的速度差存在严重的问题，导致机器人在原地转圈😌。其次软件方面的支持不是很好，无法做到对机器人的速度进行控制，其根本原因是没读懂大佬写的代码🐶。</p>
<h2 id="机器人二代诞生"><a href="#机器人二代诞生" class="headerlink" title="机器人二代诞生"></a>机器人二代诞生</h2><p>汲取了上一代的教训，在硬件方面，这次选用稳定性更好的家用扫地机器人。软件方面，经过对代码的逐行解析，终于弄懂了其中的奥义。于是第二代机器人诞生！！！<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210914221836.jpeg"></p>
<h3 id="硬件准备"><a href="#硬件准备" class="headerlink" title="硬件准备:"></a>硬件准备:</h3><ul>
<li>树莓派4b</li>
<li>废弃的扫地机器人（电机得有用）</li>
<li>L298N电机驱动模块</li>
<li>树莓派摄像头</li>
<li>充电宝（给树莓派供电）</li>
<li>额定电压12V锂电池（给电机供电）</li>
<li>杜邦线若干</li>
</ul>
<h3 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210914224912.jpeg"></p>
<p><strong>树莓派针脚图:</strong><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210914224525.PNG"></p>
<ul>
<li>四个输出端口分别接两侧电机</li>
<li>IN1接 GPIO 12</li>
<li>IN2接 GPIO 06</li>
<li>IN3接 GPIO 20</li>
<li>IN4接 GPIO 21</li>
<li>使能端1 接 GPIO 19</li>
<li>使能端2 接 GPIO 26</li>
</ul>
<p>如果自定义接，可以修改twowheel.py文件<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210914225912.png"></p>
<h3 id="软件支持"><a href="#软件支持" class="headerlink" title="软件支持"></a>软件支持</h3><p>安装必要的环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Haikez/raspi-robot.git</span><br><span class="line">cd raspi-robot</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./rpi-robot.sh</span><br></pre></td></tr></table></figure>
<p>打开浏览器，到树莓派ip下的5000端口即可控制访问。</p>
]]></content>
      <categories>
        <category>树莓派的反击</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派HomeAssistant智能家居</title>
    <url>/posts/17140.html</url>
    <content><![CDATA[<h1 id="树莓派HomeAssistant智能家居"><a href="#树莓派HomeAssistant智能家居" class="headerlink" title="树莓派HomeAssistant智能家居"></a>树莓派HomeAssistant智能家居</h1><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915100854.jpg"></p>
<h2 id="一、什么是HomeAssistant"><a href="#一、什么是HomeAssistant" class="headerlink" title="一、什么是HomeAssistant"></a>一、什么是HomeAssistant</h2><p>Home Assistant（以下简称HA）是个开源的智能家居平台。我们可以把家中的智能家居设备整合到HA中。它能够接入的设备非常的多比如大名鼎鼎的小米、博联、易微联、飞利浦、特斯拉…，也可以接入软件，比如MPD音乐播放器，VLC…<br>HA对于苹果的用户有个很大的福利，那就是接入HA的设备大多数也可以接入苹果的家庭中，从而可以Siri语音控制。这么一说，苹果支持的配件一下子就多了，不是苹果支持的配件也支持了。自己DIY的也能接入苹果。</p>
<a id="more"></a>
<h2 id="二、树莓派安装HomeAssistant"><a href="#二、树莓派安装HomeAssistant" class="headerlink" title="二、树莓派安装HomeAssistant"></a>二、树莓派安装HomeAssistant</h2><h3 id="1-树莓派更换国内apt源-可选，中国大陆必须"><a href="#1-树莓派更换国内apt源-可选，中国大陆必须" class="headerlink" title="1. 树莓派更换国内apt源(可选，中国大陆必须)"></a>1. 树莓派更换国内apt源(可选，中国大陆必须)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi&#x27;</span> &gt; /etc/apt/sources.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi&#x27;</span> &gt;&gt; /etc/apt/sources.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;deb http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui&#x27;</span> &gt; /etc/apt/sources.list.d/raspi.list</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;deb-src http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui&#x27;</span> &gt;&gt; /etc/apt/sources.list.d/raspi.list</span><br><span class="line">apt-get update</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<h3 id="2-安装依Python3运行环境"><a href="#2-安装依Python3运行环境" class="headerlink" title="2. 安装依Python3运行环境"></a>2. 安装依Python3运行环境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get -y install python3-pip build-essential libssl-dev libffi-dev python-dev openssl libssl-dev python3-cffi python3-setuptools python3-cryptography python3-bcrypt python-cryptography python-bcrypt python3-dev</span><br></pre></td></tr></table></figure>
<h3 id="3-修改阿里云pip源-可选，中国大陆必须"><a href="#3-修改阿里云pip源-可选，中国大陆必须" class="headerlink" title="3.修改阿里云pip源(可选，中国大陆必须)"></a>3.修改阿里云pip源(可选，中国大陆必须)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line">mv /etc/pip.conf /etc/pip.conf.bak</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;[global]&#x27;</span> &gt; /etc/pip.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;timeout = 6000&#x27;</span> &gt;&gt; /etc/pip.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;index-url = https://mirrors.aliyun.com/pypi/simple/&#x27;</span> &gt;&gt; /etc/pip.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;trusted-host = mirrors.aliyun.com&#x27;</span> &gt;&gt; /etc/pip.conf</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<h3 id="4-安装python依赖包"><a href="#4-安装python依赖包" class="headerlink" title="4.安装python依赖包"></a>4.安装python依赖包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install requests</span><br><span class="line">pip3 install sqlalchemy</span><br><span class="line">pip3 install distro</span><br><span class="line">pip3 install hass-nabucasa</span><br><span class="line">pip3 install xmltodict</span><br><span class="line">pip3 install mutagen</span><br><span class="line">pip3 install netdisco</span><br><span class="line">pip3 install pynacl</span><br><span class="line">pip3 install pyotp</span><br><span class="line">pip3 install pyqrcode</span><br><span class="line">pip3 install aiohttp</span><br><span class="line">pip3 install aiohttp_cors</span><br><span class="line">pip3 install cryptography</span><br><span class="line">pip3 install gtts-token</span><br><span class="line">pip3 install hass-nabucasa</span><br><span class="line">sudo pip3 install pycryptodome</span><br><span class="line">sudo pip3 install --upgrade pip</span><br></pre></td></tr></table></figure>
<h3 id="5-安装Home-Assistant"><a href="#5-安装Home-Assistant" class="headerlink" title="5.安装Home Assistant"></a>5.安装Home Assistant</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pip3 install homeassistant</span><br></pre></td></tr></table></figure>
<h3 id="6-手动启动测试一下是否正常-启动过程中会自动安装一些依赖包，耐心等待。"><a href="#6-手动启动测试一下是否正常-启动过程中会自动安装一些依赖包，耐心等待。" class="headerlink" title="6.手动启动测试一下是否正常,启动过程中会自动安装一些依赖包，耐心等待。"></a>6.手动启动测试一下是否正常,启动过程中会自动安装一些依赖包，耐心等待。</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hass</span><br></pre></td></tr></table></figure>
<h3 id="7-创建系统服务"><a href="#7-创建系统服务" class="headerlink" title="7.创建系统服务"></a>7.创建系统服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chown -R <span class="variable">$USER</span> /tmp</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$USER</span> &gt; /tmp/user.txt</span><br><span class="line">sudo su</span><br><span class="line">USER1=`cat /tmp/user.txt`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;[Unit]&#x27;</span> &gt; /etc/systemd/system/hass.service</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Description=Home Assistant Service&#x27;</span> &gt;&gt; /etc/systemd/system/hass.service</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;After=network.target&#x27;</span> &gt;&gt; /etc/systemd/system/hass.service</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Wants=network.target&#x27;</span> &gt;&gt; /etc/systemd/system/hass.service</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;[Service]&#x27;</span> &gt;&gt; /etc/systemd/system/hass.service</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;User=&#x27;</span><span class="variable">$USER1</span> &gt;&gt; /etc/systemd/system/hass.service</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Type=simple&#x27;</span> &gt;&gt; /etc/systemd/system/hass.service</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;ExecStartPre=/bin/sleep 3&#x27;</span> &gt;&gt; /etc/systemd/system/hass.service</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;ExecStart=/usr/local/bin/hass&#x27;</span> &gt;&gt; /etc/systemd/system/hass.service</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Restart=always&#x27;</span> &gt;&gt; /etc/systemd/system/hass.service</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;[Install]&#x27;</span> &gt;&gt; /etc/systemd/system/hass.service</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;WantedBy=multi-user.target&#x27;</span> &gt;&gt; /etc/systemd/system/hass.service</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<h3 id="8-添加开机启动并启动Home-Assistant"><a href="#8-添加开机启动并启动Home-Assistant" class="headerlink" title="8.添加开机启动并启动Home Assistant"></a>8.添加开机启动并启动Home Assistant</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> hass</span><br><span class="line">sudo systemctl start hass</span><br></pre></td></tr></table></figure>
<p><strong>打开Home Assistant 界面:</strong><br><a href="http://xxx.xxx.xxx.xxx:8123/">http://xxx.xxx.xxx.xxx:8123</a></p>
<p><strong>注册登录进入界面</strong><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915102502.png"></p>
<h2 id="三、将小米智能设备接入HomeAssistant"><a href="#三、将小米智能设备接入HomeAssistant" class="headerlink" title="三、将小米智能设备接入HomeAssistant"></a>三、将小米智能设备接入HomeAssistant</h2><p><strong>点击添加集成，添加如上两个插件。</strong><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915103529.png"></p>
<h3 id="1-安装Xiaomi插件"><a href="#1-安装Xiaomi插件" class="headerlink" title="1. 安装Xiaomi插件"></a>1. 安装Xiaomi插件</h3><p><strong>该插件可以将小米智能设备接入到HomeAssistant中从而实现智能控制。</strong><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915103647.png"><br><strong>配置Xiaomi插件</strong><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915103552.png"></p>
<h3 id="2-安装HomeKit插件"><a href="#2-安装HomeKit插件" class="headerlink" title="2. 安装HomeKit插件"></a>2. 安装HomeKit插件</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915104210.png"><br><strong>Homekit插件的功能是：使Apple用户可以通过家庭app控制HomeAssistant中的设备。</strong><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210915105810.PNG"></p>
]]></content>
      <categories>
        <category>树莓派的反击</category>
      </categories>
      <tags>
        <tag>智能家居</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派温湿度传感器DHT11</title>
    <url>/posts/11000.html</url>
    <content><![CDATA[<h1 id="树莓派温湿度传感器DHT11"><a href="#树莓派温湿度传感器DHT11" class="headerlink" title="树莓派温湿度传感器DHT11"></a>树莓派温湿度传感器DHT11</h1><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/Spring5/20210915114234.jpg"><br>图中DHT11应该是市面上最便宜的温湿度传感器，成品模组售价约5元，送杜邦线即插即用！模组体积小巧，可固定在家中任意位置，缺点是精度不足。温度量程0-50℃误差±2℃，湿度量程20-95%误差±5%，用作室内温湿度测量勉强足够。</p>
<p>本文主要阐述将Dht11温湿度模块接入树莓派HomeBridge中，从而实现智能监测房间内的温湿度。<strong>因此树莓派上应该安装好HomeBridge。</strong><br>项目地址:<a href="https://github.com/NorthernMan54/homebridge-dht">https://github.com/NorthernMan54/homebridge-dht</a></p>
<a id="more"></a>
<h2 id="一、接线"><a href="#一、接线" class="headerlink" title="一、接线"></a>一、接线</h2><p>按照图中的那样接线:</p>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/Spring5/20210915115052.JPG"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/Spring5/20210915115101.JPG"></p>
<h2 id="二、安装配置"><a href="#二、安装配置" class="headerlink" title="二、安装配置"></a>二、安装配置</h2><h3 id="1-配置方面采用HB支持的插件homebridge-dht根据作者自述，该项目依赖BCM2835-Library通讯，安装方式如下（建议root安装）："><a href="#1-配置方面采用HB支持的插件homebridge-dht根据作者自述，该项目依赖BCM2835-Library通讯，安装方式如下（建议root安装）：" class="headerlink" title="1. 配置方面采用HB支持的插件homebridge-dht根据作者自述，该项目依赖BCM2835 Library通讯，安装方式如下（建议root安装）："></a>1. 配置方面采用HB支持的插件homebridge-dht根据作者自述，该项目依赖BCM2835 Library通讯，安装方式如下（建议root安装）：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget  http://www.airspayce.com/mikem/bcm2835/bcm2835-1.58.tar.gz</span><br><span class="line">tar zxvf bcm2835-1.58.tar.gz</span><br><span class="line"><span class="built_in">cd</span> bcm2835-1.58/</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make check</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h3 id="2-完成后安装DHT插件并更新config-json注意pin值与实际对应。"><a href="#2-完成后安装DHT插件并更新config-json注意pin值与实际对应。" class="headerlink" title="2. 完成后安装DHT插件并更新config.json注意pin值与实际对应。"></a>2. 完成后安装DHT插件并更新config.json注意pin值与实际对应。</h3><p>在HomeBridge中安装Homebridge Dht插件<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/Spring5/20210915115556.png"></p>
<h3 id="3-安装完成后给插件添加如下配置"><a href="#3-安装完成后给插件添加如下配置" class="headerlink" title="3. 安装完成后给插件添加如下配置"></a>3. 安装完成后给插件添加如下配置</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;accessories&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;accessory&quot;</span>: <span class="string">&quot;Dht&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;dht11 - bedroom&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;gpio&quot;</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;service&quot;</span>: <span class="string">&quot;dht11&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完成！！！<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/oud.com/images_bed/Spring5/20210915115939.jpeg"></p>
]]></content>
      <categories>
        <category>树莓派的反击</category>
      </categories>
      <tags>
        <tag>智能家居</tag>
      </tags>
  </entry>
  <entry>
    <title>hadoop词频统计</title>
    <url>/posts/34751.html</url>
    <content><![CDATA[<h1 id="hadoop词频统计-–-wordcount"><a href="#hadoop词频统计-–-wordcount" class="headerlink" title="hadoop词频统计 – wordcount"></a>hadoop词频统计 – wordcount</h1><p>统计wc.txt中的词分别出现的次数<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/bigdata/20211128154134.jpg"></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wordCount;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">统计wc.txt中词出现的次数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">wordcount</span> </span>&#123;</span><br><span class="line">    <span class="comment">//map端</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTask</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>,<span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">//(hadoop,hadoop,spark,spark) ==&gt; (hadoop,1) (hadoop,1) (spark,1) (spark,1)</span></span><br><span class="line">        <span class="comment">//每读一行数据，执行一次下面代码</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            String[] words = value.toString().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">                <span class="comment">//将结果写出去</span></span><br><span class="line">                context.write(<span class="keyword">new</span> Text(word),<span class="keyword">new</span> IntWritable(<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reduce端</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReduceTask</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>,<span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">//(hadoop,(1,1,1,1....)) (spark,(1,1,1,1....)) ==&gt; (hadoop,n) (spark,n)</span></span><br><span class="line">        <span class="comment">//每读一行数据，执行一次下面代码</span></span><br><span class="line">        <span class="comment">//map端的输出就是reduce端的输入</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="comment">//统计单词出现的次数</span></span><br><span class="line">            <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将结果写出去</span></span><br><span class="line">            context.write(key,<span class="keyword">new</span> IntWritable(count));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//在提交到集群的时候  注意使用root用户</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;HADOOP_USER_NAME&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="comment">//接下来  需要提交任务，我们需要创建一个JOB对象，这个哥们是专门负责提交MR任务的</span></span><br><span class="line">        <span class="comment">//我们要把这个MR程序  提交给集群去运行</span></span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>,<span class="string">&quot;hdfs://192.168.120.110:9000&quot;</span>);</span><br><span class="line">        Job job = Job.getInstance(conf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把map端与reduce端的俩个静态类提交给JOB</span></span><br><span class="line">        job.setMapperClass(wordcount.MapTask.class);</span><br><span class="line">        job.setReducerClass(wordcount.ReduceTask.class);</span><br><span class="line">        job.setJarByClass(wordcount.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在告诉job四个输出参数的类型   注意：这里只要输出类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断   如果输出目录存在，我们就删除</span></span><br><span class="line">        String outPath=<span class="string">&quot;/bigdata/output/wordcount&quot;</span>;</span><br><span class="line">       <span class="comment">/* File file = new File(outPath);</span></span><br><span class="line"><span class="comment">        if(file.exists())&#123;</span></span><br><span class="line"><span class="comment">            FileUtils.deleteDirectory(file);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        FileSystem fileSystem = FileSystem.get(conf);</span><br><span class="line">        <span class="keyword">if</span>(fileSystem.exists(<span class="keyword">new</span> Path(outPath)))&#123;</span><br><span class="line">            fileSystem.delete(<span class="keyword">new</span> Path(outPath),<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//告诉job输入  输出的路径</span></span><br><span class="line">        FileInputFormat.addInputPath(job,<span class="keyword">new</span> Path(<span class="string">&quot;/bigdata/input/wc.txt&quot;</span>));</span><br><span class="line">        FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> Path(<span class="string">&quot;/bigdata/output/wordcount&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//温馨提示</span></span><br><span class="line">        <span class="keyword">boolean</span> b = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(b?<span class="string">&quot;代码没毛病！！！&quot;</span>:<span class="string">&quot;出BUG,赶快看一下！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/bigdata/20211128154242.jpg"></p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>hadoop共同好友</title>
    <url>/posts/38057.html</url>
    <content><![CDATA[<h1 id="hadoop共同好友"><a href="#hadoop共同好友" class="headerlink" title="hadoop共同好友"></a>hadoop共同好友</h1><p>分析friend.txt中的共同好友<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/bigdata/20211128165800.jpg"></p>
<a id="more"></a>
<p>解：<br>A:B,C,D,F,E,O<br>B-C:A <em>B和C的共同好友为A</em><br>B-D:A <em>B和D的共同好友为A</em><br>B-F:A <em>B和F的共同好友为A</em><br>…..</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> friends;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*分析friend.txt中的共同好友*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Friends</span> </span>&#123;</span><br><span class="line">    <span class="comment">//map端</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTask</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>,<span class="title">Text</span>,<span class="title">Text</span>&gt;</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">//(A:B,C,D,F,E,O) ==&gt; (B-C,A) (B-D,A) (B-F,A) (B-E,A) ......</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Mapper&lt;LongWritable, Text, Text, Text&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            String[] split = value.toString().split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            String o_value = split[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//B,C,D,F,E,O</span></span><br><span class="line">            String[] friends  = split[<span class="number">1</span>].split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="comment">//对friends数组排序</span></span><br><span class="line">            Arrays.sort(friends);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;friends.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;friends.length;j++)&#123;</span><br><span class="line">                    context.write(<span class="keyword">new</span> Text(friends[i]+<span class="string">&quot;-&quot;</span>+friends[j]),<span class="keyword">new</span> Text(o_value));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//reduce端</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReduceTask</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>,<span class="title">Text</span>,<span class="title">Text</span>,<span class="title">Text</span>&gt;</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="comment">//(B-C,A,D,E,F...) (B-D,(A,E,F...)) ==&gt; (B-D  A,E,F...)</span></span><br><span class="line">        <span class="comment">//将values拼接输出</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;Text&gt; values, Reducer&lt;Text, Text, Text, Text&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            String str=<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Text value : values) &#123;</span><br><span class="line">                <span class="keyword">if</span> (flag==<span class="number">0</span>)&#123;</span><br><span class="line">                    str+=value.toString();</span><br><span class="line">                    flag++;</span><br><span class="line">                &#125;<span class="keyword">else</span> str+=<span class="string">&quot;,&quot;</span>+value.toString();</span><br><span class="line">            &#125;</span><br><span class="line">            context.write(key,<span class="keyword">new</span> Text(str));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//在提交到集群的时候  注意使用root用户</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;HADOOP_USER_NAME&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="comment">//接下来  需要提交任务，我们需要创建一个JOB对象，这个哥们是专门负责提交MR任务的</span></span><br><span class="line">        <span class="comment">//我们要把这个MR程序  提交给集群去运行</span></span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        conf.set(<span class="string">&quot;fs.defaultFS&quot;</span>,<span class="string">&quot;hdfs://192.168.120.110:9000&quot;</span>);</span><br><span class="line">        Job job = Job.getInstance(conf);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把map端与reduce端的俩个静态类提交给JOB</span></span><br><span class="line">        job.setMapperClass(Friends.MapTask.class);</span><br><span class="line">        job.setReducerClass(Friends.ReduceTask.class);</span><br><span class="line">        job.setJarByClass(Friends.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在告诉job四个输出参数的类型   注意：这里只要输出类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(Text.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(Text.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断   如果输出目录存在，我们就删除</span></span><br><span class="line">        String outPath=<span class="string">&quot;/bigdata/output/friend&quot;</span>;</span><br><span class="line">       <span class="comment">/* File file = new File(outPath);</span></span><br><span class="line"><span class="comment">        if(file.exists())&#123;</span></span><br><span class="line"><span class="comment">            FileUtils.deleteDirectory(file);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        FileSystem fileSystem = FileSystem.get(conf);</span><br><span class="line">        <span class="keyword">if</span>(fileSystem.exists(<span class="keyword">new</span> Path(outPath)))&#123;</span><br><span class="line">            fileSystem.delete(<span class="keyword">new</span> Path(outPath),<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//告诉job输入  输出的路径</span></span><br><span class="line">        FileInputFormat.addInputPath(job,<span class="keyword">new</span> Path(<span class="string">&quot;/bigdata/input/friend.txt&quot;</span>));</span><br><span class="line">        FileOutputFormat.setOutputPath(job,<span class="keyword">new</span> Path(<span class="string">&quot;/bigdata/output/friend&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//温馨提示</span></span><br><span class="line">        <span class="keyword">boolean</span> b = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.out.println(b?<span class="string">&quot;代码没毛病！！！&quot;</span>:<span class="string">&quot;出BUG,赶快看一下！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/bigdata/20211128170135.jpg"></p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>hadoop分布式集群搭建</title>
    <url>/posts/60572.html</url>
    <content><![CDATA[<h1 id="hadoop分布式集群搭建"><a href="#hadoop分布式集群搭建" class="headerlink" title="hadoop分布式集群搭建"></a>hadoop分布式集群搭建</h1><h3 id="1-创建三台虚拟机"><a href="#1-创建三台虚拟机" class="headerlink" title="1. 创建三台虚拟机"></a>1. 创建三台虚拟机</h3><p>虚拟机用的是<strong>CenOS 7</strong>镜像文件已打包好:<br>天翼云盘：<a href="https://cloud.189.cn/t/bQr6VrB7Zzmu%EF%BC%88%E8%AE%BF%E9%97%AE%E7%A0%81%EF%BC%9A1ck6%EF%BC%89">https://cloud.189.cn/t/bQr6VrB7Zzmu（访问码：1ck6）</a></p>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/bigdata/20211127132746.jpg"></p>
<a id="more"></a>
<h3 id="2-创建子网：将三台虚拟机的IP连接到子网中。"><a href="#2-创建子网：将三台虚拟机的IP连接到子网中。" class="headerlink" title="2. 创建子网：将三台虚拟机的IP连接到子网中。"></a>2. 创建子网：将三台虚拟机的IP连接到子网中。</h3><p>进入子网配置界面：<strong>VMware Fusion &gt; 偏好设置 &gt; 网络。</strong><br>根据自己喜好，划分一个子网：<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/bigdata/20211127133305.jpg"><br>A类保留地址：10.0.0.0 ～ 10.255.255.255<br>B类保留地址：172.16.0.0 ～ 172.31.255.255<br>C类保留地址: 192.168.0.0 ～192.168.255.255</p>
<p>查看子网：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我的子网IP设置为：192.168.120.0</span></span><br><span class="line"><span class="comment"># 子网IP最好不要和主机的网关在一个网段!!!</span></span><br><span class="line">cat /Library/Preferences/VMware\ Fusion/networking</span><br></pre></td></tr></table></figure>
<p>查看网关：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网关IP默认为：192.168.120.2</span></span><br><span class="line">cat /Library/Preferences/VMware\ Fusion/vmnet3/nat.conf</span><br></pre></td></tr></table></figure>
<h3 id="3-配置虚拟机静态IP"><a href="#3-配置虚拟机静态IP" class="headerlink" title="3. 配置虚拟机静态IP"></a>3. 配置虚拟机静态IP</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/bigdata/20211127135136.jpg"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/bigdata/20211127135303.jpg"><br>修改hadoop的网络（以hadoop01为例）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件内追加</span></span><br><span class="line">BOOTPROTO=<span class="string">&quot;static&quot;</span></span><br><span class="line">ONBOOT=<span class="string">&quot;yes&quot;</span></span><br><span class="line">IPADDR=192.168.120.110  <span class="comment">#自定义IP</span></span><br><span class="line">GATEWAY=192.168.120.2   <span class="comment">#网关地址</span></span><br><span class="line">NETMASK=255.255.250.0   <span class="comment">#子网掩码</span></span><br><span class="line">DNS1=114.114.114.114</span><br><span class="line">DNS2=223.5.5.5</span><br><span class="line">DNS3=8.8.8.8</span><br></pre></td></tr></table></figure>
<p>重启网络</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>
<p>修改hadoop02和hadoop03的IP。<br>我分配的IP分别是：<br>hadoop01: 192.168.120.110<br>hadoop02: 192.168.120.120<br>hadoop03: 192.168.120.130</p>
<h3 id="4-设置hadoop主机名"><a href="#4-设置hadoop主机名" class="headerlink" title="4. 设置hadoop主机名:"></a>4. 设置hadoop主机名:</h3><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">hostnamectl</span> <span class="built_in">set-hostname</span> <span class="string">hadoop01</span></span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/bigdata/20211127142220.jpg"><br>修改hadoop02和hadoop03的主机名。</p>
<h3 id="5-配置内网域名映射："><a href="#5-配置内网域名映射：" class="headerlink" title="5. 配置内网域名映射："></a>5. 配置内网域名映射：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim  /etc/hosts</span><br><span class="line"></span><br><span class="line">192.168.120.110         hadoop01</span><br><span class="line">192.168.120.120         hadoop02</span><br><span class="line">192.168.120.130         hadoop03</span><br></pre></td></tr></table></figure>
<h3 id="6-配置ssh免密登录（以hadoop01为例）："><a href="#6-配置ssh免密登录（以hadoop01为例）：" class="headerlink" title="6. 配置ssh免密登录（以hadoop01为例）："></a>6. 配置ssh免密登录（以hadoop01为例）：</h3><p>生成密钥</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh-keygen -t rsa</span></span><br></pre></td></tr></table></figure>
<p>将密钥分配到hadoop02和hadoop03</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">ssh-<span class="keyword">copy</span>-<span class="built_in">id</span>  hadoop01</span><br><span class="line">ssh-<span class="keyword">copy</span>-<span class="built_in">id</span>  hadoop02</span><br><span class="line">ssh-<span class="keyword">copy</span>-<span class="built_in">id</span>  hadoop03</span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/bigdata/20211127144711.jpg"><br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/bigdata/20211127144600.jpg"><br>注意：<br>还需要在hadoop02配置一下免登录到 hadoop01、hadoop02、hadoop03。<br>还需要在hadoop03配置一下免登录到 hadoop01、hadoop02、hadoop03。</p>
<h3 id="7-防火墙"><a href="#7-防火墙" class="headerlink" title="7. 防火墙"></a>7. 防火墙</h3><p>查询防火墙的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure>
<p>临时关闭防火墙：(注意 临时关闭之后，服务器再次重启，防火墙会自动开启)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>
<p>永久关闭防火墙：(注意 先临时关闭，再永久关闭)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure>
<h3 id="8-安装java"><a href="#8-安装java" class="headerlink" title="8. 安装java"></a>8. 安装java</h3><p>(1)、天翼云盘下载:<br><a href="https://cloud.189.cn/t/AjAJZbiyYfAv%EF%BC%88%E8%AE%BF%E9%97%AE%E7%A0%81%EF%BC%9Ams9z%EF%BC%89">https://cloud.189.cn/t/AjAJZbiyYfAv（访问码：ms9z）</a><br>(2)、解压java的tar包</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tar</span> -zxvf jdk-<span class="number">8</span>u<span class="number">211</span>-linux-x<span class="number">64</span>.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/bigdata/20211127160343.jpg"></p>
<h3 id="9-安装hadoop集群"><a href="#9-安装hadoop集群" class="headerlink" title="9. 安装hadoop集群"></a>9. 安装hadoop集群</h3><p>(1)、去官网下载:<br><a href="https://hadoop.apache.org/">https://hadoop.apache.org/</a><br>天翼云盘下载:<br><a href="https://cloud.189.cn/t/367zaeiuEFfu%EF%BC%88%E8%AE%BF%E9%97%AE%E7%A0%81%EF%BC%9Apjj1%EF%BC%89">https://cloud.189.cn/t/367zaeiuEFfu（访问码：pjj1）</a></p>
<p>(2)、解压hadoop的tar包</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tar</span> -zxvf hadoop-<span class="number">2</span>.<span class="number">7</span>.<span class="number">3</span>.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/bigdata/20211127160459.jpg"><br>(3)、配置环境变量</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/usr/local/jdk1.8.0_211</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HADOOP_HOME</span>=/usr/local/hadoop-2.7.3</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br></pre></td></tr></table></figure>
<p>记得source</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure>
<h3 id="10-配置文件的修改"><a href="#10-配置文件的修改" class="headerlink" title="10. 配置文件的修改"></a>10. 配置文件的修改</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/usr/</span>local<span class="regexp">/hadoop-2.7.3/</span>etc/hadoop</span><br></pre></td></tr></table></figure>
<p>(1)、修改hadoop的依赖环境java</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vi</span> hadoop-env.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
<p>把jdk的依赖加进去就OK<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/bigdata/20211127161352.jpg"><br>(2)、配置hadoop的访问客户端</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">vi</span> <span class="selector-tag">core-site</span><span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;configuration&gt;</span></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line"><span class="params">&lt;name&gt;</span>fs.defaultFS<span class="params">&lt;/name&gt;</span></span><br><span class="line"><span class="params">&lt;value&gt;</span>hdfs:<span class="comment">//hadoop01:9000&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line"><span class="params">&lt;name&gt;</span>hadoop.tmp.dir<span class="params">&lt;/name&gt;</span></span><br><span class="line"><span class="params">&lt;value&gt;</span><span class="meta-keyword">/usr/</span>local/hadoop<span class="number">-2.7</span><span class="number">.3</span>/tmp<span class="params">&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line"><span class="params">&lt;/configuration&gt;</span></span><br></pre></td></tr></table></figure>
<p>(3)、配置元数据与真实数据的存储路径信息</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">vi</span> <span class="selector-tag">hdfs-site</span><span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="params">&lt;configuration&gt;</span></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line"><span class="params">&lt;name&gt;</span>dfs.namenode.name.dir<span class="params">&lt;/name&gt;</span></span><br><span class="line"><span class="params">&lt;value&gt;</span><span class="meta-keyword">/usr/</span>local/hadoop<span class="number">-2.7</span><span class="number">.3</span><span class="meta-keyword">/data/</span>name<span class="params">&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line"><span class="params">&lt;name&gt;</span>dfs.datanode.data.dir<span class="params">&lt;/name&gt;</span></span><br><span class="line"><span class="params">&lt;value&gt;</span><span class="meta-keyword">/usr/</span>local/hadoop<span class="number">-2.7</span><span class="number">.3</span><span class="meta-keyword">/data/</span>data<span class="params">&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line"><span class="params">&lt;name&gt;</span>dfs.replication<span class="params">&lt;/name&gt;</span></span><br><span class="line"><span class="params">&lt;value&gt;</span><span class="number">3</span><span class="params">&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line"><span class="params">&lt;property&gt;</span></span><br><span class="line"><span class="params">&lt;name&gt;</span>dfs.secondary.http.address<span class="params">&lt;/name&gt;</span></span><br><span class="line"><span class="params">&lt;value&gt;</span>hadoop01:<span class="number">50090</span><span class="params">&lt;/value&gt;</span></span><br><span class="line"><span class="params">&lt;/property&gt;</span></span><br><span class="line"><span class="params">&lt;/configuration&gt;</span></span><br></pre></td></tr></table></figure>
<p>(4)、配置计算框架mapreduce<br>先把临时的文件修改成非临时</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">mv</span> <span class="selector-tag">mapred-site</span><span class="selector-class">.xml</span><span class="selector-class">.template</span> <span class="selector-tag">mapred-site</span><span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure>
<p>修改：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">vi</span> <span class="selector-tag">mapred-site</span><span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>(5)、修改yarn资源调度</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">vi</span> <span class="selector-tag">yarn-site</span><span class="selector-class">.xml</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop01<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>(6)、配置从节点</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vi slaves</span></span><br></pre></td></tr></table></figure>
<p>把localhost删掉，添加<br>hadoop02<br>hadoop03</p>
<h3 id="11-启动"><a href="#11-启动" class="headerlink" title="11. 启动"></a>11. 启动</h3><p>(1)、分发</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">scp -r <span class="regexp">/usr/</span>local<span class="regexp">/jdk1.8.0_211  hadoop02:/u</span>sr<span class="regexp">/local/</span></span><br><span class="line">scp -r <span class="regexp">/usr/</span>local<span class="regexp">/jdk1.8.0_211  hadoop03:/u</span>sr<span class="regexp">/local/</span></span><br><span class="line">scp -r <span class="regexp">/usr/</span>local<span class="regexp">/hadoop-2.7.3  hadoop02:/u</span>sr<span class="regexp">/local/</span></span><br><span class="line">scp -r <span class="regexp">/usr/</span>local<span class="regexp">/hadoop-2.7.3  hadoop03:/u</span>sr<span class="regexp">/local/</span></span><br><span class="line">scp <span class="regexp">/etc/</span>profile hadoop02:<span class="regexp">/etc/</span>profile</span><br><span class="line">scp <span class="regexp">/etc/</span>profile hadoop03:<span class="regexp">/etc/</span>profile</span><br></pre></td></tr></table></figure>
<p>(2)、初始化namenode (只执行一次)</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><span class="line">hadoop  namenode -<span class="built_in">format</span> </span><br></pre></td></tr></table></figure>
<p>(3)、启动</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">start</span>-<span class="keyword">all</span>.sh</span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/bigdata/20211127162752.jpg"><br>(4)、停止</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">stop</span>-<span class="keyword">all</span>.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>依赖注入（DI）</title>
    <url>/posts/8025.html</url>
    <content><![CDATA[<h1 id="依赖注入（DI）"><a href="#依赖注入（DI）" class="headerlink" title="依赖注入（DI）"></a>依赖注入（DI）</h1><h2 id="一、构造器注入"><a href="#一、构造器注入" class="headerlink" title="一、构造器注入"></a>一、构造器注入</h2><p>前面已经介绍过，参考 “IOC创建对象的方式”<br>在beans.xml中配置 <strong>&lt;constructor-arg&gt;</strong> 标签</p>
<h2 id="二、Set方式注入【重点】"><a href="#二、Set方式注入【重点】" class="headerlink" title="二、Set方式注入【重点】"></a>二、Set方式注入【重点】</h2><ul>
<li>依赖注入：Set注入<ul>
<li>依赖：bean对象的创建依赖于容器！</li>
<li>注入：bean对象中的所有属性，由容器来注入！</li>
</ul>
</li>
</ul>
<a id="more"></a>
<p>实例：</p>
<ul>
<li>dao<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooks</span><span class="params">(String[] books)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.books = books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobbies</span><span class="params">(List&lt;String&gt; hobbies)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbies = hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCard</span><span class="params">(Map&lt;String, String&gt; card)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.card = card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGames</span><span class="params">(Set&lt;String&gt; games)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.games = games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWife</span><span class="params">(String wife)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wife = wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(Properties info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address +</span><br><span class="line">                <span class="string">&quot;, books=&quot;</span> + Arrays.toString(books) +</span><br><span class="line">                <span class="string">&quot;, hobbies=&quot;</span> + hobbies +</span><br><span class="line">                <span class="string">&quot;, card=&quot;</span> + card +</span><br><span class="line">                <span class="string">&quot;, games=&quot;</span> + games +</span><br><span class="line">                <span class="string">&quot;, wife=&#x27;&quot;</span> + wife + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, info=&quot;</span> + info +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>beans.xml配置<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.nichu.dao.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;蓝星种花家&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.nichu.dao.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--property里面的name是实体类中set/get方法的名字首字母小写--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第一种：普通值注入，value        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;晒太阳的猫&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第二种：注入对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第三种：注入数组--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>历史<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>政治<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第四种：注入列表--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>小说<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第五种：注入map--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;34321432143214213&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3213213213849384193249&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第六种：注入set--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>荣耀<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>吃鸡<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第七种：注入null--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第八种：注入属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;身高&quot;</span>&gt;</span>163<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;体重&quot;</span>&gt;</span>50<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>测试类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.nichu.dao.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mytest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        Student student = context.getBean(<span class="string">&quot;student&quot;</span>, Student.class);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="三、拓展方式注入"><a href="#三、拓展方式注入" class="headerlink" title="三、拓展方式注入"></a>三、拓展方式注入</h2><h3 id="1-c命名空间注入"><a href="#1-c命名空间注入" class="headerlink" title="1. c命名空间注入"></a>1. c命名空间注入</h3></li>
</ul>
<p>实现：</p>
<ul>
<li>dao<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在beans.xml配置文件中添加红框内的代码</li>
</ul>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210914175953.png"></p>
<ul>
<li><p>bean配置文件写法 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.nichu.dao.User&quot;</span> <span class="attr">c:id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;小明&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.nichu.dao.Student;</span><br><span class="line"><span class="keyword">import</span> com.nichu.dao.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mytest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        User user = context.getBean(<span class="string">&quot;user&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3></li>
<li><p>使用c命名空间时，要在xml里加上xmlns:c=”<a href="http://www.springframework.org/schema/c&quot;%E8%AF%B4%E6%98%8E">http://www.springframework.org/schema/c&quot;说明</a></p>
</li>
<li><p>如果配置bean时，没有用构造函数注入，那么pojo必须要有无参构造函数</p>
</li>
<li><p>如果配置bean时，使用c命名空间注入全部的参数，那么pojo必须要有全参构造函数</p>
</li>
<li><p>如果配置bean时，使用c命名空间注入部分的参数，那么pojo必须要有对应的部分参数的构造函数</p>
</li>
</ul>
<h3 id="2-p命名空间注入"><a href="#2-p命名空间注入" class="headerlink" title="2. p命名空间注入"></a>2. p命名空间注入</h3><p>实现：</p>
<ul>
<li>dao<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teacher&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>bean配置文件写法</li>
</ul>
<p>在beans.xml配置文件中添加红框内的代码<br><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210914181820.png"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.Teacher&quot;</span> <span class="attr">p:id</span>=<span class="string">&quot;3&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;赵长远&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        Teacher teacher = (Teacher) applicationContext.getBean(<span class="string">&quot;teacher&quot;</span>);</span><br><span class="line">        System.out.println(teacher);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3></li>
<li><p>使用c命名空间时，要在xml里加上xmlns:p=”<a href="http://www.springframework.org/schema/p&quot;%E8%AF%B4%E6%98%8E">http://www.springframework.org/schema/p&quot;说明</a></p>
</li>
</ul>
<h2 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h2><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Spring5/20210914175859.png"></p>
<h3 id="单例模式（Spring默认机制）"><a href="#单例模式（Spring默认机制）" class="headerlink" title="单例模式（Spring默认机制）"></a>单例模式（Spring默认机制）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.Teacher&quot;</span> <span class="attr">p:id</span>=<span class="string">&quot;3&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;赵&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.Teacher&quot;</span> <span class="attr">p:id</span>=<span class="string">&quot;3&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;赵&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><ul>
<li>每次从容器中get的时候，都会产生一个新对象！<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dao.Teacher&quot;</span> <span class="attr">p:id</span>=<span class="string">&quot;3&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;赵老师&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed%2FSpring5%2F20230116141936.png"><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3></li>
<li>其余的request、session、application、这些只能在web开发中使用到！</li>
</ul>
]]></content>
      <categories>
        <category>Spring5学习</category>
      </categories>
  </entry>
  <entry>
    <title>hdfs的API调用（增删改查）</title>
    <url>/posts/32761.html</url>
    <content><![CDATA[<h1 id="hdfs的API调用（增删改查）"><a href="#hdfs的API调用（增删改查）" class="headerlink" title="hdfs的API调用（增删改查）"></a>hdfs的API调用（增删改查）</h1><h3 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h3><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hadoop<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hadoop-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;!—指定jdk的版本 --&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>基本配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span>  FileSystem fileSystem;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">//这里的代码只执行一次</span></span><br><span class="line">    Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">    <span class="comment">//设置副本数-- 3</span></span><br><span class="line">    conf.set(<span class="string">&quot;dfs.replication&quot;</span>,<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileSystem = FileSystem.get(URI.create(<span class="string">&quot;hdfs://192.168.120.110:9000&quot;</span>), conf, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建文件夹</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makedir</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> mkdirs = fileSystem.mkdirs(<span class="keyword">new</span> Path(<span class="string">&quot;/bigdata&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (mkdirs)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/bigdata/20211127174822.jpg"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*删除文件夹*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deldir</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> delete = fileSystem.delete(<span class="keyword">new</span> Path(<span class="string">&quot;/bigdata&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> (delete)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 修改或者移动</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">alter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> rename = fileSystem.rename(<span class="keyword">new</span> Path(<span class="string">&quot;/bigdata&quot;</span>), <span class="keyword">new</span> Path(<span class="string">&quot;/bigData&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span>(rename)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;修改成功！！！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;修改失败！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 上传    本地的文件上传到hdfs集群</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">upLoad</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    fileSystem.copyFromLocalFile(<span class="keyword">new</span> Path(<span class="string">&quot;/Users/haikez/Desktop/hadoop学习/hadoop1.7.2.rar&quot;</span>),<span class="keyword">new</span> Path(<span class="string">&quot;/bigData/&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/bigdata/20211128135210.jpg"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*从hdfs集群上下载文件*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">downLoad</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    fileSystem.copyToLocalFile(<span class="keyword">new</span> Path(<span class="string">&quot;/bigData/hadoop1.7.2.rar&quot;</span>),<span class="keyword">new</span> Path(<span class="string">&quot;/Users/haikez/Desktop/&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 查询   查询当前路径下所有的文件或者目录</span></span><br><span class="line"><span class="comment">    * listStatus</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listStatus</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    FileStatus[] listStatus = fileSystem.listStatus(<span class="keyword">new</span> Path(<span class="string">&quot;/bigData&quot;</span>));</span><br><span class="line">    <span class="keyword">for</span> (FileStatus status : listStatus) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;文件大小:&quot;</span>+status.getLen());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件路径:&quot;</span>+status.getPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件副本数:&quot;</span>+status.getReplication());</span><br><span class="line">        System.out.println(<span class="string">&quot;block块大小:&quot;</span>+status.getBlockSize());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件上传时间&quot;</span>+status.getModificationTime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/bigdata/20211128140240.jpg"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 查询   递归查询当前路径下所有的文件</span></span><br><span class="line"><span class="comment">    * listFiles</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listFiles</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    RemoteIterator&lt;LocatedFileStatus&gt; listFiles = fileSystem.listFiles(<span class="keyword">new</span> Path(<span class="string">&quot;/&quot;</span>),<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">while</span> (listFiles.hasNext())&#123;</span><br><span class="line">        LocatedFileStatus fs = listFiles.next();</span><br><span class="line">        System.out.println(<span class="string">&quot;文件大小:&quot;</span>+fs.getLen());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件路径:&quot;</span>+fs.getPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件副本数:&quot;</span>+fs.getReplication());</span><br><span class="line">        System.out.println(<span class="string">&quot;block块大小:&quot;</span>+fs.getBlockSize());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件上传时间&quot;</span>+fs.getModificationTime());</span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/bigdata/20211128141004.jpg"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">//        makedir();</span></span><br><span class="line"><span class="comment">//        deldir();</span></span><br><span class="line"><span class="comment">//        alter();</span></span><br><span class="line"><span class="comment">//        upLoad();</span></span><br><span class="line"><span class="comment">//        downLoad();</span></span><br><span class="line"><span class="comment">//        listStatus();</span></span><br><span class="line">          listFiles();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
      </categories>
  </entry>
  <entry>
    <title>Bean的自动装配</title>
    <url>/posts/47955.html</url>
    <content><![CDATA[<h1 id="Bean的自动装配"><a href="#Bean的自动装配" class="headerlink" title="Bean的自动装配"></a>Bean的自动装配</h1><ul>
<li>自动装配是</li>
</ul>
]]></content>
      <categories>
        <category>Spring5学习</category>
      </categories>
  </entry>
  <entry>
    <title>Javascript快速入门</title>
    <url>/posts/43156.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>动态SQL详解</title>
    <url>/posts/62398.html</url>
    <content><![CDATA[<h1 id="动态SQL详解"><a href="#动态SQL详解" class="headerlink" title="动态SQL详解"></a>动态SQL详解</h1><h2 id="什么是动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句"><a href="#什么是动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句" class="headerlink" title="什么是动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句"></a>什么是动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</span><br><span class="line">if</span><br><span class="line">choose (when, otherwise)</span><br><span class="line">trim (where, set)</span><br><span class="line">foreach</span><br></pre></td></tr></table></figure>
<h3 id="所谓的动态SQL本质上还是SQL语句，只是我们可以在SQL层面上，去执行逻辑代码。"><a href="#所谓的动态SQL本质上还是SQL语句，只是我们可以在SQL层面上，去执行逻辑代码。" class="headerlink" title="所谓的动态SQL本质上还是SQL语句，只是我们可以在SQL层面上，去执行逻辑代码。"></a>所谓的动态SQL本质上还是SQL语句，只是我们可以在SQL层面上，去执行逻辑代码。</h3><a id="more"></a>
<h2 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h2><h3 id="1-创建blog表"><a href="#1-创建blog表" class="headerlink" title="1. 创建blog表"></a>1. 创建blog表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `blog`(</span><br><span class="line">`id` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客id&#x27;</span>,</span><br><span class="line">`title` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客标题&#x27;</span>,</span><br><span class="line">`author` <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;博客作者&#x27;</span>,</span><br><span class="line">`create_time` DATETIME <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">`views` <span class="type">INT</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;浏览量&#x27;</span></span><br><span class="line">)ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure>
<h3 id="2-新建Blog实体类"><a href="#2-新建Blog实体类" class="headerlink" title="2. 新建Blog实体类"></a>2. 新建Blog实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date create_time;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> views;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-新建BlogMapper接口"><a href="#3-新建BlogMapper接口" class="headerlink" title="3. 新建BlogMapper接口"></a>3. 新建BlogMapper接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nichu.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-编写Blog-xml"><a href="#4-编写Blog-xml" class="headerlink" title="4. 编写Blog.xml"></a>4. 编写Blog.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.nichu.dao.BlogMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="5-在核心配置文件中绑定接口"><a href="#5-在核心配置文件中绑定接口" class="headerlink" title="5. 在核心配置文件中绑定接口"></a>5. 在核心配置文件中绑定接口</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--绑定接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.nichu.dao.BlogMapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="6-编写IDutils工具类用于生成UUID"><a href="#6-编写IDutils工具类用于生成UUID" class="headerlink" title="6. 编写IDutils工具类用于生成UUID"></a>6. 编写IDutils工具类用于生成UUID</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IDutils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-开启驼峰命名自动转换"><a href="#7-开启驼峰命名自动转换" class="headerlink" title="7. 开启驼峰命名自动转换"></a>7. 开启驼峰命名自动转换</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Mybatis/20210529120255.png"></p>
<p><strong>在核心配置文件中配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置日志--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;setting name=&quot;logImpl&quot; value=&quot;LOG4J&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启驼峰命名自动转换--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase &quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="编写测试类并插入数据"><a href="#编写测试类并插入数据" class="headerlink" title="编写测试类并插入数据"></a>编写测试类并插入数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBlogTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line">    blog.setId(IDutils.getId());</span><br><span class="line">    blog.setTitle(<span class="string">&quot;Mybatis&quot;</span>);</span><br><span class="line">    blog.setAuthor(<span class="string">&quot;狂神说&quot;</span>);</span><br><span class="line">    blog.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    blog.setViews(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">    mapper.addBook(blog);</span><br><span class="line"></span><br><span class="line">    blog.setId(IDutils.getId());</span><br><span class="line">    blog.setTitle(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">    mapper.addBook(blog);</span><br><span class="line"></span><br><span class="line">    blog.setId(IDutils.getId());</span><br><span class="line">    blog.setTitle(<span class="string">&quot;Spring&quot;</span>);</span><br><span class="line">    mapper.addBook(blog);</span><br><span class="line"></span><br><span class="line">    blog.setId(IDutils.getId());</span><br><span class="line">    blog.setTitle(<span class="string">&quot;微服务&quot;</span>);</span><br><span class="line">    mapper.addBook(blog);</span><br><span class="line"></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二、if"><a href="#二、if" class="headerlink" title="二、if"></a>二、if</h2><ul>
<li><h3 id="使用if编写查询语句"><a href="#使用if编写查询语句" class="headerlink" title="使用if编写查询语句"></a>使用if编写查询语句</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIF&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.nichu.pojo.Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog where 1=1</span><br><span class="line">    <span class="comment">&lt;!-- 如果title不为空拼接 and title = #&#123;title&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果author不为空拼接 and author = #&#123;author&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBlogTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    <span class="comment">// map.put(&quot;title&quot;,&quot;Java&quot;);</span></span><br><span class="line">    map.put(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;狂神说&quot;</span>);</span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogIF(map);</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、-choose-when-otherwise"><a href="#三、-choose-when-otherwise" class="headerlink" title="三、 choose (when, otherwise)"></a>三、 choose (when, otherwise)</h2><h3 id="用法相当于java中的switch-case-default"><a href="#用法相当于java中的switch-case-default" class="headerlink" title="用法相当于java中的switch (case default)"></a>用法相当于java中的switch (case default)</h3>chose –&gt; switch<br>when –&gt; case<br>otherwise –&gt; default<h3 id="执行时只要满足其中一个条件就结束"><a href="#执行时只要满足其中一个条件就结束" class="headerlink" title="执行时只要满足其中一个条件就结束"></a>执行时只要满足其中一个条件就结束</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogChoose&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.nichu.pojo.Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;title != null&quot;</span>&gt;</span></span><br><span class="line">                and title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;author != null&quot;</span>&gt;</span></span><br><span class="line">                and author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views = #&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="四、-trim-where-set"><a href="#四、-trim-where-set" class="headerlink" title="四、 trim (where, set)"></a>四、 trim (where, set)</h2></li>
<li><h3 id="lt-where-gt-标签"><a href="#lt-where-gt-标签" class="headerlink" title="&lt;where&gt;标签"></a>&lt;where&gt;标签</h3><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Mybatis/20210530095419.png"><blockquote>
<p>因此只要将查询语句中的where部分用 &lt;**where**&gt; 标签包裹即可</p>
</blockquote>
</li>
</ul>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Mybatis/20210530095655.png"></p>
<ul>
<li><h3 id="lt-set-gt-标签"><a href="#lt-set-gt-标签" class="headerlink" title="&lt;set&gt;标签"></a>&lt;set&gt;标签</h3>&lt;set&gt;标签的意义和&lt;where&gt;标签一样，每设置一个属性，都要在语句后加 “,” 由于不知道哪个语句结尾，所有要用&lt;set&gt;标签自动处理。<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBlog&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    update mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">            author = #&#123;author&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><h3 id="lt-trim-gt-标签"><a href="#lt-trim-gt-标签" class="headerlink" title="&lt;trim&gt;标签"></a>&lt;trim&gt;标签</h3></li>
</ul>
<p><strong>&lt;trim&gt;可以自定义&lt;where&gt;标签和&lt;set&gt;标签</strong></p>
<ul>
<li>where 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，where 元素也会将它们去除。</li>
</ul>
<p>如果 where 元素与你期望的不太一样，你也可以通过自定义 trim 元素来定制 where 元素的功能。比如，和 where 元素等价的自定义 trim 元素为：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;WHERE&quot;</span> <span class="attr">prefixOverrides</span>=<span class="string">&quot;AND |OR &quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>set 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。</li>
</ul>
<p>以下是set 元素等价的自定义trim </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;SET&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="五、SQL片段"><a href="#五、SQL片段" class="headerlink" title="五、SQL片段"></a>五、SQL片段</h2><p>有时候，我们可能会将一些功能的部分抽取出来，方便复用！</p>
<ol>
<li>使用SQL标签抽取公共的部分<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;title!=null&quot;</span>&gt;</span></span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;author!=null&quot;</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>在需要使用的地方使用Include标签引用即可<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogIF&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.nichu.pojo.Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用Include标签引用 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;if-title-author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3></li>
</ol>
<ul>
<li>最好基于单表来定义SQL片段！</li>
<li>不要存在where标签<h2 id="六、-lt-foreach-gt-标签"><a href="#六、-lt-foreach-gt-标签" class="headerlink" title="六、&lt;foreach&gt;标签"></a>六、&lt;foreach&gt;标签</h2><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/Mybatis/20210530110132.png"></li>
</ul>
<h3 id="1-查询id为（1-2-3）的博客记录"><a href="#1-查询id为（1-2-3）的博客记录" class="headerlink" title="1. 查询id为（1-2-3）的博客记录"></a>1. 查询id为（1-2-3）的博客记录</h3><p>SQL语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mybatis.blog <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mybatis.blog <span class="keyword">where</span> (id<span class="operator">=</span><span class="number">1</span> <span class="keyword">or</span> id<span class="operator">=</span><span class="number">2</span> <span class="keyword">or</span> id<span class="operator">=</span><span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<h3 id="2-使用foreach遍历id"><a href="#2-使用foreach遍历id" class="headerlink" title="2. 使用foreach遍历id"></a>2. 使用foreach遍历id</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBlogForEach&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.nichu.pojo.Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.blog</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">open</span>=<span class="string">&quot;and (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;or&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">                id=#&#123;id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3-编写测试类"><a href="#3-编写测试类" class="headerlink" title="3. 编写测试类"></a>3. 编写测试类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addBlogTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper.class);</span><br><span class="line">    Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    <span class="comment">// 使用ArrayList存放id</span></span><br><span class="line">    ArrayList&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ids.add(<span class="number">1</span>);</span><br><span class="line">    ids.add(<span class="number">2</span>);</span><br><span class="line">    ids.add(<span class="number">4</span>);</span><br><span class="line">    map.put(<span class="string">&quot;ids&quot;</span>,ids);</span><br><span class="line"></span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogForEach(map);</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="关于动态SQL的一些建议"><a href="#关于动态SQL的一些建议" class="headerlink" title="关于动态SQL的一些建议"></a>关于动态SQL的一些建议</h2><p>先在MySQL中写出完整的SQL语句，再对应的去修改成为动态SQL实现通用即可。</p>
]]></content>
      <categories>
        <category>Mybatis学习</category>
      </categories>
  </entry>
  <entry>
    <title>ESP-01S智能灯控源码详解</title>
    <url>/posts/64141.html</url>
    <content><![CDATA[<h1 id="ESP-01S智能灯控源码详解"><a href="#ESP-01S智能灯控源码详解" class="headerlink" title="ESP-01S智能灯控源码详解"></a>ESP-01S智能灯控源码详解</h1><p>通过前一篇的<a href="https://haikez.github.io/posts/1069.html">ESP-01S实现智能灯控</a>，我们可以快速上手智能灯控并获得不错的交互体验。但是在一些突发情况下（如：客户端在家庭中删除了设备），此时就要从墙中取出esp-01s重新刷入固件，操作就会非常繁琐。本文分析灯控装置的源码，并优化固件，以便在突发情况下对灯控装置配网与重置。</p>
<h2 id="一、项目地址"><a href="#一、项目地址" class="headerlink" title="一、项目地址"></a>一、<a href="https://github.com/Haikez/ESP8266_SMART_LIGHT.git">项目地址</a></h2><h2 id="二、源码"><a href="#二、源码" class="headerlink" title="二、源码"></a>二、源码</h2><a id="more"></a>

<h3 id="1-核心代码"><a href="#1-核心代码" class="headerlink" title="1. 核心代码"></a>1. 核心代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;EEPROM.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;wifi_connect_tool.h&gt; //WiFi配网头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Arduino.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arduino_homekit_server.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_D(fmt, ...)   printf_P(PSTR(fmt <span class="meta-string">&quot;\n&quot;</span>) , ##__VA_ARGS__);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_LED 2  			<span class="comment">//GPIO2是板载灯</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PIN_SWITCH 0    <span class="comment">//GPIO0是控制继电器的引脚</span></span></span><br><span class="line"><span class="keyword">bool</span> reset_flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上电后只执行一次</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  pinMode(PIN_SWITCH, OUTPUT);</span><br><span class="line">  digitalWrite(PIN_SWITCH, LOW);<span class="comment">//整个装置通电后设置继电器为闭合状态，即电路通。这样就算没有设置装置，也不影响正常使用。</span></span><br><span class="line">  EEPROM.begin(<span class="number">350</span>);</span><br><span class="line">  wifi_load();							<span class="comment">//WiFi配网</span></span><br><span class="line">  pinMode(PIN_LED, OUTPUT); <span class="comment">//设置板载LED灯</span></span><br><span class="line">  <span class="keyword">if</span>(reset_flag==<span class="literal">true</span>)&#123;</span><br><span class="line">      homekit_storage_reset(); <span class="comment">//重置homekit</span></span><br><span class="line">  &#125;</span><br><span class="line">  my_homekit_setup(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    wifi_pant();<span class="comment">//查看wifi情况</span></span><br><span class="line">    my_homekit_loop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//==============================</span></span><br><span class="line"><span class="comment">// HomeKit setup and loop</span></span><br><span class="line"><span class="comment">//==============================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// access your HomeKit characteristics defined in my_accessory.c</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="keyword">homekit_server_config_t</span> config;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="keyword">homekit_characteristic_t</span> cha_switch_on;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">uint32_t</span> next_heap_millis = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cha_switch_on_setter</span><span class="params">(<span class="keyword">const</span> <span class="keyword">homekit_value_t</span> value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">bool</span> on = value.bool_value;</span><br><span class="line">  cha_switch_on.value.bool_value = on;  <span class="comment">//sync the value</span></span><br><span class="line">  LOG_D(<span class="string">&quot;Switch: %s&quot;</span>, on ? <span class="string">&quot;ON&quot;</span> : <span class="string">&quot;OFF&quot;</span>);		<span class="comment">//控制台打印日志</span></span><br><span class="line">  digitalWrite(PIN_SWITCH, on ? LOW : HIGH);<span class="comment">//如果电路通则断，断则通</span></span><br><span class="line">  digitalWrite(PIN_LED, on ? LOW : HIGH);		<span class="comment">//这个是控制灯的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接入Homekit后只执行一次</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_homekit_setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  pinMode(PIN_SWITCH, OUTPUT);</span><br><span class="line">  digitalWrite(PIN_SWITCH, LOW);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Add the .setter function to get the switch-event sent from iOS Home APP.</span></span><br><span class="line">  <span class="comment">//The .setter should be added before arduino_homekit_setup.</span></span><br><span class="line">  <span class="comment">//HomeKit sever uses the .setter_ex internally, see homekit_accessories_init function.</span></span><br><span class="line">  <span class="comment">//Maybe this is a legacy design issue in the original esp-homekit library,</span></span><br><span class="line">  <span class="comment">//and I have no reason to modify this &quot;feature&quot;.</span></span><br><span class="line">  cha_switch_on.setter = cha_switch_on_setter;</span><br><span class="line">  arduino_homekit_setup(&amp;config);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//report the switch value to HomeKit if it is changed (e.g. by a physical button)</span></span><br><span class="line">  <span class="comment">//bool switch_is_on = true/false;</span></span><br><span class="line">  <span class="comment">//cha_switch_on.value.bool_value = switch_is_on;</span></span><br><span class="line">  <span class="comment">//homekit_characteristic_notify(&amp;cha_switch_on, cha_switch_on.value);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_homekit_loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  arduino_homekit_loop();</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">uint32_t</span> t = millis();</span><br><span class="line">  <span class="keyword">if</span> (t &gt; next_heap_millis) &#123;</span><br><span class="line">    <span class="comment">// show heap info every 5 seconds</span></span><br><span class="line">    next_heap_millis = t + <span class="number">5</span> * <span class="number">1000</span>;</span><br><span class="line">    LOG_D(<span class="string">&quot;Free heap: %d, HomeKit clients: %d&quot;</span>,</span><br><span class="line">        ESP.getFreeHeap(), arduino_homekit_connected_clients_count());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="2-配置项"><a href="#2-配置项" class="headerlink" title="2. 配置项"></a>2. 配置项</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;homekit/homekit.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;homekit/characteristics.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_accessory_identify</span><span class="params">(<span class="keyword">homekit_value_t</span> _value)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;accessory identify\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Switch (HAP section 8.38)</span></span><br><span class="line"><span class="comment">// required: ON</span></span><br><span class="line"><span class="comment">// optional: NAME</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// format: bool; HAP section 9.70; write the .setter function to get the switch-event sent from iOS Home APP.</span></span><br><span class="line"><span class="keyword">homekit_characteristic_t</span> cha_switch_on = HOMEKIT_CHARACTERISTIC_(ON, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// format: string; HAP section 9.62; max length 64</span></span><br><span class="line"><span class="keyword">homekit_characteristic_t</span> cha_name = HOMEKIT_CHARACTERISTIC_(NAME, <span class="string">&quot;Switch&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">homekit_accessory_t</span> *accessories[] = &#123;</span><br><span class="line">    HOMEKIT_ACCESSORY(.id=<span class="number">1</span>, .category=homekit_accessory_category_switch, .services=(<span class="keyword">homekit_service_t</span>*[]) &#123;</span><br><span class="line">        HOMEKIT_SERVICE(ACCESSORY_INFORMATION, .characteristics=(<span class="keyword">homekit_characteristic_t</span>*[]) &#123;</span><br><span class="line">            HOMEKIT_CHARACTERISTIC(NAME, <span class="string">&quot;Switch&quot;</span>),</span><br><span class="line">            HOMEKIT_CHARACTERISTIC(MANUFACTURER, <span class="string">&quot;Arduino HomeKit&quot;</span>),</span><br><span class="line">            HOMEKIT_CHARACTERISTIC(SERIAL_NUMBER, <span class="string">&quot;0123456&quot;</span>),</span><br><span class="line">            HOMEKIT_CHARACTERISTIC(MODEL, <span class="string">&quot;ESP8266/ESP32&quot;</span>),</span><br><span class="line">            HOMEKIT_CHARACTERISTIC(FIRMWARE_REVISION, <span class="string">&quot;1.0&quot;</span>),</span><br><span class="line">            HOMEKIT_CHARACTERISTIC(IDENTIFY, my_accessory_identify),</span><br><span class="line">            <span class="literal">NULL</span></span><br><span class="line">        &#125;),</span><br><span class="line">    HOMEKIT_SERVICE(SWITCH, .primary=<span class="literal">true</span>, .characteristics=(<span class="keyword">homekit_characteristic_t</span>*[])&#123;</span><br><span class="line">      &amp;cha_switch_on,</span><br><span class="line">      &amp;cha_name,</span><br><span class="line">      <span class="literal">NULL</span></span><br><span class="line">    &#125;),</span><br><span class="line">        <span class="literal">NULL</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="literal">NULL</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">homekit_server_config_t</span> config = &#123;</span><br><span class="line">    .accessories = accessories,</span><br><span class="line">    .password = <span class="string">&quot;111-11-111&quot;</span>  <span class="comment">//加入家庭时的代码为八个1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h2 id="三、安装步骤"><a href="#三、安装步骤" class="headerlink" title="三、安装步骤"></a>三、安装步骤</h2><h3 id="1-下载配置Arduino"><a href="#1-下载配置Arduino" class="headerlink" title="1. 下载配置Arduino"></a>1. 下载配置Arduino</h3><h4 id="1-1-Arduino官网地址"><a href="#1-1-Arduino官网地址" class="headerlink" title="1.1 Arduino官网地址"></a>1.1 <a href="https://www.arduino.cc/">Arduino官网地址</a></h4><h4 id="1-2-配置信息"><a href="#1-2-配置信息" class="headerlink" title="1.2 配置信息"></a>1.2 配置信息</h4><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/202301281532448.jpg"></p>
<h4 id="1-3-开发板管理器地址"><a href="#1-3-开发板管理器地址" class="headerlink" title="1.3 开发板管理器地址"></a>1.3 开发板管理器地址</h4><p><a href="https://arduino.esp8266.com/stable/package_esp8266com_index.json">https://arduino.esp8266.com/stable/package_esp8266com_index.json</a></p>
<h4 id="1-4-打开开发板管理器"><a href="#1-4-打开开发板管理器" class="headerlink" title="1.4 打开开发板管理器"></a>1.4 打开开发板管理器<img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/202301281534788.jpg"></h4><h4 id="1-5-安装8266"><a href="#1-5-安装8266" class="headerlink" title="1.5 安装8266"></a>1.5 安装8266<img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/202301281537530.jpg"></h4><h3 id="2-用Arduino打开下载的项目"><a href="#2-用Arduino打开下载的项目" class="headerlink" title="2. 用Arduino打开下载的项目"></a>2. 用Arduino打开下载的项目</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/202301281538561.jpg"></p>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/202301281556741.jpg"></p>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/202301281559586.jpg"></p>
<h3 id="3-烧录程序"><a href="#3-烧录程序" class="headerlink" title="3. 烧录程序"></a>3. 烧录程序</h3><h4 id="3-1-方法一"><a href="#3-1-方法一" class="headerlink" title="3.1 方法一"></a>3.1 方法一</h4><p>用esptool烧录：esptool.py write_flash 0x0 【固件路径】</p>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/202301281603411.jpg"></p>
<h4 id="3-2-方法二"><a href="#3-2-方法二" class="headerlink" title="3.2 方法二"></a>3.2 方法二</h4><p>直接在Arduino烧录上传</p>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/202301281613240.jpg"></p>
<p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/202301281608466.jpg"></p>
<h3 id="4-上传静态文件"><a href="#4-上传静态文件" class="headerlink" title="4. 上传静态文件"></a>4. 上传静态文件</h3><p><img src="https://img-bed-1300797451.cos.ap-nanjing.myqcloud.com/images_bed/%E6%99%BA%E8%83%BD%E5%AE%B6%E5%B1%85/202301281616885.jpg"></p>
<h3 id="5-配网"><a href="#5-配网" class="headerlink" title="5. 配网"></a>5. 配网</h3><h4 id="5-1待指示灯快速闪烁时，连接（智能灯控配网）WiFi"><a href="#5-1待指示灯快速闪烁时，连接（智能灯控配网）WiFi" class="headerlink" title="5.1待指示灯快速闪烁时，连接（智能灯控配网）WiFi"></a>5.1待指示灯快速闪烁时，连接（智能灯控配网）WiFi</h4><p><img src="/Users/haikez/Desktop/QQ20230128-161714@2x.jpg" alt="QQ20230128-161714@2x"></p>
<h4 id="5-2-用浏览器访问ip（6-6-6-6）"><a href="#5-2-用浏览器访问ip（6-6-6-6）" class="headerlink" title="5.2 用浏览器访问ip（6.6.6.6）"></a>5.2 用浏览器访问ip（6.6.6.6）</h4><p><img src="/Users/haikez/Desktop/QQ20230128-162443@2x.jpg" alt="QQ20230128-162443@2x"></p>
<h4 id="5-3-注意WiFi名称不能出现中文！！！！"><a href="#5-3-注意WiFi名称不能出现中文！！！！" class="headerlink" title="5.3 注意WiFi名称不能出现中文！！！！"></a>5.3 注意WiFi名称不能出现中文！！！！</h4>]]></content>
      <tags>
        <tag>智能家居</tag>
      </tags>
  </entry>
</search>
